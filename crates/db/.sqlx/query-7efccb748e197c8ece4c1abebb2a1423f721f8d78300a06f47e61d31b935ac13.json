{
  "db_name": "PostgreSQL",
  "query": "WITH\n  pf AS (\n    SELECT\n      pf.id,\n      pf.profile_id,\n      f.link,\n      pf.title,\n      f.title AS original_title,\n      f.url,\n      count(pfe.id) AS unread_count\n    FROM\n      profile_feed AS pf\n      INNER JOIN feed AS f ON f.id = pf.feed_id\n      LEFT JOIN profile_feed_entry AS pfe ON pfe.profile_feed_id = pf.id\n      AND pfe.has_read = FALSE\n    WHERE\n      pf.id = $1\n      AND pf.profile_id = $2\n    GROUP BY\n      pf.id,\n      f.link,\n      f.title,\n      f.url\n  ),\n  t_insert AS (\n    INSERT INTO\n      tag (title, profile_id)\n    SELECT\n      unnest($3::TEXT[]),\n      pf.profile_id\n    FROM\n      pf\n    ON CONFLICT (profile_id, title) DO nothing\n    RETURNING\n      id,\n      title\n  ),\n  t AS (\n    SELECT\n      id,\n      title\n    FROM\n      t_insert\n    UNION ALL\n    SELECT\n      t.id,\n      t.title\n    FROM\n      tag t,\n      pf\n    WHERE\n      t.title = ANY ($3::TEXT[])\n      AND t.profile_id = pf.profile_id\n  ),\n  pft_insert AS (\n    INSERT INTO\n      profile_feed_tag (profile_feed_id, tag_id, profile_id)\n    SELECT\n      pf.id,\n      t.id,\n      pf.profile_id\n    FROM\n      pf,\n      t\n    ON CONFLICT DO nothing\n    RETURNING\n      profile_feed_id,\n      tag_id\n  ),\n  pft_delete AS (\n    DELETE FROM profile_feed_tag USING pf\n    WHERE\n      profile_feed_id = pf.id\n      AND tag_id NOT IN (\n        SELECT\n          t.id\n        FROM\n          t\n      )\n  ),\n  pft AS (\n    SELECT\n      profile_feed_id,\n      tag_id\n    FROM\n      pft_insert\n    UNION ALL\n    SELECT\n      pft.profile_feed_id,\n      pft.tag_id\n    FROM\n      profile_feed_tag pft,\n      pf\n    WHERE\n      pft.profile_feed_id = pf.id\n  )\nSELECT\n  pf.id,\n  pf.link,\n  pf.title,\n  pf.original_title,\n  pf.url,\n  coalesce(\n    json_agg(\n      DISTINCT jsonb_build_object(\n        'id',\n        t.id,\n        'title',\n        t.title,\n        'bookmark_count',\n        NULL::int8,\n        'feed_count',\n        NULL::int8\n      )\n    ) FILTER (\n      WHERE\n        t.id IS NOT NULL\n    ),\n    '[]'\n  ) AS \"tags!: Json<Vec<Tag>>\",\n  pf.unread_count\nFROM\n  pf\n  LEFT JOIN pft ON pft.profile_feed_id = pf.id\n  LEFT JOIN t ON t.id = pft.tag_id\nGROUP BY\n  pf.id,\n  pf.link,\n  pf.title,\n  pf.original_title,\n  pf.url,\n  pf.unread_count;",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "id",
        "type_info": "Uuid"
      },
      {
        "ordinal": 1,
        "name": "link",
        "type_info": "Text"
      },
      {
        "ordinal": 2,
        "name": "title",
        "type_info": "Text"
      },
      {
        "ordinal": 3,
        "name": "original_title",
        "type_info": "Text"
      },
      {
        "ordinal": 4,
        "name": "url",
        "type_info": "Text"
      },
      {
        "ordinal": 5,
        "name": "tags!: Json<Vec<Tag>>",
        "type_info": "Json"
      },
      {
        "ordinal": 6,
        "name": "unread_count",
        "type_info": "Int8"
      }
    ],
    "parameters": {
      "Left": [
        "Uuid",
        "Uuid",
        "TextArray"
      ]
    },
    "nullable": [
      false,
      false,
      true,
      false,
      true,
      null,
      null
    ]
  },
  "hash": "7efccb748e197c8ece4c1abebb2a1423f721f8d78300a06f47e61d31b935ac13"
}
