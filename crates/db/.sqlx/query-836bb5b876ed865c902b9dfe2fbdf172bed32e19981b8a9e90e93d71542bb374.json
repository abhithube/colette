{
  "db_name": "PostgreSQL",
  "query": "WITH\n  b AS (\n    INSERT INTO\n      bookmarks (link, title, thumbnail_url, published_at, author)\n    VALUES\n      ($1, $2, $3, $4, $5)\n    ON CONFLICT (link) DO\n    UPDATE\n    SET\n      title = excluded.title,\n      thumbnail_url = excluded.thumbnail_url,\n      published_at = excluded.published_at,\n      author = excluded.author\n    RETURNING\n      id,\n      link,\n      title,\n      thumbnail_url,\n      published_at,\n      author\n  ),\n  pb_insert AS (\n    INSERT INTO\n      profile_bookmarks (profile_id, bookmark_id)\n    SELECT\n      $6,\n      b.id\n    FROM\n      b\n    ON CONFLICT (profile_id, bookmark_id) DO nothing\n    RETURNING\n      id,\n      profile_id,\n      bookmark_id\n  ),\n  pb AS (\n    SELECT\n      id AS \"id!\",\n      profile_id,\n      bookmark_id\n    FROM\n      pb_insert\n    UNION ALL\n    SELECT\n      pb.id,\n      pb.profile_id,\n      pb.bookmark_id\n    FROM\n      profile_bookmarks pb,\n      b\n    WHERE\n      pb.profile_id = $6\n      AND pb.bookmark_id = b.id\n  )\nSELECT\n  pb.\"id!\",\n  b.link,\n  b.title,\n  b.thumbnail_url,\n  b.published_at,\n  b.author,\n  coalesce(\n    array_agg(ROW (t.id, t.title)) FILTER (\n      WHERE\n        t.id IS NOT NULL\n    ),\n    ARRAY[]::record[]\n  ) AS \"tags!: Vec<Tag>\"\nFROM\n  pb\n  INNER JOIN b ON b.id = pb.bookmark_id\n  LEFT JOIN profile_bookmark_tags AS pbt ON pbt.profile_bookmark_id = pb.\"id!\"\n  LEFT JOIN tags AS t ON pbt.tag_id = t.id\nGROUP BY\n  pb.\"id!\",\n  b.link,\n  b.title,\n  b.thumbnail_url,\n  b.published_at,\n  b.author;",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "id!",
        "type_info": "Uuid"
      },
      {
        "ordinal": 1,
        "name": "link",
        "type_info": "Text"
      },
      {
        "ordinal": 2,
        "name": "title",
        "type_info": "Text"
      },
      {
        "ordinal": 3,
        "name": "thumbnail_url",
        "type_info": "Text"
      },
      {
        "ordinal": 4,
        "name": "published_at",
        "type_info": "Timestamptz"
      },
      {
        "ordinal": 5,
        "name": "author",
        "type_info": "Text"
      },
      {
        "ordinal": 6,
        "name": "tags!: Vec<Tag>",
        "type_info": "RecordArray"
      }
    ],
    "parameters": {
      "Left": [
        "Text",
        "Text",
        "Text",
        "Timestamptz",
        "Text",
        "Uuid"
      ]
    },
    "nullable": [
      null,
      false,
      false,
      true,
      true,
      true,
      null
    ]
  },
  "hash": "836bb5b876ed865c902b9dfe2fbdf172bed32e19981b8a9e90e93d71542bb374"
}
