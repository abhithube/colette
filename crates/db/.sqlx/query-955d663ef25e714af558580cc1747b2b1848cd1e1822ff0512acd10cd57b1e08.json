{
  "db_name": "PostgreSQL",
  "query": "WITH\n  f AS (\n    INSERT INTO\n      feed (link, title, url)\n    VALUES\n      ($3, $4, $5)\n    ON CONFLICT (link) DO\n    UPDATE\n    SET\n      title = excluded.title,\n      url = excluded.url\n    RETURNING\n      id,\n      link,\n      title,\n      url\n  ),\n  pf_insert AS (\n    INSERT INTO\n      profile_feed (id, profile_id, feed_id)\n    SELECT\n      $1,\n      $2,\n      f.id\n    FROM\n      f\n    ON CONFLICT (profile_id, feed_id) DO nothing\n    RETURNING\n      id,\n      title,\n      profile_id,\n      feed_id\n  ),\n  pf AS (\n    SELECT\n      id AS \"id!\",\n      title,\n      profile_id,\n      feed_id\n    FROM\n      pf_insert\n    UNION ALL\n    SELECT\n      pf.id,\n      pf.title,\n      pf.profile_id,\n      pf.feed_id\n    FROM\n      profile_feed pf,\n      f\n    WHERE\n      pf.profile_id = $2\n      AND pf.feed_id = f.id\n  ),\n  e AS (\n    INSERT INTO\n      entry (\n        link,\n        title,\n        published_at,\n        description,\n        author,\n        thumbnail_url\n      )\n    SELECT\n      *\n    FROM\n      unnest(\n        $6::TEXT[],\n        $7::TEXT[],\n        $8::TIMESTAMPTZ[],\n        $9::TEXT[],\n        $10::TEXT[],\n        $11::TEXT[]\n      )\n    ON CONFLICT (link) DO\n    UPDATE\n    SET\n      title = excluded.title,\n      published_at = excluded.published_at,\n      description = excluded.description,\n      author = excluded.author,\n      thumbnail_url = excluded.thumbnail_url\n    RETURNING\n      id\n  ),\n  fe_insert AS (\n    INSERT INTO\n      feed_entry (feed_id, entry_id)\n    SELECT\n      f.id,\n      e.id\n    FROM\n      f,\n      e\n    ON CONFLICT (feed_id, entry_id) DO nothing\n    RETURNING\n      id\n  ),\n  fe AS (\n    SELECT\n      id\n    FROM\n      fe_insert\n    UNION ALL\n    SELECT\n      fe.id\n    FROM\n      feed_entry fe,\n      f,\n      e\n    WHERE\n      fe.feed_id = f.id\n      AND fe.entry_id IN (\n        SELECT\n          id\n        FROM\n          e\n      )\n  ),\n  pfe AS (\n    INSERT INTO\n      profile_feed_entry (profile_feed_id, feed_entry_id, profile_id)\n    SELECT\n      pf.\"id!\",\n      fe.id,\n      pf.profile_id\n    FROM\n      pf,\n      fe\n    ON CONFLICT (profile_feed_id, feed_entry_id) DO nothing\n    RETURNING\n      id\n  ),\n  pft AS (\n    SELECT\n      t.id,\n      t.title,\n      pft.profile_feed_id\n    FROM\n      profile_feed_tag AS pft\n      INNER JOIN tag AS t ON t.id = pft.tag_id\n    ORDER BY\n      t.title ASC\n  )\nSELECT\n  pf.\"id!\",\n  f.link,\n  pf.title,\n  f.title AS original_title,\n  f.url,\n  coalesce(\n    json_agg(\n      DISTINCT jsonb_build_object(\n        'id',\n        pft.id,\n        'title',\n        pft.title,\n        'bookmark_count',\n        NULL::int8,\n        'feed_count',\n        NULL::int8\n      )\n    ) FILTER (\n      WHERE\n        pft.id IS NOT NULL\n    ),\n    '[]'\n  ) AS \"tags!: Json<Vec<Tag>>\",\n  count(pfe.id) AS unread_count\nFROM\n  pf\n  INNER JOIN f ON f.id = pf.feed_id\n  LEFT JOIN pft ON pft.profile_feed_id = pf.\"id!\"\n  LEFT JOIN profile_feed_entry AS pfe ON pfe.profile_feed_id = pf.\"id!\"\n  AND pfe.has_read = FALSE\nGROUP BY\n  pf.\"id!\",\n  pf.title,\n  f.link,\n  f.title,\n  f.url;",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "id!",
        "type_info": "Uuid"
      },
      {
        "ordinal": 1,
        "name": "link",
        "type_info": "Text"
      },
      {
        "ordinal": 2,
        "name": "title",
        "type_info": "Text"
      },
      {
        "ordinal": 3,
        "name": "original_title",
        "type_info": "Text"
      },
      {
        "ordinal": 4,
        "name": "url",
        "type_info": "Text"
      },
      {
        "ordinal": 5,
        "name": "tags!: Json<Vec<Tag>>",
        "type_info": "Json"
      },
      {
        "ordinal": 6,
        "name": "unread_count",
        "type_info": "Int8"
      }
    ],
    "parameters": {
      "Left": [
        "Uuid",
        "Uuid",
        "Text",
        "Text",
        "Text",
        "TextArray",
        "TextArray",
        "TimestamptzArray",
        "TextArray",
        "TextArray",
        "TextArray"
      ]
    },
    "nullable": [
      null,
      false,
      null,
      false,
      true,
      null,
      null
    ]
  },
  "hash": "955d663ef25e714af558580cc1747b2b1848cd1e1822ff0512acd10cd57b1e08"
}
