//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_type = "Text", unique)]
    pub email: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub display_name: Option<String>,
    pub created_at: i32,
    pub updated_at: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::accounts::Entity")]
    Accounts,
    #[sea_orm(has_many = "super::api_keys::Entity")]
    ApiKeys,
    #[sea_orm(has_many = "super::bookmark_tags::Entity")]
    BookmarkTags,
    #[sea_orm(has_many = "super::bookmarks::Entity")]
    Bookmarks,
    #[sea_orm(has_many = "super::collections::Entity")]
    Collections,
    #[sea_orm(has_many = "super::read_entries::Entity")]
    ReadEntries,
    #[sea_orm(has_many = "super::streams::Entity")]
    Streams,
    #[sea_orm(has_many = "super::subscription_tags::Entity")]
    SubscriptionTags,
    #[sea_orm(has_many = "super::subscriptions::Entity")]
    Subscriptions,
    #[sea_orm(has_many = "super::tags::Entity")]
    Tags,
}

impl Related<super::accounts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Accounts.def()
    }
}

impl Related<super::api_keys::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ApiKeys.def()
    }
}

impl Related<super::bookmark_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BookmarkTags.def()
    }
}

impl Related<super::bookmarks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Bookmarks.def()
    }
}

impl Related<super::collections::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Collections.def()
    }
}

impl Related<super::read_entries::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ReadEntries.def()
    }
}

impl Related<super::streams::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Streams.def()
    }
}

impl Related<super::subscription_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SubscriptionTags.def()
    }
}

impl Related<super::subscriptions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Subscriptions.def()
    }
}

impl Related<super::tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tags.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
