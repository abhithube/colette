//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tag")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub title: String,
    pub parent_id: Option<Uuid>,
    pub profile_id: Uuid,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::profile::Entity",
        from = "Column::ProfileId",
        to = "super::profile::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Profile,
    #[sea_orm(has_many = "super::profile_bookmark_tag::Entity")]
    ProfileBookmarkTag,
    #[sea_orm(has_many = "super::profile_feed_tag::Entity")]
    ProfileFeedTag,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    SelfRef,
}

impl Related<super::profile::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Profile.def()
    }
}

impl Related<super::profile_bookmark_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProfileBookmarkTag.def()
    }
}

impl Related<super::profile_feed_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProfileFeedTag.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
