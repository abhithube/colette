//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "feed_entries")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub feed_id: i32,
    pub entry_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::entries::Entity",
        from = "Column::EntryId",
        to = "super::entries::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Entries,
    #[sea_orm(
        belongs_to = "super::feeds::Entity",
        from = "Column::FeedId",
        to = "super::feeds::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Feeds,
    #[sea_orm(has_many = "super::profile_feed_entries::Entity")]
    ProfileFeedEntries,
}

impl Related<super::entries::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Entries.def()
    }
}

impl Related<super::feeds::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Feeds.def()
    }
}

impl Related<super::profile_feed_entries::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProfileFeedEntries.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
