openapi: 3.1.0
info:
  title: Colette API
  description: Public REST API for the Colette app. Supports OAuth 2.0 and API key authentication.
  license:
    name: MIT
  version: 0.1.0
servers:
- url: /api
paths:
  /apiKeys:
    get:
      tags:
      - API Keys
      description: List user API keys
      operationId: listApiKeys
      parameters:
      - name: cursor
        in: query
        description: Pagination cursor
        required: false
        schema:
          type: string
      responses:
        '200':
          description: Paginated list of API keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Paginated_ApiKey'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      tags:
      - API Keys
      description: Create an API key
      operationId: createApiKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyCreate'
        required: true
      responses:
        '201':
          description: Created API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyCreated'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /apiKeys/{id}:
    get:
      tags:
      - API Keys
      description: Get an API key by ID
      operationId: getApiKey
      parameters:
      - name: id
        in: path
        description: Unique identifier of the resource
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: API key by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags:
      - API Keys
      description: Delete an API key by ID
      operationId: deleteApiKey
      parameters:
      - name: id
        in: path
        description: Unique identifier of the resource
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Successfully deleted API key
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    patch:
      tags:
      - API Keys
      description: Update an API key by ID
      operationId: updateApiKey
      parameters:
      - name: id
        in: path
        description: Unique identifier of the resource
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyUpdate'
        required: true
      responses:
        '200':
          description: Updated API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/register:
    post:
      tags:
      - Auth
      description: Register a new user account
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterPayload'
        required: true
      responses:
        '200':
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/login:
    post:
      tags:
      - Auth
      description: Login to a user account
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginPayload'
        required: true
      responses:
        '200':
          description: Access token for autheticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenData'
        '401':
          description: Bad credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/@me:
    get:
      tags:
      - Auth
      description: Get the active user
      operationId: getActiveUser
      responses:
        '200':
          description: Active user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/token:
    post:
      tags:
      - Auth
      description: Generate a new access token, and rotate the refresh token
      operationId: refreshToken
      responses:
        '200':
          description: Access token for autheticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenData'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/logout:
    post:
      tags:
      - Auth
      description: Logout the active user
      operationId: logoutUser
      responses:
        '204':
          description: Successfully logged out
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/oidc/redirect:
    get:
      tags:
      - Auth
      description: Initiate the OIDC flow by redirecting to the authorization URL
      operationId: redirectOidc
      responses:
        '303':
          description: Redirect to OIDC authorization endpoint
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/oidc/code:
    post:
      tags:
      - Auth
      description: Log in, and optionally register, a user from an OAuth authorization code
      operationId: exchangeCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodePayload'
        required: true
      responses:
        '200':
          description: Access token for autheticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenData'
        '409':
          description: Missing OAuth cookies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /backups/import:
    post:
      tags:
      - Backups
      description: Import backup into user account
      operationId: importBackup
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: array
              items:
                type: integer
                format: int32
                minimum: 0
        required: true
      responses:
        '204':
          description: Successfully started import
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /backups/export:
    post:
      tags:
      - Backups
      description: Export user backup
      operationId: exportBackup
      responses:
        '200':
          description: JSON backup file
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
                  minimum: 0
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /bookmarks:
    get:
      tags:
      - Bookmarks
      description: List user bookmarks
      operationId: listBookmarks
      parameters:
      - name: collectionId
        in: query
        description: Filter by the ID of a collection whose filters may apply to the bookmark
        required: false
        schema:
          type: string
          format: uuid
      - name: filterByTags
        in: query
        description: Whether to filter by tags linked to the bookmark
        required: false
        schema:
          type: boolean
      - name: tag[]
        in: query
        description: Filter by the IDs of the tags linked to the bookmark
        required: false
        schema:
          type: array
          items:
            type: string
            format: uuid
      - name: cursor
        in: query
        description: Pagination cursor
        required: false
        schema:
          type: string
      - name: withTags
        in: query
        description: Whether to include the tags linked to the bookmark
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: Paginated list of bookmarks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Paginated_BookmarkDetails'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      tags:
      - Bookmarks
      description: Add a bookmark
      operationId: createBookmark
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookmarkCreate'
        required: true
      responses:
        '201':
          description: Created bookmark
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '409':
          description: Bookmark already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /bookmarks/{id}:
    get:
      tags:
      - Bookmarks
      description: Get a bookmark by ID
      operationId: getBookmark
      parameters:
      - name: id
        in: path
        description: Unique identifier of the resource
        required: true
        schema:
          type: string
          format: uuid
      - name: withTags
        in: query
        description: Whether to include the tags linked to the bookmark
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: Bookmark by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookmarkDetails'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Bookmark not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags:
      - Bookmarks
      description: Delete a bookmark by ID
      operationId: deleteBookmark
      parameters:
      - name: id
        in: path
        description: Unique identifier of the resource
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Successfully deleted bookmark
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Bookmark not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    patch:
      tags:
      - Bookmarks
      description: Update a bookmark by ID
      operationId: updateBookmark
      parameters:
      - name: id
        in: path
        description: Unique identifier of the resource
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookmarkUpdate'
        required: true
      responses:
        '200':
          description: Updated bookmark
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Bookmark not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /bookmarks/{id}/linkTags:
    post:
      tags:
      - Bookmarks
      description: Link a list of tags to a bookmark
      operationId: linkBookmarkTags
      parameters:
      - name: id
        in: path
        description: Unique identifier of the resource
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkBookmarkTags'
        required: true
      responses:
        '204':
          description: Successfully linked tags
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Bookmark not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /bookmarks/scrape:
    post:
      tags:
      - Bookmarks
      description: Scrape bookmark from a webpage
      operationId: scrapeBookmark
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookmarkScrape'
        required: true
      responses:
        '201':
          description: Scraped bookmark
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookmarkScraped'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '502':
          description: Failed to fetch data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /bookmarks/import:
    post:
      tags:
      - Bookmarks
      description: Import bookmarks into user account
      operationId: importBookmarks
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: array
              items:
                type: integer
                format: int32
                minimum: 0
        required: true
      responses:
        '204':
          description: Successfully started import
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /bookmarks/export:
    post:
      tags:
      - Bookmarks
      description: Export user bookmarks
      operationId: exportBookmarks
      responses:
        '200':
          description: Netscape bookmarks file
          content:
            text/html:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
                  minimum: 0
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /collections:
    get:
      tags:
      - Collections
      description: List user collections
      operationId: listCollections
      parameters:
      - name: cursor
        in: query
        description: Pagination cursor
        required: false
        schema:
          type: string
      responses:
        '200':
          description: Paginated list of collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Paginated_Collection'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      tags:
      - Collections
      description: Create a collection
      operationId: createCollection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionCreate'
        required: true
      responses:
        '201':
          description: Created collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '409':
          description: Collection already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /collections/{id}:
    get:
      tags:
      - Collections
      description: Get a collection by ID
      operationId: getCollection
      parameters:
      - name: id
        in: path
        description: Unique identifier of the resource
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Collection by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags:
      - Collections
      description: Delete a collection by ID
      operationId: deleteCollection
      parameters:
      - name: id
        in: path
        description: Unique identifier of the resource
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Successfully deleted collection
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    patch:
      tags:
      - Collections
      description: Update a collection by ID
      operationId: updateCollection
      parameters:
      - name: id
        in: path
        description: Unique identifier of the resource
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionUpdate'
        required: true
      responses:
        '200':
          description: Updated collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /config:
    get:
      tags:
      - Config
      description: Get the API config
      operationId: getConfig
      responses:
        '200':
          description: API config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
      security:
      - {}
  /feedEntries:
    get:
      tags:
      - Feed Entries
      description: List feed entries
      operationId: listFeedEntries
      parameters:
      - name: feedId
        in: query
        description: Filter by the ID of the associated RSS feed
        required: false
        schema:
          type: string
          format: uuid
      - name: cursor
        in: query
        description: Pagination cursor
        required: false
        schema:
          type: string
      responses:
        '200':
          description: Paginated list of feed entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Paginated_FeedEntry'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /feedEntries/{id}:
    get:
      tags:
      - Feed Entries
      description: Get a feed entry by ID
      operationId: getFeedEntry
      parameters:
      - name: id
        in: path
        description: Unique identifier of the resource
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Feed entry by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedEntry'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Feed entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /feeds/detect:
    post:
      tags:
      - Feeds
      description: Detects web feeds on a page
      operationId: detectFeeds
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedDetect'
        required: true
      responses:
        '201':
          description: List of detected feeds
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeedDetected'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '502':
          description: Failed to fetch data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /feeds/scrape:
    post:
      tags:
      - Feeds
      description: Scrape web feed
      operationId: scrapeFeed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedScrape'
        required: true
      responses:
        '201':
          description: Scraped feed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feed'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '502':
          description: Failed to fetch data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /subscriptions:
    get:
      tags:
      - Subscriptions
      description: List user subscriptions
      operationId: listSubscriptions
      parameters:
      - name: filterByTags
        in: query
        description: Whether to filter by tags linked to the subscription
        required: false
        schema:
          type: boolean
      - name: tag[]
        in: query
        description: Filter by the IDs of the tags linked to the subscription
        required: false
        schema:
          type: array
          items:
            type: string
            format: uuid
      - name: cursor
        in: query
        description: Pagination cursor
        required: false
        schema:
          type: string
      - name: withUnreadCount
        in: query
        description: Whether to include the count of the unread subscription entries associated with the subscription
        required: false
        schema:
          type: boolean
      - name: withTags
        in: query
        description: Whether to include the tags linked to the subscription
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: Paginated list of subscriptions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Paginated_SubscriptionDetails'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      tags:
      - Subscriptions
      description: Subscribe to a web feed
      operationId: createSubscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionCreate'
        required: true
      responses:
        '201':
          description: Created subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '409':
          description: Subscription already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /subscriptions/{id}:
    get:
      tags:
      - Subscriptions
      description: Get a subscription by ID
      operationId: getSubscription
      parameters:
      - name: id
        in: path
        description: Unique identifier of the resource
        required: true
        schema:
          type: string
          format: uuid
      - name: withUnreadCount
        in: query
        description: Whether to include the count of the unread subscription entries associated with the subscription
        required: false
        schema:
          type: boolean
      - name: withTags
        in: query
        description: Whether to include the tags linked to the subscription
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: Subscription by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionDetails'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Subscription not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags:
      - Subscriptions
      description: Delete a subscription by ID
      operationId: deleteSubscription
      parameters:
      - name: id
        in: path
        description: Unique identifier of the resource
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Successfully deleted subscription
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Subscription not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    patch:
      tags:
      - Subscriptions
      description: Update a subscription by ID
      operationId: updateSubscription
      parameters:
      - name: id
        in: path
        description: Unique identifier of the resource
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionUpdate'
        required: true
      responses:
        '200':
          description: Updated subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Subscription not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /subscriptions/{id}/linkTags:
    post:
      tags:
      - Subscriptions
      description: Link a list of tags to a subscription
      operationId: linkSubscriptionTags
      parameters:
      - name: id
        in: path
        description: Unique identifier of the resource
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkSubscriptionTags'
        required: true
      responses:
        '204':
          description: Successfully linked tags
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Subscription not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /subscriptions/import:
    post:
      tags:
      - Subscriptions
      description: Import subscriptions into user account
      operationId: importSubscriptions
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: array
              items:
                type: integer
                format: int32
                minimum: 0
        required: true
      responses:
        '204':
          description: Successfully started import
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /subscriptions/export:
    post:
      tags:
      - Subscriptions
      description: Export user subscriptions
      operationId: exportSubscriptions
      responses:
        '200':
          description: OPML subscriptions file
          content:
            application/xml:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
                  minimum: 0
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /subscriptionEntries:
    get:
      tags:
      - Subscription Entries
      description: List subscription entries
      operationId: listSubscriptionEntries
      parameters:
      - name: collectionId
        in: query
        description: Filter by the ID of a collection whose filters may apply to the subscription entry
        required: false
        schema:
          type: string
          format: uuid
      - name: subscriptionId
        in: query
        description: Filter by the ID of the associated subscription
        required: false
        schema:
          type: string
          format: uuid
      - name: hasRead
        in: query
        description: Filter by whether the subscription entry has been marked as read
        required: false
        schema:
          type: boolean
      - name: tag[]
        in: query
        description: Filter by the IDs of the tags linked to the associated subscription
        required: false
        schema:
          type: array
          items:
            type: string
            format: uuid
      - name: cursor
        in: query
        description: Pagination cursor
        required: false
        schema:
          type: string
      responses:
        '200':
          description: Paginated list of subscription entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Paginated_SubscriptionEntryDetails'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /subscriptionEntries/{id}/markAsRead:
    post:
      tags:
      - Subscription Entries
      description: Mark a subscription entry as read
      operationId: markSubscriptionEntryAsRead
      parameters:
      - name: id
        in: path
        description: Unique identifier of the resource
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Successfully marked subscription entry as read
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Subscription entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /subscriptionEntries/{id}/markAsUnread:
    post:
      tags:
      - Subscription Entries
      description: Mark a subscription entry as unread
      operationId: markSubscriptionEntryAsUnread
      parameters:
      - name: id
        in: path
        description: Unique identifier of the resource
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Successfully marked subscription entry as unread
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Subscription entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /tags:
    get:
      tags:
      - Tags
      description: List user tags
      operationId: listTags
      parameters:
      - name: cursor
        in: query
        description: Pagination cursor
        required: false
        schema:
          type: string
      responses:
        '200':
          description: Paginated list of tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Paginated_TagDetails'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      tags:
      - Tags
      description: Create a tag
      operationId: createTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreate'
        required: true
      responses:
        '201':
          description: Created tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '409':
          description: Tag already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /tags/{id}:
    get:
      tags:
      - Tags
      description: Get a tag by ID
      operationId: getTag
      parameters:
      - name: id
        in: path
        description: Unique identifier of the resource
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Tag by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagDetails'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags:
      - Tags
      description: Delete a tag by ID
      operationId: deleteTag
      parameters:
      - name: id
        in: path
        description: Unique identifier of the resource
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: Successfully deleted tag
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    patch:
      tags:
      - Tags
      description: Update a tag by ID
      operationId: updateTag
      parameters:
      - name: id
        in: path
        description: Unique identifier of the resource
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagUpdate'
        required: true
      responses:
        '200':
          description: Updated tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '401':
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '422':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        default:
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
components:
  schemas:
    ApiError:
      type: object
      required:
      - code
      - message
      properties:
        code:
          $ref: '#/components/schemas/ApiErrorCode'
        message:
          type: string
    ApiErrorCode:
      type: string
      enum:
      - NOT_AUTHENTICATED
      - NOT_AUTHORIZED
      - NOT_FOUND
      - CONFLICT
      - VALIDATION
      - BAD_GATEWAY
      - UNKNOWN
    ApiKey:
      type: object
      description: Long-lived token linked to a user's account. Useful for third party client apps to access a user's data. The full value is returned only once, on creation.
      required:
      - id
      - title
      - preview
      - createdAt
      - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the API key
        title:
          type: string
          description: Human-readable name of the API key
        preview:
          type: string
          description: Partial view of the API key value for identification purposes
        createdAt:
          type: string
          format: date-time
          description: Timestamp at which the API key was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp at which the API key was last modified
    ApiKeyCreate:
      type: object
      description: Data to create a new API key
      required:
      - title
      properties:
        title:
          type: string
          description: Human-readable name for the API key to create, cannot be empty
          minLength: 1
    ApiKeyCreated:
      type: object
      description: Newly created API key, containing the full value. This value must be saved in a safe location, as subsequent GET requests will only show a preview.
      required:
      - id
      - value
      - title
      - createdAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the new API key
        value:
          type: string
          description: Full value of the new API key
        title:
          type: string
          description: Human-readable name of the new API key
        createdAt:
          type: string
          format: date-time
          description: Timestamp at which the API key was created
    ApiKeyUpdate:
      type: object
      description: Details regarding the existing API key to update
      properties:
        title:
          type: string
          description: Human-readable name for the API key to update, cannot be empty
          minLength: 1
    Bookmark:
      type: object
      description: Bookmark to a webpage
      required:
      - id
      - link
      - title
      - thumbnailUrl
      - publishedAt
      - author
      - archivedPath
      - createdAt
      - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the bookmark
        link:
          type: string
          format: uri
          description: URL of the webpage the bookmark links to
        title:
          type: string
          description: Title of the bookmark
        thumbnailUrl:
          type:
          - string
          - 'null'
          format: uri
          description: Thumbnail URL of the bookmark
        publishedAt:
          type:
          - string
          - 'null'
          format: date-time
          description: Timestamp at which the bookmark was published
        author:
          type:
          - string
          - 'null'
          description: Author of the bookmark
        archivedPath:
          type:
          - string
          - 'null'
          description: Storage path of the archived version of the bookmark's thumbnail
        createdAt:
          type: string
          format: date-time
          description: Timestamp at which the bookmark was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp at which the bookmark was modified
    BookmarkCreate:
      type: object
      description: Data to create a new bookmark
      required:
      - url
      - title
      properties:
        url:
          type: string
          format: uri
          description: URL of the webpage the bookmark links to
        title:
          type: string
          description: Human-readable name for the new bookmark, cannot be empty
          minLength: 1
        thumbnailUrl:
          type:
          - string
          - 'null'
          format: uri
          description: Thumbnail URL of the new bookmark, will be archived
        publishedAt:
          type:
          - string
          - 'null'
          format: date-time
          description: Timestamp at which the bookmark was published
        author:
          type:
          - string
          - 'null'
          description: Author for the new bookmark, cannot be empty
          minLength: 1
    BookmarkDateField:
      type: string
      enum:
      - publishedAt
      - createdAt
      - updatedAt
    BookmarkDetails:
      type: object
      description: Extended details of a bookmark
      required:
      - bookmark
      properties:
        bookmark:
          $ref: '#/components/schemas/Bookmark'
          description: Bookmark itself, always present
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: Linked tags, present if requested
    BookmarkFilter:
      oneOf:
      - type: object
        required:
        - text
        properties:
          text:
            type: object
            required:
            - field
            - op
            properties:
              field:
                $ref: '#/components/schemas/BookmarkTextField'
              op:
                $ref: '#/components/schemas/TextOp'
      - type: object
        required:
        - date
        properties:
          date:
            type: object
            required:
            - field
            - op
            properties:
              field:
                $ref: '#/components/schemas/BookmarkDateField'
              op:
                $ref: '#/components/schemas/DateOp'
      - type: object
        required:
        - and
        properties:
          and:
            type: array
            items:
              $ref: '#/components/schemas/BookmarkFilter'
      - type: object
        required:
        - or
        properties:
          or:
            type: array
            items:
              $ref: '#/components/schemas/BookmarkFilter'
      - type: object
        required:
        - not
        properties:
          not:
            $ref: '#/components/schemas/BookmarkFilter'
    BookmarkScrape:
      type: object
      description: Data to scrape a bookmark using
      required:
      - url
      properties:
        url:
          type: string
          format: uri
          description: URL of a webpage to scrape
    BookmarkScraped:
      type: object
      description: Scraped bookmark
      required:
      - link
      - title
      - thumbnailUrl
      - publishedAt
      - author
      properties:
        link:
          type: string
          format: uri
          description: URL of the webpage of the scraped bookmark
        title:
          type: string
          description: Title of the scraped bookmark
        thumbnailUrl:
          type:
          - string
          - 'null'
          format: uri
          description: Thumbnail URL of the scraped bookmark
        publishedAt:
          type:
          - string
          - 'null'
          format: date-time
          description: Timestamp at which the scraped bookmark was published
        author:
          type:
          - string
          - 'null'
          description: Author of the scraped bookmark
    BookmarkTextField:
      type: string
      enum:
      - link
      - title
      - author
      - tag
    BookmarkUpdate:
      type: object
      description: Updates to make to an existing bookmark
      properties:
        title:
          type: string
          description: Human-readable name for the bookmark to update, cannot be empty
          minLength: 1
        thumbnailUrl:
          type:
          - string
          - 'null'
          format: uri
          description: Thumbnail URL of the bookmark to update, will be archived
        publishedAt:
          type:
          - string
          - 'null'
          format: date-time
          description: Timestamp at which the bookmark was published
        author:
          type:
          - string
          - 'null'
          description: Author of the bookmark to update, cannot be empty
          minLength: 1
    BooleanOp:
      oneOf:
      - type: object
        required:
        - equals
        properties:
          equals:
            type: boolean
    CodePayload:
      type: object
      required:
      - code
      - state
      properties:
        code:
          type: string
        state:
          type: string
    Collection:
      type: object
      required:
      - id
      - title
      - filter
      - createdAt
      - updatedAt
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        filter:
          $ref: '#/components/schemas/BookmarkFilter'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CollectionCreate:
      type: object
      required:
      - title
      - filter
      properties:
        title:
          type: string
          minLength: 1
        filter:
          $ref: '#/components/schemas/BookmarkFilter'
    CollectionUpdate:
      type: object
      properties:
        title:
          type: string
          minLength: 1
        filter:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/BookmarkFilter'
    Config:
      type: object
      description: API config
      required:
      - server
      - storage
      properties:
        server:
          $ref: '#/components/schemas/ServerConfig'
          description: Server config
        oidc:
          $ref: '#/components/schemas/OidcConfig'
          description: OIDC config
        storage:
          $ref: '#/components/schemas/StorageConfig'
          description: Storage config
    DateOp:
      oneOf:
      - type: object
        required:
        - before
        properties:
          before:
            type: string
            format: date-time
      - type: object
        required:
        - after
        properties:
          after:
            type: string
            format: date-time
      - type: object
        required:
        - between
        properties:
          between:
            type: object
            required:
            - start
            - end
            properties:
              start:
                type: string
                format: date-time
              end:
                type: string
                format: date-time
      - type: object
        required:
        - inLast
        properties:
          inLast:
            type: integer
            format: int64
    Feed:
      type: object
      description: RSS feed
      required:
      - id
      - sourceUrl
      - link
      - title
      - description
      - refreshedAt
      - isCustom
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the feed
        sourceUrl:
          type: string
          format: uri
          description: URL to scrape for feed updates
        link:
          type: string
          format: uri
          description: URL of the webpage the feed links to
        title:
          type: string
          description: Title of the feed
        description:
          type:
          - string
          - 'null'
          description: Description of the feed
        refreshedAt:
          type:
          - string
          - 'null'
          format: date-time
          description: Timestamp at which the feed was refreshed
        isCustom:
          type: boolean
          description: Whether the feed was scraped from a custom plugin
    FeedDetect:
      type: object
      description: Data to detect RSS feeds using
      required:
      - url
      properties:
        url:
          type: string
          format: uri
          description: URL of a webpage to detect RSS feeds on
    FeedDetected:
      type: object
      description: Detected RSS feed
      required:
      - url
      - title
      properties:
        url:
          type: string
          format: uri
          description: URL of the detected RSS feed
        title:
          type: string
          description: Title of the detected RSS feed
    FeedEntry:
      type: object
      description: RSS feed entry
      required:
      - id
      - link
      - title
      - publishedAt
      - description
      - author
      - thumbnailUrl
      - feedId
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the feed entry
        link:
          type: string
          format: uri
          description: URL of the webpage the feed entry links to
        title:
          type: string
          description: Title of the feed entry
        publishedAt:
          type: string
          format: date-time
          description: Timestamp at which the feed entry was published
        description:
          type:
          - string
          - 'null'
          description: Description of the feed entry
        author:
          type:
          - string
          - 'null'
          description: Author of the feed entry
        thumbnailUrl:
          type:
          - string
          - 'null'
          format: uri
          description: Thumbnail URL of the feed entry
        feedId:
          type: string
          format: uuid
          description: Unique identifier of the associated RSS feed
    FeedScrape:
      type: object
      description: Data to scrape an RSS feed using
      required:
      - url
      properties:
        url:
          type: string
          format: uri
          description: URL of an RSS feed to scrape
    LinkBookmarkTags:
      type: object
      description: Action to link tags to a bookmark
      required:
      - tagIds
      properties:
        tagIds:
          type: array
          items:
            type: string
            format: uuid
          description: Unique identifiers of the tags to link to the bookmark
    LinkSubscriptionTags:
      type: object
      description: Action to link tags to a user subscription
      required:
      - tagIds
      properties:
        tagIds:
          type: array
          items:
            type: string
            format: uuid
          description: Unique identifiers of the tags to link to the subscription
    LoginPayload:
      type: object
      required:
      - email
      - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 1
    OidcConfig:
      type: object
      description: API OIDC config
      required:
      - signInText
      properties:
        signInText:
          type: string
          description: OIDC sign in button text
    Paginated_ApiKey:
      type: object
      description: Paginated list of results
      required:
      - items
      properties:
        items:
          type: array
          items:
            type: object
            description: Long-lived token linked to a user's account. Useful for third party client apps to access a user's data. The full value is returned only once, on creation.
            required:
            - id
            - title
            - preview
            - createdAt
            - updatedAt
            properties:
              id:
                type: string
                format: uuid
                description: Unique identifier of the API key
              title:
                type: string
                description: Human-readable name of the API key
              preview:
                type: string
                description: Partial view of the API key value for identification purposes
              createdAt:
                type: string
                format: date-time
                description: Timestamp at which the API key was created
              updatedAt:
                type: string
                format: date-time
                description: Timestamp at which the API key was last modified
          description: Current set of results
        cursor:
          type: string
          description: Pagination cursor, only present if more results are available
    Paginated_BookmarkDetails:
      type: object
      description: Paginated list of results
      required:
      - items
      properties:
        items:
          type: array
          items:
            type: object
            description: Extended details of a bookmark
            required:
            - bookmark
            properties:
              bookmark:
                $ref: '#/components/schemas/Bookmark'
                description: Bookmark itself, always present
              tags:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
                description: Linked tags, present if requested
          description: Current set of results
        cursor:
          type: string
          description: Pagination cursor, only present if more results are available
    Paginated_Collection:
      type: object
      description: Paginated list of results
      required:
      - items
      properties:
        items:
          type: array
          items:
            type: object
            required:
            - id
            - title
            - filter
            - createdAt
            - updatedAt
            properties:
              id:
                type: string
                format: uuid
              title:
                type: string
              filter:
                $ref: '#/components/schemas/BookmarkFilter'
              createdAt:
                type: string
                format: date-time
              updatedAt:
                type: string
                format: date-time
          description: Current set of results
        cursor:
          type: string
          description: Pagination cursor, only present if more results are available
    Paginated_FeedEntry:
      type: object
      description: Paginated list of results
      required:
      - items
      properties:
        items:
          type: array
          items:
            type: object
            description: RSS feed entry
            required:
            - id
            - link
            - title
            - publishedAt
            - description
            - author
            - thumbnailUrl
            - feedId
            properties:
              id:
                type: string
                format: uuid
                description: Unique identifier of the feed entry
              link:
                type: string
                format: uri
                description: URL of the webpage the feed entry links to
              title:
                type: string
                description: Title of the feed entry
              publishedAt:
                type: string
                format: date-time
                description: Timestamp at which the feed entry was published
              description:
                type:
                - string
                - 'null'
                description: Description of the feed entry
              author:
                type:
                - string
                - 'null'
                description: Author of the feed entry
              thumbnailUrl:
                type:
                - string
                - 'null'
                format: uri
                description: Thumbnail URL of the feed entry
              feedId:
                type: string
                format: uuid
                description: Unique identifier of the associated RSS feed
          description: Current set of results
        cursor:
          type: string
          description: Pagination cursor, only present if more results are available
    Paginated_SubscriptionDetails:
      type: object
      description: Paginated list of results
      required:
      - items
      properties:
        items:
          type: array
          items:
            type: object
            description: Extended details of a user subscription
            required:
            - subscription
            - feed
            properties:
              subscription:
                $ref: '#/components/schemas/Subscription'
                description: Subscription itself, always present
              feed:
                $ref: '#/components/schemas/Feed'
                description: Associated RSS feed, always present
              tags:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
                description: Linked tags, present if requested
              unreadCount:
                type: integer
                format: int64
                description: Count of unread subscription entries associated with the subscription, present if requested
          description: Current set of results
        cursor:
          type: string
          description: Pagination cursor, only present if more results are available
    Paginated_SubscriptionEntryDetails:
      type: object
      description: Paginated list of results
      required:
      - items
      properties:
        items:
          type: array
          items:
            type: object
            description: Extended details of a subscription entry
            required:
            - subscriptionEntry
            - feedEntry
            properties:
              subscriptionEntry:
                $ref: '#/components/schemas/SubscriptionEntry'
                description: Subscription entry itself, always present
              feedEntry:
                $ref: '#/components/schemas/FeedEntry'
                description: Associated feed entry, always present
          description: Current set of results
        cursor:
          type: string
          description: Pagination cursor, only present if more results are available
    Paginated_TagDetails:
      type: object
      description: Paginated list of results
      required:
      - items
      properties:
        items:
          type: array
          items:
            type: object
            description: Extended details of a tag
            required:
            - tag
            properties:
              tag:
                $ref: '#/components/schemas/Tag'
                description: Tag itself, always present
              subscriptionCount:
                type: integer
                format: int64
                description: Count of subscriptions the tag is linked to, present if requested
              bookmarkCount:
                type: integer
                format: int64
                description: Count of bookmarks the tag is linked to, present if requested
          description: Current set of results
        cursor:
          type: string
          description: Pagination cursor, only present if more results are available
    RegisterPayload:
      type: object
      required:
      - email
      - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 1
        displayName:
          type:
          - string
          - 'null'
          minLength: 1
        imageUrl:
          type:
          - string
          - 'null'
          format: uri
    ServerConfig:
      type: object
      description: API server config
      required:
      - baseUrl
      properties:
        baseUrl:
          type: string
          format: uri
          description: Server base URL
    StorageConfig:
      type: object
      description: API storage config
      required:
      - imageBaseUrl
      properties:
        imageBaseUrl:
          type: string
          format: uri
          description: Base URL for the image storage server
    Subscription:
      type: object
      description: User subscription to an RSS feed
      required:
      - id
      - title
      - description
      - feedId
      - createdAt
      - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the subscription
        title:
          type: string
          description: Human-readable name of the subscription
        description:
          type:
          - string
          - 'null'
          description: Description of the subscription
        feedId:
          type: string
          format: uuid
          description: Unique identifier of the associated RSS feed
        createdAt:
          type: string
          format: date-time
          description: Timestamp at which the subscription was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp at which the subscription was modified
    SubscriptionCreate:
      type: object
      description: Data to create a new user subscription
      required:
      - title
      - feedId
      properties:
        title:
          type: string
          description: Human-readable name for the new subscription, cannot be empty
          minLength: 1
        description:
          type:
          - string
          - 'null'
          description: Description for the new subscription, cannot be empty
          minLength: 1
        feedId:
          type: string
          format: uuid
          description: Unique identifier of the associated RSS feed
    SubscriptionDetails:
      type: object
      description: Extended details of a user subscription
      required:
      - subscription
      - feed
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'
          description: Subscription itself, always present
        feed:
          $ref: '#/components/schemas/Feed'
          description: Associated RSS feed, always present
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          description: Linked tags, present if requested
        unreadCount:
          type: integer
          format: int64
          description: Count of unread subscription entries associated with the subscription, present if requested
    SubscriptionEntry:
      type: object
      description: Association of a RSS feed entry to a user subscription. The pairing of subscription ID and feed entry ID is unique.
      required:
      - id
      - hasRead
      - subscriptionId
      - feedEntryId
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the subscription entry
        hasRead:
          type: boolean
          description: Whether the subscription entry has been marked as read
        readAt:
          type:
          - string
          - 'null'
          format: date-time
          description: Timestamp at which the subscription entry has been marked as read
        subscriptionId:
          type: string
          format: uuid
          description: Unique identifier of the associated subscription
        feedEntryId:
          type: string
          format: uuid
          description: Unique identifier of the associated feed entry
    SubscriptionEntryBooleanField:
      type: string
      enum:
      - hasRead
    SubscriptionEntryDateField:
      type: string
      enum:
      - publishedAt
    SubscriptionEntryDetails:
      type: object
      description: Extended details of a subscription entry
      required:
      - subscriptionEntry
      - feedEntry
      properties:
        subscriptionEntry:
          $ref: '#/components/schemas/SubscriptionEntry'
          description: Subscription entry itself, always present
        feedEntry:
          $ref: '#/components/schemas/FeedEntry'
          description: Associated feed entry, always present
    SubscriptionEntryFilter:
      oneOf:
      - type: object
        required:
        - text
        properties:
          text:
            type: object
            required:
            - field
            - op
            properties:
              field:
                $ref: '#/components/schemas/SubscriptionEntryTextField'
              op:
                $ref: '#/components/schemas/TextOp'
      - type: object
        required:
        - boolean
        properties:
          boolean:
            type: object
            required:
            - field
            - op
            properties:
              field:
                $ref: '#/components/schemas/SubscriptionEntryBooleanField'
              op:
                $ref: '#/components/schemas/BooleanOp'
      - type: object
        required:
        - date
        properties:
          date:
            type: object
            required:
            - field
            - op
            properties:
              field:
                $ref: '#/components/schemas/SubscriptionEntryDateField'
              op:
                $ref: '#/components/schemas/DateOp'
      - type: object
        required:
        - and
        properties:
          and:
            type: array
            items:
              $ref: '#/components/schemas/SubscriptionEntryFilter'
      - type: object
        required:
        - or
        properties:
          or:
            type: array
            items:
              $ref: '#/components/schemas/SubscriptionEntryFilter'
      - type: object
        required:
        - not
        properties:
          not:
            $ref: '#/components/schemas/SubscriptionEntryFilter'
    SubscriptionEntryTextField:
      type: string
      enum:
      - link
      - title
      - description
      - author
      - tag
    SubscriptionUpdate:
      type: object
      description: Updates to make to an existing subscription
      properties:
        title:
          type:
          - string
          - 'null'
          description: Human-readable name for the subscription to update, cannot be empty
          minLength: 1
        description:
          type:
          - string
          - 'null'
          description: Description for the subscription to update, cannot be empty
          minLength: 1
    Tag:
      type: object
      description: Tag that can be attached to subscriptions and bookmarks
      required:
      - id
      - title
      - createdAt
      - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the tag
        title:
          type: string
          description: Human-readable name of the tag, unique per user
        createdAt:
          type: string
          format: date-time
          description: Timestamp at which the tag was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp at which the tag was last modified
    TagCreate:
      type: object
      description: Data to create a new tag
      required:
      - title
      properties:
        title:
          type: string
          description: Human-readable name for the new tag, cannot be empty
          minLength: 1
    TagDetails:
      type: object
      description: Extended details of a tag
      required:
      - tag
      properties:
        tag:
          $ref: '#/components/schemas/Tag'
          description: Tag itself, always present
        subscriptionCount:
          type: integer
          format: int64
          description: Count of subscriptions the tag is linked to, present if requested
        bookmarkCount:
          type: integer
          format: int64
          description: Count of bookmarks the tag is linked to, present if requested
    TagUpdate:
      type: object
      description: Updates to make to an existing tag
      properties:
        title:
          type: string
          description: Human-readable name for the tag to update, cannot be empty
          minLength: 1
    TextOp:
      oneOf:
      - type: object
        required:
        - equals
        properties:
          equals:
            type: string
      - type: object
        required:
        - contains
        properties:
          contains:
            type: string
      - type: object
        required:
        - startsWith
        properties:
          startsWith:
            type: string
      - type: object
        required:
        - endsWith
        properties:
          endsWith:
            type: string
    TokenData:
      type: object
      required:
      - accessToken
      - tokenType
      - expiresIn
      properties:
        accessToken:
          type: string
        tokenType:
          $ref: '#/components/schemas/TokenType'
        expiresIn:
          type: integer
          format: int64
    TokenType:
      type: string
      enum:
      - bearer
    User:
      type: object
      description: User account. Supports email/password and OIDC.
      required:
      - id
      - email
      - displayName
      - imageUrl
      - createdAt
      - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the user
        email:
          type: string
          format: email
          description: Email address of the user
        displayName:
          type:
          - string
          - 'null'
        imageUrl:
          type:
          - string
          - 'null'
          format: uri
        createdAt:
          type: string
          format: date-time
          description: Timestamp at which the user was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp at which the user was last modified
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: X-Api-Key
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
- bearerAuth: []
