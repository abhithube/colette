/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */
import client from '../client.ts'
import type { RequestConfig, ResponseErrorConfig } from '../client.ts'
import {
  listApiKeysQueryResponseSchema,
  createApiKeyMutationResponseSchema,
  createApiKeyMutationRequestSchema,
  getApiKeyQueryResponseSchema,
  deleteApiKeyMutationResponseSchema,
  updateApiKeyMutationResponseSchema,
  updateApiKeyMutationRequestSchema,
  registerUserMutationResponseSchema,
  registerUserMutationRequestSchema,
  loginUserMutationResponseSchema,
  loginUserMutationRequestSchema,
  getActiveUserQueryResponseSchema,
  refreshTokenMutationResponseSchema,
  logoutUserMutationResponseSchema,
  exchangeCodeMutationResponseSchema,
  exchangeCodeMutationRequestSchema,
  listBookmarksQueryResponseSchema,
  createBookmarkMutationResponseSchema,
  createBookmarkMutationRequestSchema,
  getBookmarkQueryResponseSchema,
  deleteBookmarkMutationResponseSchema,
  updateBookmarkMutationResponseSchema,
  updateBookmarkMutationRequestSchema,
  linkBookmarkTagsMutationResponseSchema,
  linkBookmarkTagsMutationRequestSchema,
  scrapeBookmarkMutationResponseSchema,
  scrapeBookmarkMutationRequestSchema,
  importBookmarksMutationResponseSchema,
  importBookmarksMutationRequestSchema,
  exportBookmarksMutationResponseSchema,
  listCollectionsQueryResponseSchema,
  createCollectionMutationResponseSchema,
  createCollectionMutationRequestSchema,
  getCollectionQueryResponseSchema,
  deleteCollectionMutationResponseSchema,
  updateCollectionMutationResponseSchema,
  updateCollectionMutationRequestSchema,
  getConfigQueryResponseSchema,
  listFeedEntriesQueryResponseSchema,
  getFeedEntryQueryResponseSchema,
  detectFeedsMutationResponseSchema,
  detectFeedsMutationRequestSchema,
  scrapeFeedMutationResponseSchema,
  scrapeFeedMutationRequestSchema,
  listStreamsQueryResponseSchema,
  createStreamMutationResponseSchema,
  createStreamMutationRequestSchema,
  getStreamQueryResponseSchema,
  deleteStreamMutationResponseSchema,
  updateStreamMutationResponseSchema,
  updateStreamMutationRequestSchema,
  listSubscriptionsQueryResponseSchema,
  createSubscriptionMutationResponseSchema,
  createSubscriptionMutationRequestSchema,
  getSubscriptionQueryResponseSchema,
  deleteSubscriptionMutationResponseSchema,
  updateSubscriptionMutationResponseSchema,
  updateSubscriptionMutationRequestSchema,
  linkSubscriptionTagsMutationResponseSchema,
  linkSubscriptionTagsMutationRequestSchema,
  markSubscriptionEntryAsReadMutationResponseSchema,
  markSubscriptionEntryAsUnreadMutationResponseSchema,
  importSubscriptionsMutationResponseSchema,
  importSubscriptionsMutationRequestSchema,
  exportSubscriptionsMutationResponseSchema,
  listSubscriptionEntriesQueryResponseSchema,
  listTagsQueryResponseSchema,
  createTagMutationResponseSchema,
  createTagMutationRequestSchema,
  getTagQueryResponseSchema,
  deleteTagMutationResponseSchema,
  updateTagMutationResponseSchema,
  updateTagMutationRequestSchema,
} from './schemas.ts'
import type {
  ListApiKeysQueryResponse,
  ListApiKeys401,
  CreateApiKeyMutationRequest,
  CreateApiKeyMutationResponse,
  CreateApiKey401,
  CreateApiKey422,
  GetApiKeyQueryResponse,
  GetApiKeyPathParams,
  GetApiKey401,
  GetApiKey403,
  GetApiKey404,
  DeleteApiKeyMutationResponse,
  DeleteApiKeyPathParams,
  DeleteApiKey401,
  DeleteApiKey403,
  DeleteApiKey404,
  UpdateApiKeyMutationRequest,
  UpdateApiKeyMutationResponse,
  UpdateApiKeyPathParams,
  UpdateApiKey401,
  UpdateApiKey403,
  UpdateApiKey404,
  UpdateApiKey422,
  RegisterUserMutationRequest,
  RegisterUserMutationResponse,
  RegisterUser409,
  RegisterUser422,
  LoginUserMutationRequest,
  LoginUserMutationResponse,
  LoginUser401,
  LoginUser422,
  GetActiveUserQueryResponse,
  GetActiveUser401,
  RefreshTokenMutationResponse,
  RefreshToken401,
  RefreshToken422,
  LogoutUserMutationResponse,
  LogoutUser401,
  ExchangeCodeMutationRequest,
  ExchangeCodeMutationResponse,
  ExchangeCode401,
  ExchangeCode422,
  ListBookmarksQueryResponse,
  ListBookmarksQueryParams,
  ListBookmarks401,
  CreateBookmarkMutationRequest,
  CreateBookmarkMutationResponse,
  CreateBookmark401,
  CreateBookmark409,
  CreateBookmark422,
  GetBookmarkQueryResponse,
  GetBookmarkPathParams,
  GetBookmarkQueryParams,
  GetBookmark401,
  GetBookmark403,
  GetBookmark404,
  DeleteBookmarkMutationResponse,
  DeleteBookmarkPathParams,
  DeleteBookmark401,
  DeleteBookmark403,
  DeleteBookmark404,
  UpdateBookmarkMutationRequest,
  UpdateBookmarkMutationResponse,
  UpdateBookmarkPathParams,
  UpdateBookmark401,
  UpdateBookmark403,
  UpdateBookmark404,
  UpdateBookmark422,
  LinkBookmarkTagsMutationRequest,
  LinkBookmarkTagsMutationResponse,
  LinkBookmarkTagsPathParams,
  LinkBookmarkTags401,
  LinkBookmarkTags403,
  LinkBookmarkTags404,
  LinkBookmarkTags422,
  ScrapeBookmarkMutationRequest,
  ScrapeBookmarkMutationResponse,
  ScrapeBookmark401,
  ScrapeBookmark422,
  ScrapeBookmark502,
  ImportBookmarksMutationRequest,
  ImportBookmarksMutationResponse,
  ImportBookmarks401,
  ExportBookmarksMutationResponse,
  ExportBookmarks401,
  ListCollectionsQueryResponse,
  ListCollections401,
  CreateCollectionMutationRequest,
  CreateCollectionMutationResponse,
  CreateCollection401,
  CreateCollection409,
  CreateCollection422,
  GetCollectionQueryResponse,
  GetCollectionPathParams,
  GetCollection401,
  GetCollection403,
  GetCollection404,
  DeleteCollectionMutationResponse,
  DeleteCollectionPathParams,
  DeleteCollection401,
  DeleteCollection403,
  DeleteCollection404,
  UpdateCollectionMutationRequest,
  UpdateCollectionMutationResponse,
  UpdateCollectionPathParams,
  UpdateCollection401,
  UpdateCollection403,
  UpdateCollection404,
  UpdateCollection422,
  GetConfigQueryResponse,
  ListFeedEntriesQueryResponse,
  ListFeedEntriesQueryParams,
  ListFeedEntries401,
  GetFeedEntryQueryResponse,
  GetFeedEntryPathParams,
  GetFeedEntry401,
  GetFeedEntry403,
  GetFeedEntry404,
  DetectFeedsMutationRequest,
  DetectFeedsMutationResponse,
  DetectFeeds401,
  DetectFeeds422,
  DetectFeeds502,
  ScrapeFeedMutationRequest,
  ScrapeFeedMutationResponse,
  ScrapeFeed401,
  ScrapeFeed422,
  ScrapeFeed502,
  ListStreamsQueryResponse,
  ListStreams401,
  CreateStreamMutationRequest,
  CreateStreamMutationResponse,
  CreateStream401,
  CreateStream409,
  CreateStream422,
  GetStreamQueryResponse,
  GetStreamPathParams,
  GetStream401,
  GetStream403,
  GetStream404,
  DeleteStreamMutationResponse,
  DeleteStreamPathParams,
  DeleteStream401,
  DeleteStream403,
  DeleteStream404,
  UpdateStreamMutationRequest,
  UpdateStreamMutationResponse,
  UpdateStreamPathParams,
  UpdateStream401,
  UpdateStream403,
  UpdateStream404,
  UpdateStream422,
  ListSubscriptionsQueryResponse,
  ListSubscriptionsQueryParams,
  ListSubscriptions401,
  CreateSubscriptionMutationRequest,
  CreateSubscriptionMutationResponse,
  CreateSubscription401,
  CreateSubscription409,
  CreateSubscription422,
  GetSubscriptionQueryResponse,
  GetSubscriptionPathParams,
  GetSubscriptionQueryParams,
  GetSubscription401,
  GetSubscription403,
  GetSubscription404,
  DeleteSubscriptionMutationResponse,
  DeleteSubscriptionPathParams,
  DeleteSubscription401,
  DeleteSubscription403,
  DeleteSubscription404,
  UpdateSubscriptionMutationRequest,
  UpdateSubscriptionMutationResponse,
  UpdateSubscriptionPathParams,
  UpdateSubscription401,
  UpdateSubscription403,
  UpdateSubscription404,
  UpdateSubscription422,
  LinkSubscriptionTagsMutationRequest,
  LinkSubscriptionTagsMutationResponse,
  LinkSubscriptionTagsPathParams,
  LinkSubscriptionTags401,
  LinkSubscriptionTags403,
  LinkSubscriptionTags404,
  LinkSubscriptionTags422,
  MarkSubscriptionEntryAsReadMutationResponse,
  MarkSubscriptionEntryAsReadPathParams,
  MarkSubscriptionEntryAsRead401,
  MarkSubscriptionEntryAsRead403,
  MarkSubscriptionEntryAsRead404,
  MarkSubscriptionEntryAsRead422,
  MarkSubscriptionEntryAsUnreadMutationResponse,
  MarkSubscriptionEntryAsUnreadPathParams,
  MarkSubscriptionEntryAsUnread401,
  MarkSubscriptionEntryAsUnread403,
  MarkSubscriptionEntryAsUnread404,
  MarkSubscriptionEntryAsUnread422,
  ImportSubscriptionsMutationRequest,
  ImportSubscriptionsMutationResponse,
  ImportSubscriptions401,
  ExportSubscriptionsMutationResponse,
  ExportSubscriptions401,
  ListSubscriptionEntriesQueryResponse,
  ListSubscriptionEntriesQueryParams,
  ListSubscriptionEntries401,
  ListTagsQueryResponse,
  ListTagsQueryParams,
  ListTags401,
  CreateTagMutationRequest,
  CreateTagMutationResponse,
  CreateTag401,
  CreateTag409,
  CreateTag422,
  GetTagQueryResponse,
  GetTagPathParams,
  GetTagQueryParams,
  GetTag401,
  GetTag403,
  GetTag404,
  DeleteTagMutationResponse,
  DeleteTagPathParams,
  DeleteTag401,
  DeleteTag403,
  DeleteTag404,
  UpdateTagMutationRequest,
  UpdateTagMutationResponse,
  UpdateTagPathParams,
  UpdateTag401,
  UpdateTag403,
  UpdateTag404,
  UpdateTag422,
} from './types.ts'

function getListApiKeysUrl() {
  return `/apiKeys` as const
}

/**
 * @description List user API keys
 * {@link /apiKeys}
 */
export async function listApiKeys(
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    ListApiKeysQueryResponse,
    ResponseErrorConfig<ListApiKeys401>,
    unknown
  >({
    method: 'GET',
    url: getListApiKeysUrl().toString(),
    ...requestConfig,
  })
  return listApiKeysQueryResponseSchema.parse(res.data)
}

function getCreateApiKeyUrl() {
  return `/apiKeys` as const
}

/**
 * @description Create an API key
 * {@link /apiKeys}
 */
export async function createApiKey(
  data: CreateApiKeyMutationRequest,
  config: Partial<RequestConfig<CreateApiKeyMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CreateApiKeyMutationResponse,
    ResponseErrorConfig<CreateApiKey401 | CreateApiKey422>,
    CreateApiKeyMutationRequest
  >({
    method: 'POST',
    url: getCreateApiKeyUrl().toString(),
    data: createApiKeyMutationRequestSchema.parse(data),
    ...requestConfig,
  })
  return createApiKeyMutationResponseSchema.parse(res.data)
}

function getGetApiKeyUrl(id: GetApiKeyPathParams['id']) {
  return `/apiKeys/${id}` as const
}

/**
 * @description Get an API key by ID
 * {@link /apiKeys/:id}
 */
export async function getApiKey(
  id: GetApiKeyPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetApiKeyQueryResponse,
    ResponseErrorConfig<GetApiKey401 | GetApiKey403 | GetApiKey404>,
    unknown
  >({
    method: 'GET',
    url: getGetApiKeyUrl(id).toString(),
    ...requestConfig,
  })
  return getApiKeyQueryResponseSchema.parse(res.data)
}

function getDeleteApiKeyUrl(id: DeleteApiKeyPathParams['id']) {
  return `/apiKeys/${id}` as const
}

/**
 * @description Delete an API key by ID
 * {@link /apiKeys/:id}
 */
export async function deleteApiKey(
  id: DeleteApiKeyPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeleteApiKeyMutationResponse,
    ResponseErrorConfig<DeleteApiKey401 | DeleteApiKey403 | DeleteApiKey404>,
    unknown
  >({
    method: 'DELETE',
    url: getDeleteApiKeyUrl(id).toString(),
    ...requestConfig,
  })
  return deleteApiKeyMutationResponseSchema.parse(res.data)
}

function getUpdateApiKeyUrl(id: UpdateApiKeyPathParams['id']) {
  return `/apiKeys/${id}` as const
}

/**
 * @description Update an API key by ID
 * {@link /apiKeys/:id}
 */
export async function updateApiKey(
  id: UpdateApiKeyPathParams['id'],
  data?: UpdateApiKeyMutationRequest,
  config: Partial<RequestConfig<UpdateApiKeyMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UpdateApiKeyMutationResponse,
    ResponseErrorConfig<
      UpdateApiKey401 | UpdateApiKey403 | UpdateApiKey404 | UpdateApiKey422
    >,
    UpdateApiKeyMutationRequest
  >({
    method: 'PATCH',
    url: getUpdateApiKeyUrl(id).toString(),
    data: updateApiKeyMutationRequestSchema.parse(data),
    ...requestConfig,
  })
  return updateApiKeyMutationResponseSchema.parse(res.data)
}

function getRegisterUserUrl() {
  return `/auth/register` as const
}

/**
 * @description Register a new user account
 * {@link /auth/register}
 */
export async function registerUser(
  data: RegisterUserMutationRequest,
  config: Partial<RequestConfig<RegisterUserMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    RegisterUserMutationResponse,
    ResponseErrorConfig<RegisterUser409 | RegisterUser422>,
    RegisterUserMutationRequest
  >({
    method: 'POST',
    url: getRegisterUserUrl().toString(),
    data: registerUserMutationRequestSchema.parse(data),
    ...requestConfig,
  })
  return registerUserMutationResponseSchema.parse(res.data)
}

function getLoginUserUrl() {
  return `/auth/login` as const
}

/**
 * @description Login to a user account
 * {@link /auth/login}
 */
export async function loginUser(
  data: LoginUserMutationRequest,
  config: Partial<RequestConfig<LoginUserMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    LoginUserMutationResponse,
    ResponseErrorConfig<LoginUser401 | LoginUser422>,
    LoginUserMutationRequest
  >({
    method: 'POST',
    url: getLoginUserUrl().toString(),
    data: loginUserMutationRequestSchema.parse(data),
    ...requestConfig,
  })
  return loginUserMutationResponseSchema.parse(res.data)
}

function getGetActiveUserUrl() {
  return `/auth/@me` as const
}

/**
 * @description Get the active user
 * {@link /auth/@me}
 */
export async function getActiveUser(
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetActiveUserQueryResponse,
    ResponseErrorConfig<GetActiveUser401>,
    unknown
  >({
    method: 'GET',
    url: getGetActiveUserUrl().toString(),
    ...requestConfig,
  })
  return getActiveUserQueryResponseSchema.parse(res.data)
}

function getRefreshTokenUrl() {
  return `/auth/token` as const
}

/**
 * @description Generate a new access token, and rotate the refresh token
 * {@link /auth/token}
 */
export async function refreshToken(
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    RefreshTokenMutationResponse,
    ResponseErrorConfig<RefreshToken401 | RefreshToken422>,
    unknown
  >({
    method: 'POST',
    url: getRefreshTokenUrl().toString(),
    ...requestConfig,
  })
  return refreshTokenMutationResponseSchema.parse(res.data)
}

function getLogoutUserUrl() {
  return `/auth/logout` as const
}

/**
 * @description Logout the active user
 * {@link /auth/logout}
 */
export async function logoutUser(
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    LogoutUserMutationResponse,
    ResponseErrorConfig<LogoutUser401>,
    unknown
  >({
    method: 'POST',
    url: getLogoutUserUrl().toString(),
    ...requestConfig,
  })
  return logoutUserMutationResponseSchema.parse(res.data)
}

function getExchangeCodeUrl() {
  return `/auth/code` as const
}

/**
 * @description Log in, and optionally register, a user from an OAuth authorization code
 * {@link /auth/code}
 */
export async function exchangeCode(
  data: ExchangeCodeMutationRequest,
  config: Partial<RequestConfig<ExchangeCodeMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    ExchangeCodeMutationResponse,
    ResponseErrorConfig<ExchangeCode401 | ExchangeCode422>,
    ExchangeCodeMutationRequest
  >({
    method: 'POST',
    url: getExchangeCodeUrl().toString(),
    data: exchangeCodeMutationRequestSchema.parse(data),
    ...requestConfig,
  })
  return exchangeCodeMutationResponseSchema.parse(res.data)
}

function getListBookmarksUrl() {
  return `/bookmarks` as const
}

/**
 * @description List user bookmarks
 * {@link /bookmarks}
 */
export async function listBookmarks(
  params?: ListBookmarksQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    ListBookmarksQueryResponse,
    ResponseErrorConfig<ListBookmarks401>,
    unknown
  >({
    method: 'GET',
    url: getListBookmarksUrl().toString(),
    params,
    ...requestConfig,
  })
  return listBookmarksQueryResponseSchema.parse(res.data)
}

function getCreateBookmarkUrl() {
  return `/bookmarks` as const
}

/**
 * @description Add a bookmark
 * {@link /bookmarks}
 */
export async function createBookmark(
  data: CreateBookmarkMutationRequest,
  config: Partial<RequestConfig<CreateBookmarkMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CreateBookmarkMutationResponse,
    ResponseErrorConfig<
      CreateBookmark401 | CreateBookmark409 | CreateBookmark422
    >,
    CreateBookmarkMutationRequest
  >({
    method: 'POST',
    url: getCreateBookmarkUrl().toString(),
    data: createBookmarkMutationRequestSchema.parse(data),
    ...requestConfig,
  })
  return createBookmarkMutationResponseSchema.parse(res.data)
}

function getGetBookmarkUrl(id: GetBookmarkPathParams['id']) {
  return `/bookmarks/${id}` as const
}

/**
 * @description Get a bookmark by ID
 * {@link /bookmarks/:id}
 */
export async function getBookmark(
  id: GetBookmarkPathParams['id'],
  params?: GetBookmarkQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetBookmarkQueryResponse,
    ResponseErrorConfig<GetBookmark401 | GetBookmark403 | GetBookmark404>,
    unknown
  >({
    method: 'GET',
    url: getGetBookmarkUrl(id).toString(),
    params,
    ...requestConfig,
  })
  return getBookmarkQueryResponseSchema.parse(res.data)
}

function getDeleteBookmarkUrl(id: DeleteBookmarkPathParams['id']) {
  return `/bookmarks/${id}` as const
}

/**
 * @description Delete a bookmark by ID
 * {@link /bookmarks/:id}
 */
export async function deleteBookmark(
  id: DeleteBookmarkPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeleteBookmarkMutationResponse,
    ResponseErrorConfig<
      DeleteBookmark401 | DeleteBookmark403 | DeleteBookmark404
    >,
    unknown
  >({
    method: 'DELETE',
    url: getDeleteBookmarkUrl(id).toString(),
    ...requestConfig,
  })
  return deleteBookmarkMutationResponseSchema.parse(res.data)
}

function getUpdateBookmarkUrl(id: UpdateBookmarkPathParams['id']) {
  return `/bookmarks/${id}` as const
}

/**
 * @description Update a bookmark by ID
 * {@link /bookmarks/:id}
 */
export async function updateBookmark(
  id: UpdateBookmarkPathParams['id'],
  data?: UpdateBookmarkMutationRequest,
  config: Partial<RequestConfig<UpdateBookmarkMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UpdateBookmarkMutationResponse,
    ResponseErrorConfig<
      | UpdateBookmark401
      | UpdateBookmark403
      | UpdateBookmark404
      | UpdateBookmark422
    >,
    UpdateBookmarkMutationRequest
  >({
    method: 'PATCH',
    url: getUpdateBookmarkUrl(id).toString(),
    data: updateBookmarkMutationRequestSchema.parse(data),
    ...requestConfig,
  })
  return updateBookmarkMutationResponseSchema.parse(res.data)
}

function getLinkBookmarkTagsUrl(id: LinkBookmarkTagsPathParams['id']) {
  return `/bookmarks/${id}/linkTags` as const
}

/**
 * @description Link a list of tags to a bookmark
 * {@link /bookmarks/:id/linkTags}
 */
export async function linkBookmarkTags(
  id: LinkBookmarkTagsPathParams['id'],
  data: LinkBookmarkTagsMutationRequest,
  config: Partial<RequestConfig<LinkBookmarkTagsMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    LinkBookmarkTagsMutationResponse,
    ResponseErrorConfig<
      | LinkBookmarkTags401
      | LinkBookmarkTags403
      | LinkBookmarkTags404
      | LinkBookmarkTags422
    >,
    LinkBookmarkTagsMutationRequest
  >({
    method: 'POST',
    url: getLinkBookmarkTagsUrl(id).toString(),
    data: linkBookmarkTagsMutationRequestSchema.parse(data),
    ...requestConfig,
  })
  return linkBookmarkTagsMutationResponseSchema.parse(res.data)
}

function getScrapeBookmarkUrl() {
  return `/bookmarks/scrape` as const
}

/**
 * @description Scrape bookmark from a webpage
 * {@link /bookmarks/scrape}
 */
export async function scrapeBookmark(
  data: ScrapeBookmarkMutationRequest,
  config: Partial<RequestConfig<ScrapeBookmarkMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    ScrapeBookmarkMutationResponse,
    ResponseErrorConfig<
      ScrapeBookmark401 | ScrapeBookmark422 | ScrapeBookmark502
    >,
    ScrapeBookmarkMutationRequest
  >({
    method: 'POST',
    url: getScrapeBookmarkUrl().toString(),
    data: scrapeBookmarkMutationRequestSchema.parse(data),
    ...requestConfig,
  })
  return scrapeBookmarkMutationResponseSchema.parse(res.data)
}

function getImportBookmarksUrl() {
  return `/bookmarks/import` as const
}

/**
 * @description Import bookmarks into user account
 * {@link /bookmarks/import}
 */
export async function importBookmarks(
  data?: ImportBookmarksMutationRequest,
  config: Partial<RequestConfig<ImportBookmarksMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    ImportBookmarksMutationResponse,
    ResponseErrorConfig<ImportBookmarks401>,
    ImportBookmarksMutationRequest
  >({
    method: 'POST',
    url: getImportBookmarksUrl().toString(),
    data: importBookmarksMutationRequestSchema.parse(data),
    ...requestConfig,
    headers: {
      'Content-Type': 'application/octet-stream',
      ...requestConfig.headers,
    },
  })
  return importBookmarksMutationResponseSchema.parse(res.data)
}

function getExportBookmarksUrl() {
  return `/bookmarks/export` as const
}

/**
 * @description Export user bookmarks
 * {@link /bookmarks/export}
 */
export async function exportBookmarks(
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    ExportBookmarksMutationResponse,
    ResponseErrorConfig<ExportBookmarks401>,
    unknown
  >({
    method: 'POST',
    url: getExportBookmarksUrl().toString(),
    ...requestConfig,
  })
  return exportBookmarksMutationResponseSchema.parse(res.data)
}

function getListCollectionsUrl() {
  return `/collections` as const
}

/**
 * @description List user collections
 * {@link /collections}
 */
export async function listCollections(
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    ListCollectionsQueryResponse,
    ResponseErrorConfig<ListCollections401>,
    unknown
  >({
    method: 'GET',
    url: getListCollectionsUrl().toString(),
    ...requestConfig,
  })
  return listCollectionsQueryResponseSchema.parse(res.data)
}

function getCreateCollectionUrl() {
  return `/collections` as const
}

/**
 * @description Create a collection
 * {@link /collections}
 */
export async function createCollection(
  data: CreateCollectionMutationRequest,
  config: Partial<RequestConfig<CreateCollectionMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CreateCollectionMutationResponse,
    ResponseErrorConfig<
      CreateCollection401 | CreateCollection409 | CreateCollection422
    >,
    CreateCollectionMutationRequest
  >({
    method: 'POST',
    url: getCreateCollectionUrl().toString(),
    data: createCollectionMutationRequestSchema.parse(data),
    ...requestConfig,
  })
  return createCollectionMutationResponseSchema.parse(res.data)
}

function getGetCollectionUrl(id: GetCollectionPathParams['id']) {
  return `/collections/${id}` as const
}

/**
 * @description Get a collection by ID
 * {@link /collections/:id}
 */
export async function getCollection(
  id: GetCollectionPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetCollectionQueryResponse,
    ResponseErrorConfig<GetCollection401 | GetCollection403 | GetCollection404>,
    unknown
  >({
    method: 'GET',
    url: getGetCollectionUrl(id).toString(),
    ...requestConfig,
  })
  return getCollectionQueryResponseSchema.parse(res.data)
}

function getDeleteCollectionUrl(id: DeleteCollectionPathParams['id']) {
  return `/collections/${id}` as const
}

/**
 * @description Delete a collection by ID
 * {@link /collections/:id}
 */
export async function deleteCollection(
  id: DeleteCollectionPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeleteCollectionMutationResponse,
    ResponseErrorConfig<
      DeleteCollection401 | DeleteCollection403 | DeleteCollection404
    >,
    unknown
  >({
    method: 'DELETE',
    url: getDeleteCollectionUrl(id).toString(),
    ...requestConfig,
  })
  return deleteCollectionMutationResponseSchema.parse(res.data)
}

function getUpdateCollectionUrl(id: UpdateCollectionPathParams['id']) {
  return `/collections/${id}` as const
}

/**
 * @description Update a collection by ID
 * {@link /collections/:id}
 */
export async function updateCollection(
  id: UpdateCollectionPathParams['id'],
  data?: UpdateCollectionMutationRequest,
  config: Partial<RequestConfig<UpdateCollectionMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UpdateCollectionMutationResponse,
    ResponseErrorConfig<
      | UpdateCollection401
      | UpdateCollection403
      | UpdateCollection404
      | UpdateCollection422
    >,
    UpdateCollectionMutationRequest
  >({
    method: 'PATCH',
    url: getUpdateCollectionUrl(id).toString(),
    data: updateCollectionMutationRequestSchema.parse(data),
    ...requestConfig,
  })
  return updateCollectionMutationResponseSchema.parse(res.data)
}

function getGetConfigUrl() {
  return `/config` as const
}

/**
 * @description Get the API config
 * {@link /config}
 */
export async function getConfig(
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetConfigQueryResponse,
    ResponseErrorConfig<Error>,
    unknown
  >({ method: 'GET', url: getGetConfigUrl().toString(), ...requestConfig })
  return getConfigQueryResponseSchema.parse(res.data)
}

function getListFeedEntriesUrl() {
  return `/feedEntries` as const
}

/**
 * @description List feed entries
 * {@link /feedEntries}
 */
export async function listFeedEntries(
  params?: ListFeedEntriesQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    ListFeedEntriesQueryResponse,
    ResponseErrorConfig<ListFeedEntries401>,
    unknown
  >({
    method: 'GET',
    url: getListFeedEntriesUrl().toString(),
    params,
    ...requestConfig,
  })
  return listFeedEntriesQueryResponseSchema.parse(res.data)
}

function getGetFeedEntryUrl(id: GetFeedEntryPathParams['id']) {
  return `/feedEntries/${id}` as const
}

/**
 * @description Get a feed entry by ID
 * {@link /feedEntries/:id}
 */
export async function getFeedEntry(
  id: GetFeedEntryPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetFeedEntryQueryResponse,
    ResponseErrorConfig<GetFeedEntry401 | GetFeedEntry403 | GetFeedEntry404>,
    unknown
  >({
    method: 'GET',
    url: getGetFeedEntryUrl(id).toString(),
    ...requestConfig,
  })
  return getFeedEntryQueryResponseSchema.parse(res.data)
}

function getDetectFeedsUrl() {
  return `/feeds/detect` as const
}

/**
 * @description Detects web feeds on a page
 * {@link /feeds/detect}
 */
export async function detectFeeds(
  data: DetectFeedsMutationRequest,
  config: Partial<RequestConfig<DetectFeedsMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DetectFeedsMutationResponse,
    ResponseErrorConfig<DetectFeeds401 | DetectFeeds422 | DetectFeeds502>,
    DetectFeedsMutationRequest
  >({
    method: 'POST',
    url: getDetectFeedsUrl().toString(),
    data: detectFeedsMutationRequestSchema.parse(data),
    ...requestConfig,
  })
  return detectFeedsMutationResponseSchema.parse(res.data)
}

function getScrapeFeedUrl() {
  return `/feeds/scrape` as const
}

/**
 * @description Scrape web feed
 * {@link /feeds/scrape}
 */
export async function scrapeFeed(
  data: ScrapeFeedMutationRequest,
  config: Partial<RequestConfig<ScrapeFeedMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    ScrapeFeedMutationResponse,
    ResponseErrorConfig<ScrapeFeed401 | ScrapeFeed422 | ScrapeFeed502>,
    ScrapeFeedMutationRequest
  >({
    method: 'POST',
    url: getScrapeFeedUrl().toString(),
    data: scrapeFeedMutationRequestSchema.parse(data),
    ...requestConfig,
  })
  return scrapeFeedMutationResponseSchema.parse(res.data)
}

function getListStreamsUrl() {
  return `/streams` as const
}

/**
 * @description List user streams
 * {@link /streams}
 */
export async function listStreams(
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    ListStreamsQueryResponse,
    ResponseErrorConfig<ListStreams401>,
    unknown
  >({
    method: 'GET',
    url: getListStreamsUrl().toString(),
    ...requestConfig,
  })
  return listStreamsQueryResponseSchema.parse(res.data)
}

function getCreateStreamUrl() {
  return `/streams` as const
}

/**
 * @description Create a stream
 * {@link /streams}
 */
export async function createStream(
  data: CreateStreamMutationRequest,
  config: Partial<RequestConfig<CreateStreamMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CreateStreamMutationResponse,
    ResponseErrorConfig<CreateStream401 | CreateStream409 | CreateStream422>,
    CreateStreamMutationRequest
  >({
    method: 'POST',
    url: getCreateStreamUrl().toString(),
    data: createStreamMutationRequestSchema.parse(data),
    ...requestConfig,
  })
  return createStreamMutationResponseSchema.parse(res.data)
}

function getGetStreamUrl(id: GetStreamPathParams['id']) {
  return `/streams/${id}` as const
}

/**
 * @description Get a stream by ID
 * {@link /streams/:id}
 */
export async function getStream(
  id: GetStreamPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetStreamQueryResponse,
    ResponseErrorConfig<GetStream401 | GetStream403 | GetStream404>,
    unknown
  >({
    method: 'GET',
    url: getGetStreamUrl(id).toString(),
    ...requestConfig,
  })
  return getStreamQueryResponseSchema.parse(res.data)
}

function getDeleteStreamUrl(id: DeleteStreamPathParams['id']) {
  return `/streams/${id}` as const
}

/**
 * @description Delete a stream by ID
 * {@link /streams/:id}
 */
export async function deleteStream(
  id: DeleteStreamPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeleteStreamMutationResponse,
    ResponseErrorConfig<DeleteStream401 | DeleteStream403 | DeleteStream404>,
    unknown
  >({
    method: 'DELETE',
    url: getDeleteStreamUrl(id).toString(),
    ...requestConfig,
  })
  return deleteStreamMutationResponseSchema.parse(res.data)
}

function getUpdateStreamUrl(id: UpdateStreamPathParams['id']) {
  return `/streams/${id}` as const
}

/**
 * @description Update a stream by ID
 * {@link /streams/:id}
 */
export async function updateStream(
  id: UpdateStreamPathParams['id'],
  data?: UpdateStreamMutationRequest,
  config: Partial<RequestConfig<UpdateStreamMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UpdateStreamMutationResponse,
    ResponseErrorConfig<
      UpdateStream401 | UpdateStream403 | UpdateStream404 | UpdateStream422
    >,
    UpdateStreamMutationRequest
  >({
    method: 'PATCH',
    url: getUpdateStreamUrl(id).toString(),
    data: updateStreamMutationRequestSchema.parse(data),
    ...requestConfig,
  })
  return updateStreamMutationResponseSchema.parse(res.data)
}

function getListSubscriptionsUrl() {
  return `/subscriptions` as const
}

/**
 * @description List user subscriptions
 * {@link /subscriptions}
 */
export async function listSubscriptions(
  params?: ListSubscriptionsQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    ListSubscriptionsQueryResponse,
    ResponseErrorConfig<ListSubscriptions401>,
    unknown
  >({
    method: 'GET',
    url: getListSubscriptionsUrl().toString(),
    params,
    ...requestConfig,
  })
  return listSubscriptionsQueryResponseSchema.parse(res.data)
}

function getCreateSubscriptionUrl() {
  return `/subscriptions` as const
}

/**
 * @description Subscribe to a web feed
 * {@link /subscriptions}
 */
export async function createSubscription(
  data: CreateSubscriptionMutationRequest,
  config: Partial<RequestConfig<CreateSubscriptionMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CreateSubscriptionMutationResponse,
    ResponseErrorConfig<
      CreateSubscription401 | CreateSubscription409 | CreateSubscription422
    >,
    CreateSubscriptionMutationRequest
  >({
    method: 'POST',
    url: getCreateSubscriptionUrl().toString(),
    data: createSubscriptionMutationRequestSchema.parse(data),
    ...requestConfig,
  })
  return createSubscriptionMutationResponseSchema.parse(res.data)
}

function getGetSubscriptionUrl(id: GetSubscriptionPathParams['id']) {
  return `/subscriptions/${id}` as const
}

/**
 * @description Get a subscription by ID
 * {@link /subscriptions/:id}
 */
export async function getSubscription(
  id: GetSubscriptionPathParams['id'],
  params?: GetSubscriptionQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetSubscriptionQueryResponse,
    ResponseErrorConfig<
      GetSubscription401 | GetSubscription403 | GetSubscription404
    >,
    unknown
  >({
    method: 'GET',
    url: getGetSubscriptionUrl(id).toString(),
    params,
    ...requestConfig,
  })
  return getSubscriptionQueryResponseSchema.parse(res.data)
}

function getDeleteSubscriptionUrl(id: DeleteSubscriptionPathParams['id']) {
  return `/subscriptions/${id}` as const
}

/**
 * @description Delete a subscription by ID
 * {@link /subscriptions/:id}
 */
export async function deleteSubscription(
  id: DeleteSubscriptionPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeleteSubscriptionMutationResponse,
    ResponseErrorConfig<
      DeleteSubscription401 | DeleteSubscription403 | DeleteSubscription404
    >,
    unknown
  >({
    method: 'DELETE',
    url: getDeleteSubscriptionUrl(id).toString(),
    ...requestConfig,
  })
  return deleteSubscriptionMutationResponseSchema.parse(res.data)
}

function getUpdateSubscriptionUrl(id: UpdateSubscriptionPathParams['id']) {
  return `/subscriptions/${id}` as const
}

/**
 * @description Update a subscription by ID
 * {@link /subscriptions/:id}
 */
export async function updateSubscription(
  id: UpdateSubscriptionPathParams['id'],
  data?: UpdateSubscriptionMutationRequest,
  config: Partial<RequestConfig<UpdateSubscriptionMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UpdateSubscriptionMutationResponse,
    ResponseErrorConfig<
      | UpdateSubscription401
      | UpdateSubscription403
      | UpdateSubscription404
      | UpdateSubscription422
    >,
    UpdateSubscriptionMutationRequest
  >({
    method: 'PATCH',
    url: getUpdateSubscriptionUrl(id).toString(),
    data: updateSubscriptionMutationRequestSchema.parse(data),
    ...requestConfig,
  })
  return updateSubscriptionMutationResponseSchema.parse(res.data)
}

function getLinkSubscriptionTagsUrl(id: LinkSubscriptionTagsPathParams['id']) {
  return `/subscriptions/${id}/linkTags` as const
}

/**
 * @description Link a list of tags to a subscription
 * {@link /subscriptions/:id/linkTags}
 */
export async function linkSubscriptionTags(
  id: LinkSubscriptionTagsPathParams['id'],
  data: LinkSubscriptionTagsMutationRequest,
  config: Partial<RequestConfig<LinkSubscriptionTagsMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    LinkSubscriptionTagsMutationResponse,
    ResponseErrorConfig<
      | LinkSubscriptionTags401
      | LinkSubscriptionTags403
      | LinkSubscriptionTags404
      | LinkSubscriptionTags422
    >,
    LinkSubscriptionTagsMutationRequest
  >({
    method: 'POST',
    url: getLinkSubscriptionTagsUrl(id).toString(),
    data: linkSubscriptionTagsMutationRequestSchema.parse(data),
    ...requestConfig,
  })
  return linkSubscriptionTagsMutationResponseSchema.parse(res.data)
}

function getMarkSubscriptionEntryAsReadUrl(
  sid: MarkSubscriptionEntryAsReadPathParams['sid'],
  eid: MarkSubscriptionEntryAsReadPathParams['eid'],
) {
  return `/subscriptions/${sid}/entries/${eid}/markAsRead` as const
}

/**
 * @description Mark a subscription entry as read
 * {@link /subscriptions/:sid/entries/:eid/markAsRead}
 */
export async function markSubscriptionEntryAsRead(
  sid: MarkSubscriptionEntryAsReadPathParams['sid'],
  eid: MarkSubscriptionEntryAsReadPathParams['eid'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    MarkSubscriptionEntryAsReadMutationResponse,
    ResponseErrorConfig<
      | MarkSubscriptionEntryAsRead401
      | MarkSubscriptionEntryAsRead403
      | MarkSubscriptionEntryAsRead404
      | MarkSubscriptionEntryAsRead422
    >,
    unknown
  >({
    method: 'POST',
    url: getMarkSubscriptionEntryAsReadUrl(sid, eid).toString(),
    ...requestConfig,
  })
  return markSubscriptionEntryAsReadMutationResponseSchema.parse(res.data)
}

function getMarkSubscriptionEntryAsUnreadUrl(
  sid: MarkSubscriptionEntryAsUnreadPathParams['sid'],
  eid: MarkSubscriptionEntryAsUnreadPathParams['eid'],
) {
  return `/subscriptions/${sid}/entries/${eid}/markAsUnread` as const
}

/**
 * @description Mark a subscription entry as unread
 * {@link /subscriptions/:sid/entries/:eid/markAsUnread}
 */
export async function markSubscriptionEntryAsUnread(
  sid: MarkSubscriptionEntryAsUnreadPathParams['sid'],
  eid: MarkSubscriptionEntryAsUnreadPathParams['eid'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    MarkSubscriptionEntryAsUnreadMutationResponse,
    ResponseErrorConfig<
      | MarkSubscriptionEntryAsUnread401
      | MarkSubscriptionEntryAsUnread403
      | MarkSubscriptionEntryAsUnread404
      | MarkSubscriptionEntryAsUnread422
    >,
    unknown
  >({
    method: 'POST',
    url: getMarkSubscriptionEntryAsUnreadUrl(sid, eid).toString(),
    ...requestConfig,
  })
  return markSubscriptionEntryAsUnreadMutationResponseSchema.parse(res.data)
}

function getImportSubscriptionsUrl() {
  return `/subscriptions/import` as const
}

/**
 * @description Import subscriptions into user account
 * {@link /subscriptions/import}
 */
export async function importSubscriptions(
  data?: ImportSubscriptionsMutationRequest,
  config: Partial<RequestConfig<ImportSubscriptionsMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    ImportSubscriptionsMutationResponse,
    ResponseErrorConfig<ImportSubscriptions401>,
    ImportSubscriptionsMutationRequest
  >({
    method: 'POST',
    url: getImportSubscriptionsUrl().toString(),
    data: importSubscriptionsMutationRequestSchema.parse(data),
    ...requestConfig,
    headers: {
      'Content-Type': 'application/octet-stream',
      ...requestConfig.headers,
    },
  })
  return importSubscriptionsMutationResponseSchema.parse(res.data)
}

function getExportSubscriptionsUrl() {
  return `/subscriptions/export` as const
}

/**
 * @description Export user subscriptions
 * {@link /subscriptions/export}
 */
export async function exportSubscriptions(
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    ExportSubscriptionsMutationResponse,
    ResponseErrorConfig<ExportSubscriptions401>,
    unknown
  >({
    method: 'POST',
    url: getExportSubscriptionsUrl().toString(),
    ...requestConfig,
  })
  return exportSubscriptionsMutationResponseSchema.parse(res.data)
}

function getListSubscriptionEntriesUrl() {
  return `/subscriptionEntries` as const
}

/**
 * @description List subscription entries
 * {@link /subscriptionEntries}
 */
export async function listSubscriptionEntries(
  params?: ListSubscriptionEntriesQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    ListSubscriptionEntriesQueryResponse,
    ResponseErrorConfig<ListSubscriptionEntries401>,
    unknown
  >({
    method: 'GET',
    url: getListSubscriptionEntriesUrl().toString(),
    params,
    ...requestConfig,
  })
  return listSubscriptionEntriesQueryResponseSchema.parse(res.data)
}

function getListTagsUrl() {
  return `/tags` as const
}

/**
 * @description List user tags
 * {@link /tags}
 */
export async function listTags(
  params?: ListTagsQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    ListTagsQueryResponse,
    ResponseErrorConfig<ListTags401>,
    unknown
  >({
    method: 'GET',
    url: getListTagsUrl().toString(),
    params,
    ...requestConfig,
  })
  return listTagsQueryResponseSchema.parse(res.data)
}

function getCreateTagUrl() {
  return `/tags` as const
}

/**
 * @description Create a tag
 * {@link /tags}
 */
export async function createTag(
  data: CreateTagMutationRequest,
  config: Partial<RequestConfig<CreateTagMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    CreateTagMutationResponse,
    ResponseErrorConfig<CreateTag401 | CreateTag409 | CreateTag422>,
    CreateTagMutationRequest
  >({
    method: 'POST',
    url: getCreateTagUrl().toString(),
    data: createTagMutationRequestSchema.parse(data),
    ...requestConfig,
  })
  return createTagMutationResponseSchema.parse(res.data)
}

function getGetTagUrl(id: GetTagPathParams['id']) {
  return `/tags/${id}` as const
}

/**
 * @description Get a tag by ID
 * {@link /tags/:id}
 */
export async function getTag(
  id: GetTagPathParams['id'],
  params?: GetTagQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetTagQueryResponse,
    ResponseErrorConfig<GetTag401 | GetTag403 | GetTag404>,
    unknown
  >({
    method: 'GET',
    url: getGetTagUrl(id).toString(),
    params,
    ...requestConfig,
  })
  return getTagQueryResponseSchema.parse(res.data)
}

function getDeleteTagUrl(id: DeleteTagPathParams['id']) {
  return `/tags/${id}` as const
}

/**
 * @description Delete a tag by ID
 * {@link /tags/:id}
 */
export async function deleteTag(
  id: DeleteTagPathParams['id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeleteTagMutationResponse,
    ResponseErrorConfig<DeleteTag401 | DeleteTag403 | DeleteTag404>,
    unknown
  >({
    method: 'DELETE',
    url: getDeleteTagUrl(id).toString(),
    ...requestConfig,
  })
  return deleteTagMutationResponseSchema.parse(res.data)
}

function getUpdateTagUrl(id: UpdateTagPathParams['id']) {
  return `/tags/${id}` as const
}

/**
 * @description Update a tag by ID
 * {@link /tags/:id}
 */
export async function updateTag(
  id: UpdateTagPathParams['id'],
  data?: UpdateTagMutationRequest,
  config: Partial<RequestConfig<UpdateTagMutationRequest>> & {
    client?: typeof client
  } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    UpdateTagMutationResponse,
    ResponseErrorConfig<
      UpdateTag401 | UpdateTag403 | UpdateTag404 | UpdateTag422
    >,
    UpdateTagMutationRequest
  >({
    method: 'PATCH',
    url: getUpdateTagUrl(id).toString(),
    data: updateTagMutationRequestSchema.parse(data),
    ...requestConfig,
  })
  return updateTagMutationResponseSchema.parse(res.data)
}
