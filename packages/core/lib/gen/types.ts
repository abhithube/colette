/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

export type ApiError = {
  /**
   * @type string
   */
  code: ApiErrorCode
  /**
   * @type string
   */
  message: string
}

export const apiErrorCodeEnum = {
  NOT_AUTHENTICATED: 'NOT_AUTHENTICATED',
  NOT_AUTHORIZED: 'NOT_AUTHORIZED',
  NOT_FOUND: 'NOT_FOUND',
  ALREADY_EXISTS: 'ALREADY_EXISTS',
  VALIDATION: 'VALIDATION',
  BAD_GATEWAY: 'BAD_GATEWAY',
  UNKNOWN: 'UNKNOWN',
} as const

export type ApiErrorCodeEnum =
  (typeof apiErrorCodeEnum)[keyof typeof apiErrorCodeEnum]

export type ApiErrorCode = ApiErrorCodeEnum

export type ApiKey = {
  /**
   * @type string, uuid
   */
  id: string
  /**
   * @type string
   */
  title: string
  /**
   * @type string
   */
  preview: string
  /**
   * @type string, date-time
   */
  createdAt: string
  /**
   * @type string, date-time
   */
  updatedAt: string
}

export type ApiKeyCreate = {
  /**
   * @minLength 1
   * @type string
   */
  title: string
}

export type ApiKeyCreated = {
  /**
   * @type string, uuid
   */
  id: string
  /**
   * @type string
   */
  value: string
  /**
   * @type string
   */
  title: string
  /**
   * @type string, date-time
   */
  createdAt: string
}

export type ApiKeyUpdate = {
  /**
   * @minLength 1
   * @type string | undefined
   */
  title?: string
}

export type Bookmark = {
  /**
   * @type string, uuid
   */
  id: string
  /**
   * @type string, uri
   */
  link: string
  /**
   * @type string
   */
  title: string
  /**
   * @type string,null, uri
   */
  thumbnailUrl: string | null
  /**
   * @type string,null, date-time
   */
  publishedAt: string | null
  /**
   * @type string,null
   */
  author: string | null
  /**
   * @type string,null, uri
   */
  archivedUrl: string | null
  /**
   * @type string, date-time
   */
  createdAt: string
  /**
   * @type string, date-time
   */
  updatedAt: string
}

export type BookmarkCreate = {
  /**
   * @type string, uri
   */
  url: string
  /**
   * @minLength 1
   * @type string
   */
  title: string
  /**
   * @type string,null | undefined, uri
   */
  thumbnailUrl?: string | null
  /**
   * @type string,null | undefined, date-time
   */
  publishedAt?: string | null
  /**
   * @minLength 1
   * @type string,null | undefined
   */
  author?: string | null
}

export const bookmarkDateFieldEnum = {
  publishedAt: 'publishedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const

export type BookmarkDateFieldEnum =
  (typeof bookmarkDateFieldEnum)[keyof typeof bookmarkDateFieldEnum]

export type BookmarkDateField = BookmarkDateFieldEnum

export type BookmarkDetails = {
  /**
   * @type object
   */
  bookmark: Bookmark
  /**
   * @type array | undefined
   */
  tags?: Tag[]
}

export type BookmarkFilter =
  | {
      /**
       * @type object
       */
      text: {
        /**
         * @type string
         */
        field: BookmarkTextField
        op: TextOp
      }
    }
  | {
      /**
       * @type object
       */
      date: {
        /**
         * @type string
         */
        field: BookmarkDateField
        op: DateOp
      }
    }
  | {
      /**
       * @type array
       */
      and: BookmarkFilter[]
    }
  | {
      /**
       * @type array
       */
      or: BookmarkFilter[]
    }
  | {
      not: BookmarkFilter
    }

export type BookmarkScrape = {
  /**
   * @type string, uri
   */
  url: string
}

export type BookmarkScraped = {
  /**
   * @type string, uri
   */
  link: string
  /**
   * @type string
   */
  title: string
  /**
   * @type string,null, uri
   */
  thumbnailUrl: string | null
  /**
   * @type string,null, date-time
   */
  publishedAt: string | null
  /**
   * @type string,null
   */
  author: string | null
}

export const bookmarkTextFieldEnum = {
  link: 'link',
  title: 'title',
  author: 'author',
  tag: 'tag',
} as const

export type BookmarkTextFieldEnum =
  (typeof bookmarkTextFieldEnum)[keyof typeof bookmarkTextFieldEnum]

export type BookmarkTextField = BookmarkTextFieldEnum

export type BookmarkUpdate = {
  /**
   * @minLength 1
   * @type string | undefined
   */
  title?: string
  /**
   * @type string,null | undefined, uri
   */
  thumbnailUrl?: string | null
  /**
   * @type string,null | undefined, date-time
   */
  publishedAt?: string | null
  /**
   * @minLength 1
   * @type string,null | undefined
   */
  author?: string | null
}

export type BooleanOp = {
  /**
   * @type boolean
   */
  equals: boolean
}

export type Collection = {
  /**
   * @type string, uuid
   */
  id: string
  /**
   * @type string
   */
  title: string
  filter: BookmarkFilter
  /**
   * @type string, date-time
   */
  createdAt: string
  /**
   * @type string, date-time
   */
  updatedAt: string
}

export type CollectionCreate = {
  /**
   * @minLength 1
   * @type string
   */
  title: string
  filter: BookmarkFilter
}

export type CollectionUpdate = {
  /**
   * @minLength 1
   * @type string | undefined
   */
  title?: string
  filter?: null | BookmarkFilter
}

export type Config = {
  /**
   * @type object
   */
  oidc: OidcConfig
  /**
   * @type object
   */
  storage: StorageConfig
}

export type DateOp =
  | {
      /**
       * @type string, date-time
       */
      before: string
    }
  | {
      /**
       * @type string, date-time
       */
      after: string
    }
  | {
      /**
       * @type object
       */
      between: {
        /**
         * @type string, date-time
         */
        start: string
        /**
         * @type string, date-time
         */
        end: string
      }
    }
  | {
      /**
       * @type integer, int64
       */
      inLast: number
    }

export type Feed = {
  /**
   * @type string, uuid
   */
  id: string
  /**
   * @type string, uri
   */
  sourceUrl: string
  /**
   * @type string, uri
   */
  link: string
  /**
   * @type string
   */
  title: string
  /**
   * @type string,null
   */
  description: string | null
  /**
   * @type string,null, date-time
   */
  refreshedAt: string | null
  /**
   * @type boolean
   */
  isCustom: boolean
}

export type FeedDetect = {
  /**
   * @type string, uri
   */
  url: string
}

export type FeedDetected = {
  /**
   * @type string, uri
   */
  url: string
  /**
   * @type string
   */
  title: string
}

export type FeedEntry = {
  /**
   * @type string, uuid
   */
  id: string
  /**
   * @type string, uri
   */
  link: string
  /**
   * @type string
   */
  title: string
  /**
   * @type string, date-time
   */
  publishedAt: string
  /**
   * @type string,null
   */
  description: string | null
  /**
   * @type string,null
   */
  author: string | null
  /**
   * @type string,null, uri
   */
  thumbnailUrl: string | null
  /**
   * @type string, uuid
   */
  feedId: string
}

export type FeedScrape = {
  /**
   * @type string, uri
   */
  url: string
}

export type LinkBookmarkTags = {
  /**
   * @type array
   */
  tagIds: string[]
}

export type LinkSubscriptionTags = {
  /**
   * @type array
   */
  tagIds: string[]
}

export type OidcConfig = {
  /**
   * @type string
   */
  clientId: string
  /**
   * @type string, uri
   */
  redirectUrl: string
  /**
   * @type string, uri
   */
  issuerUrl: string
}

export type PaginatedApiKey = {
  /**
   * @type array
   */
  data: {
    /**
     * @type string, uuid
     */
    id: string
    /**
     * @type string
     */
    title: string
    /**
     * @type string
     */
    preview: string
    /**
     * @type string, date-time
     */
    createdAt: string
    /**
     * @type string, date-time
     */
    updatedAt: string
  }[]
  /**
   * @type string | undefined
   */
  cursor?: string
}

export type PaginatedBookmarkDetails = {
  /**
   * @type array
   */
  data: {
    /**
     * @type object
     */
    bookmark: Bookmark
    /**
     * @type array | undefined
     */
    tags?: Tag[]
  }[]
  /**
   * @type string | undefined
   */
  cursor?: string
}

export type PaginatedCollection = {
  /**
   * @type array
   */
  data: {
    /**
     * @type string, uuid
     */
    id: string
    /**
     * @type string
     */
    title: string
    filter: BookmarkFilter
    /**
     * @type string, date-time
     */
    createdAt: string
    /**
     * @type string, date-time
     */
    updatedAt: string
  }[]
  /**
   * @type string | undefined
   */
  cursor?: string
}

export type PaginatedFeedEntry = {
  /**
   * @type array
   */
  data: {
    /**
     * @type string, uuid
     */
    id: string
    /**
     * @type string, uri
     */
    link: string
    /**
     * @type string
     */
    title: string
    /**
     * @type string, date-time
     */
    publishedAt: string
    /**
     * @type string,null
     */
    description: string | null
    /**
     * @type string,null
     */
    author: string | null
    /**
     * @type string,null, uri
     */
    thumbnailUrl: string | null
    /**
     * @type string, uuid
     */
    feedId: string
  }[]
  /**
   * @type string | undefined
   */
  cursor?: string
}

export type PaginatedStream = {
  /**
   * @type array
   */
  data: {
    /**
     * @type string, uuid
     */
    id: string
    /**
     * @type string
     */
    title: string
    filter: SubscriptionEntryFilter
    /**
     * @type string, date-time
     */
    createdAt: string
    /**
     * @type string, date-time
     */
    updatedAt: string
  }[]
  /**
   * @type string | undefined
   */
  cursor?: string
}

export type PaginatedSubscriptionDetails = {
  /**
   * @type array
   */
  data: {
    /**
     * @type object
     */
    subscription: Subscription
    /**
     * @type object | undefined
     */
    feed?: Feed
    /**
     * @type array | undefined
     */
    tags?: Tag[]
    /**
     * @type integer | undefined, int64
     */
    unreadCount?: number
  }[]
  /**
   * @type string | undefined
   */
  cursor?: string
}

export type PaginatedSubscriptionEntryDetails = {
  /**
   * @type array
   */
  data: {
    /**
     * @type object
     */
    subscriptionEntry: SubscriptionEntry
    /**
     * @type object | undefined
     */
    feedEntry?: FeedEntry
  }[]
  /**
   * @type string | undefined
   */
  cursor?: string
}

export type PaginatedTagDetails = {
  /**
   * @type array
   */
  data: {
    /**
     * @type object
     */
    tag: Tag
    /**
     * @type integer | undefined, int64
     */
    feedCount?: number
    /**
     * @type integer | undefined, int64
     */
    bookmarkCount?: number
  }[]
  /**
   * @type string | undefined
   */
  cursor?: string
}

export type StorageConfig = {
  /**
   * @type string, uri
   */
  baseUrl: string
}

export type Stream = {
  /**
   * @type string, uuid
   */
  id: string
  /**
   * @type string
   */
  title: string
  filter: SubscriptionEntryFilter
  /**
   * @type string, date-time
   */
  createdAt: string
  /**
   * @type string, date-time
   */
  updatedAt: string
}

export type StreamCreate = {
  /**
   * @minLength 1
   * @type string
   */
  title: string
  filter: SubscriptionEntryFilter
}

export type StreamUpdate = {
  /**
   * @minLength 1
   * @type string | undefined
   */
  title?: string
  filter?: null | SubscriptionEntryFilter
}

export type Subscription = {
  /**
   * @type string, uuid
   */
  id: string
  /**
   * @type string
   */
  title: string
  /**
   * @type string,null
   */
  description: string | null
  /**
   * @type string, uuid
   */
  feedId: string
  /**
   * @type string, date-time
   */
  createdAt: string
  /**
   * @type string, date-time
   */
  updatedAt: string
}

export type SubscriptionCreate = {
  /**
   * @minLength 1
   * @type string
   */
  title: string
  /**
   * @minLength 1
   * @type string,null | undefined
   */
  description?: string | null
  /**
   * @type string, uuid
   */
  feedId: string
}

export type SubscriptionDetails = {
  /**
   * @type object
   */
  subscription: Subscription
  /**
   * @type object | undefined
   */
  feed?: Feed
  /**
   * @type array | undefined
   */
  tags?: Tag[]
  /**
   * @type integer | undefined, int64
   */
  unreadCount?: number
}

export type SubscriptionEntry = {
  /**
   * @type string, uuid
   */
  subscriptionId: string
  /**
   * @type string, uuid
   */
  feedEntryId: string
  /**
   * @type boolean
   */
  hasRead: boolean
  /**
   * @type string,null | undefined, date-time
   */
  readAt?: string | null
}

export const subscriptionEntryBooleanFieldEnum = {
  hasRead: 'hasRead',
} as const

export type SubscriptionEntryBooleanFieldEnum =
  (typeof subscriptionEntryBooleanFieldEnum)[keyof typeof subscriptionEntryBooleanFieldEnum]

export type SubscriptionEntryBooleanField = SubscriptionEntryBooleanFieldEnum

export const subscriptionEntryDateFieldEnum = {
  publishedAt: 'publishedAt',
} as const

export type SubscriptionEntryDateFieldEnum =
  (typeof subscriptionEntryDateFieldEnum)[keyof typeof subscriptionEntryDateFieldEnum]

export type SubscriptionEntryDateField = SubscriptionEntryDateFieldEnum

export type SubscriptionEntryDetails = {
  /**
   * @type object
   */
  subscriptionEntry: SubscriptionEntry
  /**
   * @type object | undefined
   */
  feedEntry?: FeedEntry
}

export type SubscriptionEntryFilter =
  | {
      /**
       * @type object
       */
      text: {
        /**
         * @type string
         */
        field: SubscriptionEntryTextField
        op: TextOp
      }
    }
  | {
      /**
       * @type object
       */
      boolean: {
        /**
         * @type string
         */
        field: SubscriptionEntryBooleanField
        op: BooleanOp
      }
    }
  | {
      /**
       * @type object
       */
      date: {
        /**
         * @type string
         */
        field: SubscriptionEntryDateField
        op: DateOp
      }
    }
  | {
      /**
       * @type array
       */
      and: SubscriptionEntryFilter[]
    }
  | {
      /**
       * @type array
       */
      or: SubscriptionEntryFilter[]
    }
  | {
      not: SubscriptionEntryFilter
    }

export const subscriptionEntryTextFieldEnum = {
  link: 'link',
  title: 'title',
  description: 'description',
  author: 'author',
  tag: 'tag',
} as const

export type SubscriptionEntryTextFieldEnum =
  (typeof subscriptionEntryTextFieldEnum)[keyof typeof subscriptionEntryTextFieldEnum]

export type SubscriptionEntryTextField = SubscriptionEntryTextFieldEnum

export type SubscriptionUpdate = {
  /**
   * @minLength 1
   * @type string,null | undefined
   */
  title?: string | null
  /**
   * @minLength 1
   * @type string,null | undefined
   */
  description?: string | null
}

export type Tag = {
  /**
   * @type string, uuid
   */
  id: string
  /**
   * @type string
   */
  title: string
  /**
   * @type string, date-time
   */
  createdAt: string
  /**
   * @type string, date-time
   */
  updatedAt: string
}

export type TagCreate = {
  /**
   * @minLength 1
   * @type string
   */
  title: string
}

export type TagDetails = {
  /**
   * @type object
   */
  tag: Tag
  /**
   * @type integer | undefined, int64
   */
  feedCount?: number
  /**
   * @type integer | undefined, int64
   */
  bookmarkCount?: number
}

export type TagUpdate = {
  /**
   * @minLength 1
   * @type string | undefined
   */
  title?: string
}

export type TextOp =
  | {
      /**
       * @type string
       */
      equals: string
    }
  | {
      /**
       * @type string
       */
      contains: string
    }
  | {
      /**
       * @type string
       */
      startsWith: string
    }
  | {
      /**
       * @type string
       */
      endsWith: string
    }

export type User = {
  /**
   * @type string, uuid
   */
  id: string
  /**
   * @type string
   */
  externalId: string
  /**
   * @type string,null, email
   */
  email: string | null
  /**
   * @type string,null
   */
  displayName: string | null
  /**
   * @type string,null, uri
   */
  pictureUrl: string | null
  /**
   * @type string, date-time
   */
  createdAt: string
  /**
   * @type string, date-time
   */
  updatedAt: string
}

/**
 * @description Paginated list of API keys
 */
export type ListApiKeys200 = PaginatedApiKey

/**
 * @description User not authenticated
 */
export type ListApiKeys401 = ApiError

/**
 * @description Unknown error
 */
export type ListApiKeysError = ApiError

export type ListApiKeysQueryResponse = ListApiKeys200

export type ListApiKeysQuery = {
  Response: ListApiKeys200
  Errors: ListApiKeys401
}

/**
 * @description Created API key
 */
export type CreateApiKey201 = ApiKeyCreated

/**
 * @description User not authenticated
 */
export type CreateApiKey401 = ApiError

/**
 * @description Invalid input
 */
export type CreateApiKey422 = ApiError

/**
 * @description Unknown error
 */
export type CreateApiKeyError = ApiError

export type CreateApiKeyMutationRequest = ApiKeyCreate

export type CreateApiKeyMutationResponse = CreateApiKey201

export type CreateApiKeyMutation = {
  Response: CreateApiKey201
  Request: CreateApiKeyMutationRequest
  Errors: CreateApiKey401 | CreateApiKey422
}

export type GetApiKeyPathParams = {
  /**
   * @type string, uuid
   */
  id: string
}

/**
 * @description API key by ID
 */
export type GetApiKey200 = ApiKey

/**
 * @description User not authenticated
 */
export type GetApiKey401 = ApiError

/**
 * @description User not authorized
 */
export type GetApiKey403 = ApiError

/**
 * @description API key not found
 */
export type GetApiKey404 = ApiError

/**
 * @description Unknown error
 */
export type GetApiKeyError = ApiError

export type GetApiKeyQueryResponse = GetApiKey200

export type GetApiKeyQuery = {
  Response: GetApiKey200
  PathParams: GetApiKeyPathParams
  Errors: GetApiKey401 | GetApiKey403 | GetApiKey404
}

export type DeleteApiKeyPathParams = {
  /**
   * @type string, uuid
   */
  id: string
}

/**
 * @description Successfully deleted API key
 */
export type DeleteApiKey204 = any

/**
 * @description User not authenticated
 */
export type DeleteApiKey401 = ApiError

/**
 * @description User not authorized
 */
export type DeleteApiKey403 = ApiError

/**
 * @description API key not found
 */
export type DeleteApiKey404 = ApiError

/**
 * @description Unknown error
 */
export type DeleteApiKeyError = ApiError

export type DeleteApiKeyMutationResponse = DeleteApiKey204

export type DeleteApiKeyMutation = {
  Response: DeleteApiKey204
  PathParams: DeleteApiKeyPathParams
  Errors: DeleteApiKey401 | DeleteApiKey403 | DeleteApiKey404
}

export type UpdateApiKeyPathParams = {
  /**
   * @type string, uuid
   */
  id: string
}

/**
 * @description Updated API key
 */
export type UpdateApiKey200 = ApiKey

/**
 * @description User not authenticated
 */
export type UpdateApiKey401 = ApiError

/**
 * @description User not authorized
 */
export type UpdateApiKey403 = ApiError

/**
 * @description API key not found
 */
export type UpdateApiKey404 = ApiError

/**
 * @description Invalid input
 */
export type UpdateApiKey422 = ApiError

/**
 * @description Unknown error
 */
export type UpdateApiKeyError = ApiError

export type UpdateApiKeyMutationRequest = ApiKeyUpdate

export type UpdateApiKeyMutationResponse = UpdateApiKey200

export type UpdateApiKeyMutation = {
  Response: UpdateApiKey200
  Request: UpdateApiKeyMutationRequest
  PathParams: UpdateApiKeyPathParams
  Errors: UpdateApiKey401 | UpdateApiKey403 | UpdateApiKey404 | UpdateApiKey422
}

/**
 * @description Active user
 */
export type GetActiveUser200 = User

/**
 * @description User not authenticated
 */
export type GetActiveUser401 = ApiError

/**
 * @description Unknown error
 */
export type GetActiveUserError = ApiError

export type GetActiveUserQueryResponse = GetActiveUser200

export type GetActiveUserQuery = {
  Response: GetActiveUser200
  Errors: GetActiveUser401
}

export type ListBookmarksQueryParams = {
  /**
   * @type string | undefined, uuid
   */
  collectionId?: string
  /**
   * @type boolean | undefined
   */
  filterByTags?: boolean
  /**
   * @type array | undefined
   */
  'tag[]'?: string[]
  /**
   * @type string | undefined
   */
  cursor?: string
  /**
   * @type boolean | undefined
   */
  withTags?: boolean
}

/**
 * @description Paginated list of bookmarks
 */
export type ListBookmarks200 = PaginatedBookmarkDetails

/**
 * @description User not authenticated
 */
export type ListBookmarks401 = ApiError

/**
 * @description Unknown error
 */
export type ListBookmarksError = ApiError

export type ListBookmarksQueryResponse = ListBookmarks200

export type ListBookmarksQuery = {
  Response: ListBookmarks200
  QueryParams: ListBookmarksQueryParams
  Errors: ListBookmarks401
}

/**
 * @description Created bookmark
 */
export type CreateBookmark201 = Bookmark

/**
 * @description User not authenticated
 */
export type CreateBookmark401 = ApiError

/**
 * @description Bookmark already exists
 */
export type CreateBookmark409 = ApiError

/**
 * @description Invalid input
 */
export type CreateBookmark422 = ApiError

/**
 * @description Unknown error
 */
export type CreateBookmarkError = ApiError

export type CreateBookmarkMutationRequest = BookmarkCreate

export type CreateBookmarkMutationResponse = CreateBookmark201

export type CreateBookmarkMutation = {
  Response: CreateBookmark201
  Request: CreateBookmarkMutationRequest
  Errors: CreateBookmark401 | CreateBookmark409 | CreateBookmark422
}

export type GetBookmarkPathParams = {
  /**
   * @type string, uuid
   */
  id: string
}

export type GetBookmarkQueryParams = {
  /**
   * @type boolean | undefined
   */
  withTags?: boolean
}

/**
 * @description Bookmark by ID
 */
export type GetBookmark200 = BookmarkDetails

/**
 * @description User not authenticated
 */
export type GetBookmark401 = ApiError

/**
 * @description User not authorized
 */
export type GetBookmark403 = ApiError

/**
 * @description Bookmark not found
 */
export type GetBookmark404 = ApiError

/**
 * @description Unknown error
 */
export type GetBookmarkError = ApiError

export type GetBookmarkQueryResponse = GetBookmark200

export type GetBookmarkQuery = {
  Response: GetBookmark200
  PathParams: GetBookmarkPathParams
  QueryParams: GetBookmarkQueryParams
  Errors: GetBookmark401 | GetBookmark403 | GetBookmark404
}

export type DeleteBookmarkPathParams = {
  /**
   * @type string, uuid
   */
  id: string
}

/**
 * @description Successfully deleted bookmark
 */
export type DeleteBookmark204 = any

/**
 * @description User not authenticated
 */
export type DeleteBookmark401 = ApiError

/**
 * @description User not authorized
 */
export type DeleteBookmark403 = ApiError

/**
 * @description Bookmark not found
 */
export type DeleteBookmark404 = ApiError

/**
 * @description Unknown error
 */
export type DeleteBookmarkError = ApiError

export type DeleteBookmarkMutationResponse = DeleteBookmark204

export type DeleteBookmarkMutation = {
  Response: DeleteBookmark204
  PathParams: DeleteBookmarkPathParams
  Errors: DeleteBookmark401 | DeleteBookmark403 | DeleteBookmark404
}

export type UpdateBookmarkPathParams = {
  /**
   * @type string, uuid
   */
  id: string
}

/**
 * @description Updated bookmark
 */
export type UpdateBookmark200 = Bookmark

/**
 * @description User not authenticated
 */
export type UpdateBookmark401 = ApiError

/**
 * @description User not authorized
 */
export type UpdateBookmark403 = ApiError

/**
 * @description Bookmark not found
 */
export type UpdateBookmark404 = ApiError

/**
 * @description Invalid input
 */
export type UpdateBookmark422 = ApiError

/**
 * @description Unknown error
 */
export type UpdateBookmarkError = ApiError

export type UpdateBookmarkMutationRequest = BookmarkUpdate

export type UpdateBookmarkMutationResponse = UpdateBookmark200

export type UpdateBookmarkMutation = {
  Response: UpdateBookmark200
  Request: UpdateBookmarkMutationRequest
  PathParams: UpdateBookmarkPathParams
  Errors:
    | UpdateBookmark401
    | UpdateBookmark403
    | UpdateBookmark404
    | UpdateBookmark422
}

export type LinkBookmarkTagsPathParams = {
  /**
   * @type string, uuid
   */
  id: string
}

/**
 * @description Successfully linked tags
 */
export type LinkBookmarkTags204 = any

/**
 * @description User not authenticated
 */
export type LinkBookmarkTags401 = ApiError

/**
 * @description User not authorized
 */
export type LinkBookmarkTags403 = ApiError

/**
 * @description Bookmark not found
 */
export type LinkBookmarkTags404 = ApiError

/**
 * @description Invalid input
 */
export type LinkBookmarkTags422 = ApiError

/**
 * @description Unknown error
 */
export type LinkBookmarkTagsError = ApiError

export type LinkBookmarkTagsMutationRequest = LinkBookmarkTags

export type LinkBookmarkTagsMutationResponse = LinkBookmarkTags204

export type LinkBookmarkTagsMutation = {
  Response: LinkBookmarkTags204
  Request: LinkBookmarkTagsMutationRequest
  PathParams: LinkBookmarkTagsPathParams
  Errors:
    | LinkBookmarkTags401
    | LinkBookmarkTags403
    | LinkBookmarkTags404
    | LinkBookmarkTags422
}

/**
 * @description Scraped bookmark
 */
export type ScrapeBookmark201 = BookmarkScraped

/**
 * @description User not authenticated
 */
export type ScrapeBookmark401 = ApiError

/**
 * @description Invalid input
 */
export type ScrapeBookmark422 = ApiError

/**
 * @description Failed to fetch data
 */
export type ScrapeBookmark502 = ApiError

/**
 * @description Unknown error
 */
export type ScrapeBookmarkError = ApiError

export type ScrapeBookmarkMutationRequest = BookmarkScrape

export type ScrapeBookmarkMutationResponse = ScrapeBookmark201

export type ScrapeBookmarkMutation = {
  Response: ScrapeBookmark201
  Request: ScrapeBookmarkMutationRequest
  Errors: ScrapeBookmark401 | ScrapeBookmark422 | ScrapeBookmark502
}

/**
 * @description Successfully started import
 */
export type ImportBookmarks204 = any

/**
 * @description User not authenticated
 */
export type ImportBookmarks401 = ApiError

/**
 * @description Unknown error
 */
export type ImportBookmarksError = ApiError

export type ImportBookmarksMutationRequest = number[]

export type ImportBookmarksMutationResponse = ImportBookmarks204

export type ImportBookmarksMutation = {
  Response: ImportBookmarks204
  Request: ImportBookmarksMutationRequest
  Errors: ImportBookmarks401
}

/**
 * @description Netscape bookmarks file
 */
export type ExportBookmarks200 = number[]

/**
 * @description User not authenticated
 */
export type ExportBookmarks401 = ApiError

/**
 * @description Unknown error
 */
export type ExportBookmarksError = ApiError

export type ExportBookmarksMutationResponse = ExportBookmarks200

export type ExportBookmarksMutation = {
  Response: ExportBookmarks200
  Errors: ExportBookmarks401
}

/**
 * @description Paginated list of collections
 */
export type ListCollections200 = PaginatedCollection

/**
 * @description User not authenticated
 */
export type ListCollections401 = ApiError

/**
 * @description Unknown error
 */
export type ListCollectionsError = ApiError

export type ListCollectionsQueryResponse = ListCollections200

export type ListCollectionsQuery = {
  Response: ListCollections200
  Errors: ListCollections401
}

/**
 * @description Created collection
 */
export type CreateCollection201 = Collection

/**
 * @description User not authenticated
 */
export type CreateCollection401 = ApiError

/**
 * @description Collection already exists
 */
export type CreateCollection409 = ApiError

/**
 * @description Invalid input
 */
export type CreateCollection422 = ApiError

/**
 * @description Unknown error
 */
export type CreateCollectionError = ApiError

export type CreateCollectionMutationRequest = CollectionCreate

export type CreateCollectionMutationResponse = CreateCollection201

export type CreateCollectionMutation = {
  Response: CreateCollection201
  Request: CreateCollectionMutationRequest
  Errors: CreateCollection401 | CreateCollection409 | CreateCollection422
}

export type GetCollectionPathParams = {
  /**
   * @type string, uuid
   */
  id: string
}

/**
 * @description Collection by ID
 */
export type GetCollection200 = Collection

/**
 * @description User not authenticated
 */
export type GetCollection401 = ApiError

/**
 * @description User not authorized
 */
export type GetCollection403 = ApiError

/**
 * @description Collection not found
 */
export type GetCollection404 = ApiError

/**
 * @description Unknown error
 */
export type GetCollectionError = ApiError

export type GetCollectionQueryResponse = GetCollection200

export type GetCollectionQuery = {
  Response: GetCollection200
  PathParams: GetCollectionPathParams
  Errors: GetCollection401 | GetCollection403 | GetCollection404
}

export type DeleteCollectionPathParams = {
  /**
   * @type string, uuid
   */
  id: string
}

/**
 * @description Successfully deleted collection
 */
export type DeleteCollection204 = any

/**
 * @description User not authenticated
 */
export type DeleteCollection401 = ApiError

/**
 * @description User not authorized
 */
export type DeleteCollection403 = ApiError

/**
 * @description Collection not found
 */
export type DeleteCollection404 = ApiError

/**
 * @description Unknown error
 */
export type DeleteCollectionError = ApiError

export type DeleteCollectionMutationResponse = DeleteCollection204

export type DeleteCollectionMutation = {
  Response: DeleteCollection204
  PathParams: DeleteCollectionPathParams
  Errors: DeleteCollection401 | DeleteCollection403 | DeleteCollection404
}

export type UpdateCollectionPathParams = {
  /**
   * @type string, uuid
   */
  id: string
}

/**
 * @description Updated collection
 */
export type UpdateCollection200 = Collection

/**
 * @description User not authenticated
 */
export type UpdateCollection401 = ApiError

/**
 * @description User not authorized
 */
export type UpdateCollection403 = ApiError

/**
 * @description Collection not found
 */
export type UpdateCollection404 = ApiError

/**
 * @description Invalid input
 */
export type UpdateCollection422 = ApiError

/**
 * @description Unknown error
 */
export type UpdateCollectionError = ApiError

export type UpdateCollectionMutationRequest = CollectionUpdate

export type UpdateCollectionMutationResponse = UpdateCollection200

export type UpdateCollectionMutation = {
  Response: UpdateCollection200
  Request: UpdateCollectionMutationRequest
  PathParams: UpdateCollectionPathParams
  Errors:
    | UpdateCollection401
    | UpdateCollection403
    | UpdateCollection404
    | UpdateCollection422
}

/**
 * @description API config
 */
export type GetConfig200 = Config

export type GetConfigQueryResponse = GetConfig200

export type GetConfigQuery = {
  Response: GetConfig200
  Errors: any
}

export type ListFeedEntriesQueryParams = {
  /**
   * @type string | undefined, uuid
   */
  streamId?: string
  /**
   * @type string | undefined, uuid
   */
  feedId?: string
  /**
   * @type boolean | undefined
   */
  hasRead?: boolean
  /**
   * @type array | undefined
   */
  'tag[]'?: string[]
  /**
   * @type string | undefined
   */
  cursor?: string
}

/**
 * @description Paginated list of feed entries
 */
export type ListFeedEntries200 = PaginatedFeedEntry

/**
 * @description User not authenticated
 */
export type ListFeedEntries401 = ApiError

/**
 * @description Unknown error
 */
export type ListFeedEntriesError = ApiError

export type ListFeedEntriesQueryResponse = ListFeedEntries200

export type ListFeedEntriesQuery = {
  Response: ListFeedEntries200
  QueryParams: ListFeedEntriesQueryParams
  Errors: ListFeedEntries401
}

export type GetFeedEntryPathParams = {
  /**
   * @type string, uuid
   */
  id: string
}

/**
 * @description Feed entry by ID
 */
export type GetFeedEntry200 = FeedEntry

/**
 * @description User not authenticated
 */
export type GetFeedEntry401 = ApiError

/**
 * @description User not authorized
 */
export type GetFeedEntry403 = ApiError

/**
 * @description Feed entry not found
 */
export type GetFeedEntry404 = ApiError

/**
 * @description Unknown error
 */
export type GetFeedEntryError = ApiError

export type GetFeedEntryQueryResponse = GetFeedEntry200

export type GetFeedEntryQuery = {
  Response: GetFeedEntry200
  PathParams: GetFeedEntryPathParams
  Errors: GetFeedEntry401 | GetFeedEntry403 | GetFeedEntry404
}

/**
 * @description List of detected feeds
 */
export type DetectFeeds201 = FeedDetected[]

/**
 * @description User not authenticated
 */
export type DetectFeeds401 = ApiError

/**
 * @description Invalid input
 */
export type DetectFeeds422 = ApiError

/**
 * @description Failed to fetch data
 */
export type DetectFeeds502 = ApiError

/**
 * @description Unknown error
 */
export type DetectFeedsError = ApiError

export type DetectFeedsMutationRequest = FeedDetect

export type DetectFeedsMutationResponse = DetectFeeds201

export type DetectFeedsMutation = {
  Response: DetectFeeds201
  Request: DetectFeedsMutationRequest
  Errors: DetectFeeds401 | DetectFeeds422 | DetectFeeds502
}

/**
 * @description Scraped feed
 */
export type ScrapeFeed201 = Feed

/**
 * @description User not authenticated
 */
export type ScrapeFeed401 = ApiError

/**
 * @description Invalid input
 */
export type ScrapeFeed422 = ApiError

/**
 * @description Failed to fetch data
 */
export type ScrapeFeed502 = ApiError

/**
 * @description Unknown error
 */
export type ScrapeFeedError = ApiError

export type ScrapeFeedMutationRequest = FeedScrape

export type ScrapeFeedMutationResponse = ScrapeFeed201

export type ScrapeFeedMutation = {
  Response: ScrapeFeed201
  Request: ScrapeFeedMutationRequest
  Errors: ScrapeFeed401 | ScrapeFeed422 | ScrapeFeed502
}

/**
 * @description Paginated list of streams
 */
export type ListStreams200 = PaginatedStream

/**
 * @description User not authenticated
 */
export type ListStreams401 = ApiError

/**
 * @description Unknown error
 */
export type ListStreamsError = ApiError

export type ListStreamsQueryResponse = ListStreams200

export type ListStreamsQuery = {
  Response: ListStreams200
  Errors: ListStreams401
}

/**
 * @description Created stream
 */
export type CreateStream201 = Stream

/**
 * @description User not authenticated
 */
export type CreateStream401 = ApiError

/**
 * @description Stream already exists
 */
export type CreateStream409 = ApiError

/**
 * @description Invalid input
 */
export type CreateStream422 = ApiError

/**
 * @description Unknown error
 */
export type CreateStreamError = ApiError

export type CreateStreamMutationRequest = StreamCreate

export type CreateStreamMutationResponse = CreateStream201

export type CreateStreamMutation = {
  Response: CreateStream201
  Request: CreateStreamMutationRequest
  Errors: CreateStream401 | CreateStream409 | CreateStream422
}

export type GetStreamPathParams = {
  /**
   * @type string, uuid
   */
  id: string
}

/**
 * @description Stream by ID
 */
export type GetStream200 = Stream

/**
 * @description User not authenticated
 */
export type GetStream401 = ApiError

/**
 * @description User not authorized
 */
export type GetStream403 = ApiError

/**
 * @description Stream not found
 */
export type GetStream404 = ApiError

/**
 * @description Unknown error
 */
export type GetStreamError = ApiError

export type GetStreamQueryResponse = GetStream200

export type GetStreamQuery = {
  Response: GetStream200
  PathParams: GetStreamPathParams
  Errors: GetStream401 | GetStream403 | GetStream404
}

export type DeleteStreamPathParams = {
  /**
   * @type string, uuid
   */
  id: string
}

/**
 * @description Successfully deleted stream
 */
export type DeleteStream204 = any

/**
 * @description User not authenticated
 */
export type DeleteStream401 = ApiError

/**
 * @description User not authorized
 */
export type DeleteStream403 = ApiError

/**
 * @description Stream not found
 */
export type DeleteStream404 = ApiError

/**
 * @description Unknown error
 */
export type DeleteStreamError = ApiError

export type DeleteStreamMutationResponse = DeleteStream204

export type DeleteStreamMutation = {
  Response: DeleteStream204
  PathParams: DeleteStreamPathParams
  Errors: DeleteStream401 | DeleteStream403 | DeleteStream404
}

export type UpdateStreamPathParams = {
  /**
   * @type string, uuid
   */
  id: string
}

/**
 * @description Updated stream
 */
export type UpdateStream200 = Stream

/**
 * @description User not authenticated
 */
export type UpdateStream401 = ApiError

/**
 * @description User not authorized
 */
export type UpdateStream403 = ApiError

/**
 * @description Stream not found
 */
export type UpdateStream404 = ApiError

/**
 * @description Invalid input
 */
export type UpdateStream422 = ApiError

/**
 * @description Unknown error
 */
export type UpdateStreamError = ApiError

export type UpdateStreamMutationRequest = StreamUpdate

export type UpdateStreamMutationResponse = UpdateStream200

export type UpdateStreamMutation = {
  Response: UpdateStream200
  Request: UpdateStreamMutationRequest
  PathParams: UpdateStreamPathParams
  Errors: UpdateStream401 | UpdateStream403 | UpdateStream404 | UpdateStream422
}

export type ListSubscriptionsQueryParams = {
  /**
   * @type boolean | undefined
   */
  filterByTags?: boolean
  /**
   * @type array | undefined
   */
  'tag[]'?: string[]
  /**
   * @type boolean | undefined
   */
  withFeed?: boolean
  /**
   * @type boolean | undefined
   */
  withUnreadCount?: boolean
  /**
   * @type boolean | undefined
   */
  withTags?: boolean
}

/**
 * @description Paginated list of subscriptions
 */
export type ListSubscriptions200 = PaginatedSubscriptionDetails

/**
 * @description User not authenticated
 */
export type ListSubscriptions401 = ApiError

/**
 * @description Unknown error
 */
export type ListSubscriptionsError = ApiError

export type ListSubscriptionsQueryResponse = ListSubscriptions200

export type ListSubscriptionsQuery = {
  Response: ListSubscriptions200
  QueryParams: ListSubscriptionsQueryParams
  Errors: ListSubscriptions401
}

/**
 * @description Created subscription
 */
export type CreateSubscription201 = Subscription

/**
 * @description User not authenticated
 */
export type CreateSubscription401 = ApiError

/**
 * @description Subscription already exists
 */
export type CreateSubscription409 = ApiError

/**
 * @description Invalid input
 */
export type CreateSubscription422 = ApiError

/**
 * @description Unknown error
 */
export type CreateSubscriptionError = ApiError

export type CreateSubscriptionMutationRequest = SubscriptionCreate

export type CreateSubscriptionMutationResponse = CreateSubscription201

export type CreateSubscriptionMutation = {
  Response: CreateSubscription201
  Request: CreateSubscriptionMutationRequest
  Errors: CreateSubscription401 | CreateSubscription409 | CreateSubscription422
}

export type GetSubscriptionPathParams = {
  /**
   * @type string, uuid
   */
  id: string
}

export type GetSubscriptionQueryParams = {
  /**
   * @type boolean | undefined
   */
  withFeed?: boolean
  /**
   * @type boolean | undefined
   */
  withUnreadCount?: boolean
  /**
   * @type boolean | undefined
   */
  withTags?: boolean
}

/**
 * @description Subscription by ID
 */
export type GetSubscription200 = SubscriptionDetails

/**
 * @description User not authenticated
 */
export type GetSubscription401 = ApiError

/**
 * @description User not authorized
 */
export type GetSubscription403 = ApiError

/**
 * @description Subscription not found
 */
export type GetSubscription404 = ApiError

/**
 * @description Unknown error
 */
export type GetSubscriptionError = ApiError

export type GetSubscriptionQueryResponse = GetSubscription200

export type GetSubscriptionQuery = {
  Response: GetSubscription200
  PathParams: GetSubscriptionPathParams
  QueryParams: GetSubscriptionQueryParams
  Errors: GetSubscription401 | GetSubscription403 | GetSubscription404
}

export type DeleteSubscriptionPathParams = {
  /**
   * @type string, uuid
   */
  id: string
}

/**
 * @description Successfully deleted subscription
 */
export type DeleteSubscription204 = any

/**
 * @description User not authenticated
 */
export type DeleteSubscription401 = ApiError

/**
 * @description User not authorized
 */
export type DeleteSubscription403 = ApiError

/**
 * @description Subscription not found
 */
export type DeleteSubscription404 = ApiError

/**
 * @description Unknown error
 */
export type DeleteSubscriptionError = ApiError

export type DeleteSubscriptionMutationResponse = DeleteSubscription204

export type DeleteSubscriptionMutation = {
  Response: DeleteSubscription204
  PathParams: DeleteSubscriptionPathParams
  Errors: DeleteSubscription401 | DeleteSubscription403 | DeleteSubscription404
}

export type UpdateSubscriptionPathParams = {
  /**
   * @type string, uuid
   */
  id: string
}

/**
 * @description Updated subscription
 */
export type UpdateSubscription200 = Subscription

/**
 * @description User not authenticated
 */
export type UpdateSubscription401 = ApiError

/**
 * @description User not authorized
 */
export type UpdateSubscription403 = ApiError

/**
 * @description Subscription not found
 */
export type UpdateSubscription404 = ApiError

/**
 * @description Invalid input
 */
export type UpdateSubscription422 = ApiError

/**
 * @description Unknown error
 */
export type UpdateSubscriptionError = ApiError

export type UpdateSubscriptionMutationRequest = SubscriptionUpdate

export type UpdateSubscriptionMutationResponse = UpdateSubscription200

export type UpdateSubscriptionMutation = {
  Response: UpdateSubscription200
  Request: UpdateSubscriptionMutationRequest
  PathParams: UpdateSubscriptionPathParams
  Errors:
    | UpdateSubscription401
    | UpdateSubscription403
    | UpdateSubscription404
    | UpdateSubscription422
}

export type LinkSubscriptionTagsPathParams = {
  /**
   * @type string, uuid
   */
  id: string
}

/**
 * @description Successfully linked tags
 */
export type LinkSubscriptionTags204 = any

/**
 * @description User not authenticated
 */
export type LinkSubscriptionTags401 = ApiError

/**
 * @description User not authorized
 */
export type LinkSubscriptionTags403 = ApiError

/**
 * @description Subscription not found
 */
export type LinkSubscriptionTags404 = ApiError

/**
 * @description Invalid input
 */
export type LinkSubscriptionTags422 = ApiError

/**
 * @description Unknown error
 */
export type LinkSubscriptionTagsError = ApiError

export type LinkSubscriptionTagsMutationRequest = LinkSubscriptionTags

export type LinkSubscriptionTagsMutationResponse = LinkSubscriptionTags204

export type LinkSubscriptionTagsMutation = {
  Response: LinkSubscriptionTags204
  Request: LinkSubscriptionTagsMutationRequest
  PathParams: LinkSubscriptionTagsPathParams
  Errors:
    | LinkSubscriptionTags401
    | LinkSubscriptionTags403
    | LinkSubscriptionTags404
    | LinkSubscriptionTags422
}

export type MarkSubscriptionEntryAsReadPathParams = {
  /**
   * @type string, uuid
   */
  sid: string
  /**
   * @type string, uuid
   */
  eid: string
}

/**
 * @description Updated subscription entry
 */
export type MarkSubscriptionEntryAsRead200 = SubscriptionEntry

/**
 * @description User not authenticated
 */
export type MarkSubscriptionEntryAsRead401 = ApiError

/**
 * @description User not authorized
 */
export type MarkSubscriptionEntryAsRead403 = ApiError

/**
 * @description Subscription entry not found
 */
export type MarkSubscriptionEntryAsRead404 = ApiError

/**
 * @description Invalid input
 */
export type MarkSubscriptionEntryAsRead422 = ApiError

/**
 * @description Unknown error
 */
export type MarkSubscriptionEntryAsReadError = ApiError

export type MarkSubscriptionEntryAsReadMutationResponse =
  MarkSubscriptionEntryAsRead200

export type MarkSubscriptionEntryAsReadMutation = {
  Response: MarkSubscriptionEntryAsRead200
  PathParams: MarkSubscriptionEntryAsReadPathParams
  Errors:
    | MarkSubscriptionEntryAsRead401
    | MarkSubscriptionEntryAsRead403
    | MarkSubscriptionEntryAsRead404
    | MarkSubscriptionEntryAsRead422
}

export type MarkSubscriptionEntryAsUnreadPathParams = {
  /**
   * @type string, uuid
   */
  sid: string
  /**
   * @type string, uuid
   */
  eid: string
}

/**
 * @description Updated subscription entry
 */
export type MarkSubscriptionEntryAsUnread200 = SubscriptionEntry

/**
 * @description User not authenticated
 */
export type MarkSubscriptionEntryAsUnread401 = ApiError

/**
 * @description User not authorized
 */
export type MarkSubscriptionEntryAsUnread403 = ApiError

/**
 * @description Subscription entry not found
 */
export type MarkSubscriptionEntryAsUnread404 = ApiError

/**
 * @description Invalid input
 */
export type MarkSubscriptionEntryAsUnread422 = ApiError

/**
 * @description Unknown error
 */
export type MarkSubscriptionEntryAsUnreadError = ApiError

export type MarkSubscriptionEntryAsUnreadMutationResponse =
  MarkSubscriptionEntryAsUnread200

export type MarkSubscriptionEntryAsUnreadMutation = {
  Response: MarkSubscriptionEntryAsUnread200
  PathParams: MarkSubscriptionEntryAsUnreadPathParams
  Errors:
    | MarkSubscriptionEntryAsUnread401
    | MarkSubscriptionEntryAsUnread403
    | MarkSubscriptionEntryAsUnread404
    | MarkSubscriptionEntryAsUnread422
}

/**
 * @description Successfully started import
 */
export type ImportSubscriptions204 = any

/**
 * @description User not authenticated
 */
export type ImportSubscriptions401 = ApiError

/**
 * @description Unknown error
 */
export type ImportSubscriptionsError = ApiError

export type ImportSubscriptionsMutationRequest = number[]

export type ImportSubscriptionsMutationResponse = ImportSubscriptions204

export type ImportSubscriptionsMutation = {
  Response: ImportSubscriptions204
  Request: ImportSubscriptionsMutationRequest
  Errors: ImportSubscriptions401
}

/**
 * @description OPML subscriptions file
 */
export type ExportSubscriptions200 = number[]

/**
 * @description User not authenticated
 */
export type ExportSubscriptions401 = ApiError

/**
 * @description Unknown error
 */
export type ExportSubscriptionsError = ApiError

export type ExportSubscriptionsMutationResponse = ExportSubscriptions200

export type ExportSubscriptionsMutation = {
  Response: ExportSubscriptions200
  Errors: ExportSubscriptions401
}

export type ListSubscriptionEntriesQueryParams = {
  /**
   * @type string | undefined, uuid
   */
  streamId?: string
  /**
   * @type string | undefined, uuid
   */
  subscriptionId?: string
  /**
   * @type boolean | undefined
   */
  hasRead?: boolean
  /**
   * @type array | undefined
   */
  'tag[]'?: string[]
  /**
   * @type string | undefined
   */
  cursor?: string
}

/**
 * @description Paginated list of subscription entries
 */
export type ListSubscriptionEntries200 = PaginatedSubscriptionEntryDetails

/**
 * @description User not authenticated
 */
export type ListSubscriptionEntries401 = ApiError

/**
 * @description Unknown error
 */
export type ListSubscriptionEntriesError = ApiError

export type ListSubscriptionEntriesQueryResponse = ListSubscriptionEntries200

export type ListSubscriptionEntriesQuery = {
  Response: ListSubscriptionEntries200
  QueryParams: ListSubscriptionEntriesQueryParams
  Errors: ListSubscriptionEntries401
}

export const listTagsQueryParamsTagTypeEnum = {
  bookmarks: 'bookmarks',
  feeds: 'feeds',
} as const

export type ListTagsQueryParamsTagTypeEnum =
  (typeof listTagsQueryParamsTagTypeEnum)[keyof typeof listTagsQueryParamsTagTypeEnum]

export type ListTagsQueryParams = {
  /**
   * @type string | undefined
   */
  tagType?: ListTagsQueryParamsTagTypeEnum
  /**
   * @type boolean | undefined
   */
  withFeedCount?: boolean
  /**
   * @type boolean | undefined
   */
  withBookmarkCount?: boolean
}

/**
 * @description Paginated list of tags
 */
export type ListTags200 = PaginatedTagDetails

/**
 * @description User not authenticated
 */
export type ListTags401 = ApiError

/**
 * @description Unknown error
 */
export type ListTagsError = ApiError

export type ListTagsQueryResponse = ListTags200

export type ListTagsQuery = {
  Response: ListTags200
  QueryParams: ListTagsQueryParams
  Errors: ListTags401
}

/**
 * @description Created tag
 */
export type CreateTag201 = Tag

/**
 * @description User not authenticated
 */
export type CreateTag401 = ApiError

/**
 * @description Tag already exists
 */
export type CreateTag409 = ApiError

/**
 * @description Invalid input
 */
export type CreateTag422 = ApiError

/**
 * @description Unknown error
 */
export type CreateTagError = ApiError

export type CreateTagMutationRequest = TagCreate

export type CreateTagMutationResponse = CreateTag201

export type CreateTagMutation = {
  Response: CreateTag201
  Request: CreateTagMutationRequest
  Errors: CreateTag401 | CreateTag409 | CreateTag422
}

export type GetTagPathParams = {
  /**
   * @type string, uuid
   */
  id: string
}

export type GetTagQueryParams = {
  /**
   * @type boolean | undefined
   */
  withFeedCount?: boolean
  /**
   * @type boolean | undefined
   */
  withBookmarkCount?: boolean
}

/**
 * @description Tag by ID
 */
export type GetTag200 = TagDetails

/**
 * @description User not authenticated
 */
export type GetTag401 = ApiError

/**
 * @description User not authorized
 */
export type GetTag403 = ApiError

/**
 * @description Tag not found
 */
export type GetTag404 = ApiError

/**
 * @description Unknown error
 */
export type GetTagError = ApiError

export type GetTagQueryResponse = GetTag200

export type GetTagQuery = {
  Response: GetTag200
  PathParams: GetTagPathParams
  QueryParams: GetTagQueryParams
  Errors: GetTag401 | GetTag403 | GetTag404
}

export type DeleteTagPathParams = {
  /**
   * @type string, uuid
   */
  id: string
}

/**
 * @description Successfully deleted tag
 */
export type DeleteTag204 = any

/**
 * @description User not authenticated
 */
export type DeleteTag401 = ApiError

/**
 * @description User not authorized
 */
export type DeleteTag403 = ApiError

/**
 * @description Tag not found
 */
export type DeleteTag404 = ApiError

/**
 * @description Unknown error
 */
export type DeleteTagError = ApiError

export type DeleteTagMutationResponse = DeleteTag204

export type DeleteTagMutation = {
  Response: DeleteTag204
  PathParams: DeleteTagPathParams
  Errors: DeleteTag401 | DeleteTag403 | DeleteTag404
}

export type UpdateTagPathParams = {
  /**
   * @type string, uuid
   */
  id: string
}

/**
 * @description Updated tag
 */
export type UpdateTag200 = Tag

/**
 * @description User not authenticated
 */
export type UpdateTag401 = ApiError

/**
 * @description User not authorized
 */
export type UpdateTag403 = ApiError

/**
 * @description Tag not found
 */
export type UpdateTag404 = ApiError

/**
 * @description Invalid input
 */
export type UpdateTag422 = ApiError

/**
 * @description Unknown error
 */
export type UpdateTagError = ApiError

export type UpdateTagMutationRequest = TagUpdate

export type UpdateTagMutationResponse = UpdateTag200

export type UpdateTagMutation = {
  Response: UpdateTag200
  Request: UpdateTagMutationRequest
  PathParams: UpdateTagPathParams
  Errors: UpdateTag401 | UpdateTag403 | UpdateTag404 | UpdateTag422
}
