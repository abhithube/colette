/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */
import { z } from 'zod'

export const apiErrorSchema = z.object({
  code: z.lazy(() => apiErrorCodeSchema),
  message: z.string(),
})

export const apiErrorCodeSchema = z.enum([
  'NOT_AUTHENTICATED',
  'NOT_AUTHORIZED',
  'NOT_FOUND',
  'ALREADY_EXISTS',
  'VALIDATION',
  'BAD_GATEWAY',
  'UNKNOWN',
])

export const apiKeySchema = z.object({
  id: z.string().uuid(),
  title: z.string(),
  preview: z.string(),
  createdAt: z.string().datetime(),
  updatedAt: z.string().datetime(),
})

export const apiKeyCreateSchema = z.object({
  title: z.string().min(1),
})

export const apiKeyCreatedSchema = z.object({
  id: z.string().uuid(),
  value: z.string(),
  title: z.string(),
  createdAt: z.string().datetime(),
})

export const apiKeyUpdateSchema = z.object({
  title: z.string().min(1).optional(),
})

export const bookmarkSchema = z.object({
  id: z.string().uuid(),
  link: z.string().url(),
  title: z.string(),
  thumbnailUrl: z.string().url().nullable(),
  publishedAt: z.string().datetime().nullable(),
  author: z.string().nullable(),
  archivedUrl: z.string().url().nullable(),
  createdAt: z.string().datetime(),
  updatedAt: z.string().datetime(),
})

export const bookmarkCreateSchema = z.object({
  url: z.string().url(),
  title: z.string().min(1),
  thumbnailUrl: z.string().url().optional().nullable(),
  publishedAt: z.string().datetime().optional().nullable(),
  author: z.string().min(1).optional().nullable(),
})

export const bookmarkDateFieldSchema = z.enum([
  'publishedAt',
  'createdAt',
  'updatedAt',
])

export const bookmarkDetailsSchema = z.object({
  bookmark: z.lazy(() => bookmarkSchema),
  tags: z.array(z.lazy(() => tagSchema)).optional(),
})

export const bookmarkFilterSchema = z.union([
  z.object({
    text: z.object({
      field: z.lazy(() => bookmarkTextFieldSchema),
      op: z.lazy(() => textOpSchema),
    }),
  }),
  z.object({
    date: z.object({
      field: z.lazy(() => bookmarkDateFieldSchema),
      op: z.lazy(() => dateOpSchema),
    }),
  }),
  z.object({
    and: z.array(z.lazy(() => bookmarkFilterSchema)),
  }),
  z.object({
    or: z.array(z.lazy(() => bookmarkFilterSchema)),
  }),
  z.object({
    not: z.lazy(() => bookmarkFilterSchema),
  }),
])

export const bookmarkScrapeSchema = z.object({
  url: z.string().url(),
})

export const bookmarkScrapedSchema = z.object({
  link: z.string().url(),
  title: z.string(),
  thumbnailUrl: z.string().url().nullable(),
  publishedAt: z.string().datetime().nullable(),
  author: z.string().nullable(),
})

export const bookmarkTextFieldSchema = z.enum([
  'link',
  'title',
  'author',
  'tag',
])

export const bookmarkUpdateSchema = z.object({
  title: z.string().min(1).optional(),
  thumbnailUrl: z.string().url().optional().nullable(),
  publishedAt: z.string().datetime().optional().nullable(),
  author: z.string().min(1).optional().nullable(),
})

export const booleanOpSchema = z.object({
  equals: z.boolean(),
})

export const collectionSchema = z.object({
  id: z.string().uuid(),
  title: z.string(),
  filter: z.lazy(() => bookmarkFilterSchema),
  createdAt: z.string().datetime(),
  updatedAt: z.string().datetime(),
})

export const collectionCreateSchema = z.object({
  title: z.string().min(1),
  filter: z.lazy(() => bookmarkFilterSchema),
})

export const collectionUpdateSchema = z.object({
  title: z.string().min(1).optional(),
  filter: z.union([z.lazy(() => bookmarkFilterSchema), z.null()]).optional(),
})

export const configSchema = z.object({
  oidc: z.lazy(() => oidcConfigSchema),
  storage: z.lazy(() => storageConfigSchema),
})

export const dateOpSchema = z.union([
  z.object({
    before: z.string().datetime(),
  }),
  z.object({
    after: z.string().datetime(),
  }),
  z.object({
    between: z.object({
      start: z.string().datetime(),
      end: z.string().datetime(),
    }),
  }),
  z.object({
    inLast: z.number().int(),
  }),
])

export const feedSchema = z.object({
  id: z.string().uuid(),
  sourceUrl: z.string().url(),
  link: z.string().url(),
  title: z.string(),
  description: z.string().nullable(),
  refreshedAt: z.string().datetime().nullable(),
  isCustom: z.boolean(),
})

export const feedDetectSchema = z.object({
  url: z.string().url(),
})

export const feedDetectedSchema = z.object({
  url: z.string().url(),
  title: z.string(),
})

export const feedEntrySchema = z.object({
  id: z.string().uuid(),
  link: z.string().url(),
  title: z.string(),
  publishedAt: z.string().datetime(),
  description: z.string().nullable(),
  author: z.string().nullable(),
  thumbnailUrl: z.string().url().nullable(),
  feedId: z.string().uuid(),
})

export const feedScrapeSchema = z.object({
  url: z.string().url(),
})

export const linkBookmarkTagsSchema = z.object({
  tagIds: z.array(z.string().uuid()),
})

export const linkSubscriptionTagsSchema = z.object({
  tagIds: z.array(z.string().uuid()),
})

export const oidcConfigSchema = z.object({
  clientId: z.string(),
  redirectUrl: z.string().url(),
  issuerUrl: z.string().url(),
})

export const paginatedApiKeySchema = z.object({
  data: z.array(
    z.object({
      id: z.string().uuid(),
      title: z.string(),
      preview: z.string(),
      createdAt: z.string().datetime(),
      updatedAt: z.string().datetime(),
    }),
  ),
  cursor: z.string().optional(),
})

export const paginatedBookmarkDetailsSchema = z.object({
  data: z.array(
    z.object({
      bookmark: z.lazy(() => bookmarkSchema),
      tags: z.array(z.lazy(() => tagSchema)).optional(),
    }),
  ),
  cursor: z.string().optional(),
})

export const paginatedCollectionSchema = z.object({
  data: z.array(
    z.object({
      id: z.string().uuid(),
      title: z.string(),
      filter: z.lazy(() => bookmarkFilterSchema),
      createdAt: z.string().datetime(),
      updatedAt: z.string().datetime(),
    }),
  ),
  cursor: z.string().optional(),
})

export const paginatedFeedEntrySchema = z.object({
  data: z.array(
    z.object({
      id: z.string().uuid(),
      link: z.string().url(),
      title: z.string(),
      publishedAt: z.string().datetime(),
      description: z.string().nullable(),
      author: z.string().nullable(),
      thumbnailUrl: z.string().url().nullable(),
      feedId: z.string().uuid(),
    }),
  ),
  cursor: z.string().optional(),
})

export const paginatedStreamSchema = z.object({
  data: z.array(
    z.object({
      id: z.string().uuid(),
      title: z.string(),
      filter: z.lazy(() => subscriptionEntryFilterSchema),
      createdAt: z.string().datetime(),
      updatedAt: z.string().datetime(),
    }),
  ),
  cursor: z.string().optional(),
})

export const paginatedSubscriptionDetailsSchema = z.object({
  data: z.array(
    z.object({
      subscription: z.lazy(() => subscriptionSchema),
      feed: z.lazy(() => feedSchema).optional(),
      tags: z.array(z.lazy(() => tagSchema)).optional(),
      unreadCount: z.number().int().optional(),
    }),
  ),
  cursor: z.string().optional(),
})

export const paginatedSubscriptionEntryDetailsSchema = z.object({
  data: z.array(
    z.object({
      subscriptionEntry: z.lazy(() => subscriptionEntrySchema),
      feedEntry: z.lazy(() => feedEntrySchema).optional(),
    }),
  ),
  cursor: z.string().optional(),
})

export const paginatedTagDetailsSchema = z.object({
  data: z.array(
    z.object({
      tag: z.lazy(() => tagSchema),
      feedCount: z.number().int().optional(),
      bookmarkCount: z.number().int().optional(),
    }),
  ),
  cursor: z.string().optional(),
})

export const storageConfigSchema = z.object({
  baseUrl: z.string().url(),
})

export const streamSchema = z.object({
  id: z.string().uuid(),
  title: z.string(),
  filter: z.lazy(() => subscriptionEntryFilterSchema),
  createdAt: z.string().datetime(),
  updatedAt: z.string().datetime(),
})

export const streamCreateSchema = z.object({
  title: z.string().min(1),
  filter: z.lazy(() => subscriptionEntryFilterSchema),
})

export const streamUpdateSchema = z.object({
  title: z.string().min(1).optional(),
  filter: z
    .union([z.lazy(() => subscriptionEntryFilterSchema), z.null()])
    .optional(),
})

export const subscriptionSchema = z.object({
  id: z.string().uuid(),
  title: z.string(),
  description: z.string().nullable(),
  feedId: z.string().uuid(),
  createdAt: z.string().datetime(),
  updatedAt: z.string().datetime(),
})

export const subscriptionCreateSchema = z.object({
  title: z.string().min(1),
  description: z.string().min(1).optional().nullable(),
  feedId: z.string().uuid(),
})

export const subscriptionDetailsSchema = z.object({
  subscription: z.lazy(() => subscriptionSchema),
  feed: z.lazy(() => feedSchema).optional(),
  tags: z.array(z.lazy(() => tagSchema)).optional(),
  unreadCount: z.number().int().optional(),
})

export const subscriptionEntrySchema = z.object({
  subscriptionId: z.string().uuid(),
  feedEntryId: z.string().uuid(),
  hasRead: z.boolean(),
  readAt: z.string().datetime().optional().nullable(),
})

export const subscriptionEntryBooleanFieldSchema = z.enum(['hasRead'])

export const subscriptionEntryDateFieldSchema = z.enum(['publishedAt'])

export const subscriptionEntryDetailsSchema = z.object({
  subscriptionEntry: z.lazy(() => subscriptionEntrySchema),
  feedEntry: z.lazy(() => feedEntrySchema).optional(),
})

export const subscriptionEntryFilterSchema = z.union([
  z.object({
    text: z.object({
      field: z.lazy(() => subscriptionEntryTextFieldSchema),
      op: z.lazy(() => textOpSchema),
    }),
  }),
  z.object({
    boolean: z.object({
      field: z.lazy(() => subscriptionEntryBooleanFieldSchema),
      op: z.lazy(() => booleanOpSchema),
    }),
  }),
  z.object({
    date: z.object({
      field: z.lazy(() => subscriptionEntryDateFieldSchema),
      op: z.lazy(() => dateOpSchema),
    }),
  }),
  z.object({
    and: z.array(z.lazy(() => subscriptionEntryFilterSchema)),
  }),
  z.object({
    or: z.array(z.lazy(() => subscriptionEntryFilterSchema)),
  }),
  z.object({
    not: z.lazy(() => subscriptionEntryFilterSchema),
  }),
])

export const subscriptionEntryTextFieldSchema = z.enum([
  'link',
  'title',
  'description',
  'author',
  'tag',
])

export const subscriptionUpdateSchema = z.object({
  title: z.string().min(1).optional().nullable(),
  description: z.string().min(1).optional().nullable(),
})

export const tagSchema = z.object({
  id: z.string().uuid(),
  title: z.string(),
  createdAt: z.string().datetime(),
  updatedAt: z.string().datetime(),
})

export const tagCreateSchema = z.object({
  title: z.string().min(1),
})

export const tagDetailsSchema = z.object({
  tag: z.lazy(() => tagSchema),
  feedCount: z.number().int().optional(),
  bookmarkCount: z.number().int().optional(),
})

export const tagUpdateSchema = z.object({
  title: z.string().min(1).optional(),
})

export const textOpSchema = z.union([
  z.object({
    equals: z.string(),
  }),
  z.object({
    contains: z.string(),
  }),
  z.object({
    startsWith: z.string(),
  }),
  z.object({
    endsWith: z.string(),
  }),
])

export const userSchema = z.object({
  id: z.string().uuid(),
  externalId: z.string(),
  email: z.string().email().nullable(),
  displayName: z.string().nullable(),
  pictureUrl: z.string().url().nullable(),
  createdAt: z.string().datetime(),
  updatedAt: z.string().datetime(),
})

/**
 * @description Paginated list of API keys
 */
export const listApiKeys200Schema = z.lazy(() => paginatedApiKeySchema)

/**
 * @description User not authenticated
 */
export const listApiKeys401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const listApiKeysErrorSchema = z.lazy(() => apiErrorSchema)

export const listApiKeysQueryResponseSchema = z.lazy(() => listApiKeys200Schema)

/**
 * @description Created API key
 */
export const createApiKey201Schema = z.lazy(() => apiKeyCreatedSchema)

/**
 * @description User not authenticated
 */
export const createApiKey401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Invalid input
 */
export const createApiKey422Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const createApiKeyErrorSchema = z.lazy(() => apiErrorSchema)

export const createApiKeyMutationRequestSchema = z.lazy(
  () => apiKeyCreateSchema,
)

export const createApiKeyMutationResponseSchema = z.lazy(
  () => createApiKey201Schema,
)

export const getApiKeyPathParamsSchema = z.object({
  id: z.string().uuid(),
})

/**
 * @description API key by ID
 */
export const getApiKey200Schema = z.lazy(() => apiKeySchema)

/**
 * @description User not authenticated
 */
export const getApiKey401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const getApiKey403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description API key not found
 */
export const getApiKey404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const getApiKeyErrorSchema = z.lazy(() => apiErrorSchema)

export const getApiKeyQueryResponseSchema = z.lazy(() => getApiKey200Schema)

export const deleteApiKeyPathParamsSchema = z.object({
  id: z.string().uuid(),
})

/**
 * @description Successfully deleted API key
 */
export const deleteApiKey204Schema = z.any()

/**
 * @description User not authenticated
 */
export const deleteApiKey401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const deleteApiKey403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description API key not found
 */
export const deleteApiKey404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const deleteApiKeyErrorSchema = z.lazy(() => apiErrorSchema)

export const deleteApiKeyMutationResponseSchema = z.lazy(
  () => deleteApiKey204Schema,
)

export const updateApiKeyPathParamsSchema = z.object({
  id: z.string().uuid(),
})

/**
 * @description Updated API key
 */
export const updateApiKey200Schema = z.lazy(() => apiKeySchema)

/**
 * @description User not authenticated
 */
export const updateApiKey401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const updateApiKey403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description API key not found
 */
export const updateApiKey404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Invalid input
 */
export const updateApiKey422Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const updateApiKeyErrorSchema = z.lazy(() => apiErrorSchema)

export const updateApiKeyMutationRequestSchema = z.lazy(
  () => apiKeyUpdateSchema,
)

export const updateApiKeyMutationResponseSchema = z.lazy(
  () => updateApiKey200Schema,
)

/**
 * @description Active user
 */
export const getActiveUser200Schema = z.lazy(() => userSchema)

/**
 * @description User not authenticated
 */
export const getActiveUser401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const getActiveUserErrorSchema = z.lazy(() => apiErrorSchema)

export const getActiveUserQueryResponseSchema = z.lazy(
  () => getActiveUser200Schema,
)

export const listBookmarksQueryParamsSchema = z
  .object({
    collectionId: z.string().uuid().optional(),
    filterByTags: z.boolean().optional(),
    'tag[]': z.array(z.string().uuid()).optional(),
    cursor: z.string().optional(),
    withTags: z.boolean().optional(),
  })
  .optional()

/**
 * @description Paginated list of bookmarks
 */
export const listBookmarks200Schema = z.lazy(
  () => paginatedBookmarkDetailsSchema,
)

/**
 * @description User not authenticated
 */
export const listBookmarks401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const listBookmarksErrorSchema = z.lazy(() => apiErrorSchema)

export const listBookmarksQueryResponseSchema = z.lazy(
  () => listBookmarks200Schema,
)

/**
 * @description Created bookmark
 */
export const createBookmark201Schema = z.lazy(() => bookmarkSchema)

/**
 * @description User not authenticated
 */
export const createBookmark401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Bookmark already exists
 */
export const createBookmark409Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Invalid input
 */
export const createBookmark422Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const createBookmarkErrorSchema = z.lazy(() => apiErrorSchema)

export const createBookmarkMutationRequestSchema = z.lazy(
  () => bookmarkCreateSchema,
)

export const createBookmarkMutationResponseSchema = z.lazy(
  () => createBookmark201Schema,
)

export const getBookmarkPathParamsSchema = z.object({
  id: z.string().uuid(),
})

export const getBookmarkQueryParamsSchema = z
  .object({
    withTags: z.boolean().optional(),
  })
  .optional()

/**
 * @description Bookmark by ID
 */
export const getBookmark200Schema = z.lazy(() => bookmarkDetailsSchema)

/**
 * @description User not authenticated
 */
export const getBookmark401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const getBookmark403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Bookmark not found
 */
export const getBookmark404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const getBookmarkErrorSchema = z.lazy(() => apiErrorSchema)

export const getBookmarkQueryResponseSchema = z.lazy(() => getBookmark200Schema)

export const deleteBookmarkPathParamsSchema = z.object({
  id: z.string().uuid(),
})

/**
 * @description Successfully deleted bookmark
 */
export const deleteBookmark204Schema = z.any()

/**
 * @description User not authenticated
 */
export const deleteBookmark401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const deleteBookmark403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Bookmark not found
 */
export const deleteBookmark404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const deleteBookmarkErrorSchema = z.lazy(() => apiErrorSchema)

export const deleteBookmarkMutationResponseSchema = z.lazy(
  () => deleteBookmark204Schema,
)

export const updateBookmarkPathParamsSchema = z.object({
  id: z.string().uuid(),
})

/**
 * @description Updated bookmark
 */
export const updateBookmark200Schema = z.lazy(() => bookmarkSchema)

/**
 * @description User not authenticated
 */
export const updateBookmark401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const updateBookmark403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Bookmark not found
 */
export const updateBookmark404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Invalid input
 */
export const updateBookmark422Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const updateBookmarkErrorSchema = z.lazy(() => apiErrorSchema)

export const updateBookmarkMutationRequestSchema = z.lazy(
  () => bookmarkUpdateSchema,
)

export const updateBookmarkMutationResponseSchema = z.lazy(
  () => updateBookmark200Schema,
)

export const linkBookmarkTagsPathParamsSchema = z.object({
  id: z.string().uuid(),
})

/**
 * @description Successfully linked tags
 */
export const linkBookmarkTags204Schema = z.any()

/**
 * @description User not authenticated
 */
export const linkBookmarkTags401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const linkBookmarkTags403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Bookmark not found
 */
export const linkBookmarkTags404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Invalid input
 */
export const linkBookmarkTags422Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const linkBookmarkTagsErrorSchema = z.lazy(() => apiErrorSchema)

export const linkBookmarkTagsMutationRequestSchema = z.lazy(
  () => linkBookmarkTagsSchema,
)

export const linkBookmarkTagsMutationResponseSchema = z.lazy(
  () => linkBookmarkTags204Schema,
)

/**
 * @description Scraped bookmark
 */
export const scrapeBookmark201Schema = z.lazy(() => bookmarkScrapedSchema)

/**
 * @description User not authenticated
 */
export const scrapeBookmark401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Invalid input
 */
export const scrapeBookmark422Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Failed to fetch data
 */
export const scrapeBookmark502Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const scrapeBookmarkErrorSchema = z.lazy(() => apiErrorSchema)

export const scrapeBookmarkMutationRequestSchema = z.lazy(
  () => bookmarkScrapeSchema,
)

export const scrapeBookmarkMutationResponseSchema = z.lazy(
  () => scrapeBookmark201Schema,
)

/**
 * @description Successfully started import
 */
export const importBookmarks204Schema = z.any()

/**
 * @description User not authenticated
 */
export const importBookmarks401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const importBookmarksErrorSchema = z.lazy(() => apiErrorSchema)

export const importBookmarksMutationRequestSchema = z.array(
  z.number().int().min(0),
)

export const importBookmarksMutationResponseSchema = z.lazy(
  () => importBookmarks204Schema,
)

/**
 * @description Netscape bookmarks file
 */
export const exportBookmarks200Schema = z.array(z.number().int().min(0))

/**
 * @description User not authenticated
 */
export const exportBookmarks401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const exportBookmarksErrorSchema = z.lazy(() => apiErrorSchema)

export const exportBookmarksMutationResponseSchema = z.lazy(
  () => exportBookmarks200Schema,
)

/**
 * @description Paginated list of collections
 */
export const listCollections200Schema = z.lazy(() => paginatedCollectionSchema)

/**
 * @description User not authenticated
 */
export const listCollections401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const listCollectionsErrorSchema = z.lazy(() => apiErrorSchema)

export const listCollectionsQueryResponseSchema = z.lazy(
  () => listCollections200Schema,
)

/**
 * @description Created collection
 */
export const createCollection201Schema = z.lazy(() => collectionSchema)

/**
 * @description User not authenticated
 */
export const createCollection401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Collection already exists
 */
export const createCollection409Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Invalid input
 */
export const createCollection422Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const createCollectionErrorSchema = z.lazy(() => apiErrorSchema)

export const createCollectionMutationRequestSchema = z.lazy(
  () => collectionCreateSchema,
)

export const createCollectionMutationResponseSchema = z.lazy(
  () => createCollection201Schema,
)

export const getCollectionPathParamsSchema = z.object({
  id: z.string().uuid(),
})

/**
 * @description Collection by ID
 */
export const getCollection200Schema = z.lazy(() => collectionSchema)

/**
 * @description User not authenticated
 */
export const getCollection401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const getCollection403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Collection not found
 */
export const getCollection404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const getCollectionErrorSchema = z.lazy(() => apiErrorSchema)

export const getCollectionQueryResponseSchema = z.lazy(
  () => getCollection200Schema,
)

export const deleteCollectionPathParamsSchema = z.object({
  id: z.string().uuid(),
})

/**
 * @description Successfully deleted collection
 */
export const deleteCollection204Schema = z.any()

/**
 * @description User not authenticated
 */
export const deleteCollection401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const deleteCollection403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Collection not found
 */
export const deleteCollection404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const deleteCollectionErrorSchema = z.lazy(() => apiErrorSchema)

export const deleteCollectionMutationResponseSchema = z.lazy(
  () => deleteCollection204Schema,
)

export const updateCollectionPathParamsSchema = z.object({
  id: z.string().uuid(),
})

/**
 * @description Updated collection
 */
export const updateCollection200Schema = z.lazy(() => collectionSchema)

/**
 * @description User not authenticated
 */
export const updateCollection401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const updateCollection403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Collection not found
 */
export const updateCollection404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Invalid input
 */
export const updateCollection422Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const updateCollectionErrorSchema = z.lazy(() => apiErrorSchema)

export const updateCollectionMutationRequestSchema = z.lazy(
  () => collectionUpdateSchema,
)

export const updateCollectionMutationResponseSchema = z.lazy(
  () => updateCollection200Schema,
)

/**
 * @description API config
 */
export const getConfig200Schema = z.lazy(() => configSchema)

export const getConfigQueryResponseSchema = z.lazy(() => getConfig200Schema)

export const listFeedEntriesQueryParamsSchema = z
  .object({
    streamId: z.string().uuid().optional(),
    feedId: z.string().uuid().optional(),
    hasRead: z.boolean().optional(),
    'tag[]': z.array(z.string().uuid()).optional(),
    cursor: z.string().optional(),
  })
  .optional()

/**
 * @description Paginated list of feed entries
 */
export const listFeedEntries200Schema = z.lazy(() => paginatedFeedEntrySchema)

/**
 * @description User not authenticated
 */
export const listFeedEntries401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const listFeedEntriesErrorSchema = z.lazy(() => apiErrorSchema)

export const listFeedEntriesQueryResponseSchema = z.lazy(
  () => listFeedEntries200Schema,
)

export const getFeedEntryPathParamsSchema = z.object({
  id: z.string().uuid(),
})

/**
 * @description Feed entry by ID
 */
export const getFeedEntry200Schema = z.lazy(() => feedEntrySchema)

/**
 * @description User not authenticated
 */
export const getFeedEntry401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const getFeedEntry403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Feed entry not found
 */
export const getFeedEntry404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const getFeedEntryErrorSchema = z.lazy(() => apiErrorSchema)

export const getFeedEntryQueryResponseSchema = z.lazy(
  () => getFeedEntry200Schema,
)

/**
 * @description List of detected feeds
 */
export const detectFeeds201Schema = z.array(z.lazy(() => feedDetectedSchema))

/**
 * @description User not authenticated
 */
export const detectFeeds401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Invalid input
 */
export const detectFeeds422Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Failed to fetch data
 */
export const detectFeeds502Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const detectFeedsErrorSchema = z.lazy(() => apiErrorSchema)

export const detectFeedsMutationRequestSchema = z.lazy(() => feedDetectSchema)

export const detectFeedsMutationResponseSchema = z.lazy(
  () => detectFeeds201Schema,
)

/**
 * @description Scraped feed
 */
export const scrapeFeed201Schema = z.lazy(() => feedSchema)

/**
 * @description User not authenticated
 */
export const scrapeFeed401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Invalid input
 */
export const scrapeFeed422Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Failed to fetch data
 */
export const scrapeFeed502Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const scrapeFeedErrorSchema = z.lazy(() => apiErrorSchema)

export const scrapeFeedMutationRequestSchema = z.lazy(() => feedScrapeSchema)

export const scrapeFeedMutationResponseSchema = z.lazy(
  () => scrapeFeed201Schema,
)

/**
 * @description Paginated list of streams
 */
export const listStreams200Schema = z.lazy(() => paginatedStreamSchema)

/**
 * @description User not authenticated
 */
export const listStreams401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const listStreamsErrorSchema = z.lazy(() => apiErrorSchema)

export const listStreamsQueryResponseSchema = z.lazy(() => listStreams200Schema)

/**
 * @description Created stream
 */
export const createStream201Schema = z.lazy(() => streamSchema)

/**
 * @description User not authenticated
 */
export const createStream401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Stream already exists
 */
export const createStream409Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Invalid input
 */
export const createStream422Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const createStreamErrorSchema = z.lazy(() => apiErrorSchema)

export const createStreamMutationRequestSchema = z.lazy(
  () => streamCreateSchema,
)

export const createStreamMutationResponseSchema = z.lazy(
  () => createStream201Schema,
)

export const getStreamPathParamsSchema = z.object({
  id: z.string().uuid(),
})

/**
 * @description Stream by ID
 */
export const getStream200Schema = z.lazy(() => streamSchema)

/**
 * @description User not authenticated
 */
export const getStream401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const getStream403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Stream not found
 */
export const getStream404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const getStreamErrorSchema = z.lazy(() => apiErrorSchema)

export const getStreamQueryResponseSchema = z.lazy(() => getStream200Schema)

export const deleteStreamPathParamsSchema = z.object({
  id: z.string().uuid(),
})

/**
 * @description Successfully deleted stream
 */
export const deleteStream204Schema = z.any()

/**
 * @description User not authenticated
 */
export const deleteStream401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const deleteStream403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Stream not found
 */
export const deleteStream404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const deleteStreamErrorSchema = z.lazy(() => apiErrorSchema)

export const deleteStreamMutationResponseSchema = z.lazy(
  () => deleteStream204Schema,
)

export const updateStreamPathParamsSchema = z.object({
  id: z.string().uuid(),
})

/**
 * @description Updated stream
 */
export const updateStream200Schema = z.lazy(() => streamSchema)

/**
 * @description User not authenticated
 */
export const updateStream401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const updateStream403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Stream not found
 */
export const updateStream404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Invalid input
 */
export const updateStream422Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const updateStreamErrorSchema = z.lazy(() => apiErrorSchema)

export const updateStreamMutationRequestSchema = z.lazy(
  () => streamUpdateSchema,
)

export const updateStreamMutationResponseSchema = z.lazy(
  () => updateStream200Schema,
)

export const listSubscriptionsQueryParamsSchema = z
  .object({
    filterByTags: z.boolean().optional(),
    'tag[]': z.array(z.string().uuid()).optional(),
    withFeed: z.boolean().optional(),
    withUnreadCount: z.boolean().optional(),
    withTags: z.boolean().optional(),
  })
  .optional()

/**
 * @description Paginated list of subscriptions
 */
export const listSubscriptions200Schema = z.lazy(
  () => paginatedSubscriptionDetailsSchema,
)

/**
 * @description User not authenticated
 */
export const listSubscriptions401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const listSubscriptionsErrorSchema = z.lazy(() => apiErrorSchema)

export const listSubscriptionsQueryResponseSchema = z.lazy(
  () => listSubscriptions200Schema,
)

/**
 * @description Created subscription
 */
export const createSubscription201Schema = z.lazy(() => subscriptionSchema)

/**
 * @description User not authenticated
 */
export const createSubscription401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Subscription already exists
 */
export const createSubscription409Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Invalid input
 */
export const createSubscription422Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const createSubscriptionErrorSchema = z.lazy(() => apiErrorSchema)

export const createSubscriptionMutationRequestSchema = z.lazy(
  () => subscriptionCreateSchema,
)

export const createSubscriptionMutationResponseSchema = z.lazy(
  () => createSubscription201Schema,
)

export const getSubscriptionPathParamsSchema = z.object({
  id: z.string().uuid(),
})

export const getSubscriptionQueryParamsSchema = z
  .object({
    withFeed: z.boolean().optional(),
    withUnreadCount: z.boolean().optional(),
    withTags: z.boolean().optional(),
  })
  .optional()

/**
 * @description Subscription by ID
 */
export const getSubscription200Schema = z.lazy(() => subscriptionDetailsSchema)

/**
 * @description User not authenticated
 */
export const getSubscription401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const getSubscription403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Subscription not found
 */
export const getSubscription404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const getSubscriptionErrorSchema = z.lazy(() => apiErrorSchema)

export const getSubscriptionQueryResponseSchema = z.lazy(
  () => getSubscription200Schema,
)

export const deleteSubscriptionPathParamsSchema = z.object({
  id: z.string().uuid(),
})

/**
 * @description Successfully deleted subscription
 */
export const deleteSubscription204Schema = z.any()

/**
 * @description User not authenticated
 */
export const deleteSubscription401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const deleteSubscription403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Subscription not found
 */
export const deleteSubscription404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const deleteSubscriptionErrorSchema = z.lazy(() => apiErrorSchema)

export const deleteSubscriptionMutationResponseSchema = z.lazy(
  () => deleteSubscription204Schema,
)

export const updateSubscriptionPathParamsSchema = z.object({
  id: z.string().uuid(),
})

/**
 * @description Updated subscription
 */
export const updateSubscription200Schema = z.lazy(() => subscriptionSchema)

/**
 * @description User not authenticated
 */
export const updateSubscription401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const updateSubscription403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Subscription not found
 */
export const updateSubscription404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Invalid input
 */
export const updateSubscription422Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const updateSubscriptionErrorSchema = z.lazy(() => apiErrorSchema)

export const updateSubscriptionMutationRequestSchema = z.lazy(
  () => subscriptionUpdateSchema,
)

export const updateSubscriptionMutationResponseSchema = z.lazy(
  () => updateSubscription200Schema,
)

export const linkSubscriptionTagsPathParamsSchema = z.object({
  id: z.string().uuid(),
})

/**
 * @description Successfully linked tags
 */
export const linkSubscriptionTags204Schema = z.any()

/**
 * @description User not authenticated
 */
export const linkSubscriptionTags401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const linkSubscriptionTags403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Subscription not found
 */
export const linkSubscriptionTags404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Invalid input
 */
export const linkSubscriptionTags422Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const linkSubscriptionTagsErrorSchema = z.lazy(() => apiErrorSchema)

export const linkSubscriptionTagsMutationRequestSchema = z.lazy(
  () => linkSubscriptionTagsSchema,
)

export const linkSubscriptionTagsMutationResponseSchema = z.lazy(
  () => linkSubscriptionTags204Schema,
)

export const markSubscriptionEntryAsReadPathParamsSchema = z.object({
  sid: z.string().uuid(),
  eid: z.string().uuid(),
})

/**
 * @description Updated subscription entry
 */
export const markSubscriptionEntryAsRead200Schema = z.lazy(
  () => subscriptionEntrySchema,
)

/**
 * @description User not authenticated
 */
export const markSubscriptionEntryAsRead401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const markSubscriptionEntryAsRead403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Subscription entry not found
 */
export const markSubscriptionEntryAsRead404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Invalid input
 */
export const markSubscriptionEntryAsRead422Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const markSubscriptionEntryAsReadErrorSchema = z.lazy(
  () => apiErrorSchema,
)

export const markSubscriptionEntryAsReadMutationResponseSchema = z.lazy(
  () => markSubscriptionEntryAsRead200Schema,
)

export const markSubscriptionEntryAsUnreadPathParamsSchema = z.object({
  sid: z.string().uuid(),
  eid: z.string().uuid(),
})

/**
 * @description Updated subscription entry
 */
export const markSubscriptionEntryAsUnread200Schema = z.lazy(
  () => subscriptionEntrySchema,
)

/**
 * @description User not authenticated
 */
export const markSubscriptionEntryAsUnread401Schema = z.lazy(
  () => apiErrorSchema,
)

/**
 * @description User not authorized
 */
export const markSubscriptionEntryAsUnread403Schema = z.lazy(
  () => apiErrorSchema,
)

/**
 * @description Subscription entry not found
 */
export const markSubscriptionEntryAsUnread404Schema = z.lazy(
  () => apiErrorSchema,
)

/**
 * @description Invalid input
 */
export const markSubscriptionEntryAsUnread422Schema = z.lazy(
  () => apiErrorSchema,
)

/**
 * @description Unknown error
 */
export const markSubscriptionEntryAsUnreadErrorSchema = z.lazy(
  () => apiErrorSchema,
)

export const markSubscriptionEntryAsUnreadMutationResponseSchema = z.lazy(
  () => markSubscriptionEntryAsUnread200Schema,
)

/**
 * @description Successfully started import
 */
export const importSubscriptions204Schema = z.any()

/**
 * @description User not authenticated
 */
export const importSubscriptions401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const importSubscriptionsErrorSchema = z.lazy(() => apiErrorSchema)

export const importSubscriptionsMutationRequestSchema = z.array(
  z.number().int().min(0),
)

export const importSubscriptionsMutationResponseSchema = z.lazy(
  () => importSubscriptions204Schema,
)

/**
 * @description OPML subscriptions file
 */
export const exportSubscriptions200Schema = z.array(z.number().int().min(0))

/**
 * @description User not authenticated
 */
export const exportSubscriptions401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const exportSubscriptionsErrorSchema = z.lazy(() => apiErrorSchema)

export const exportSubscriptionsMutationResponseSchema = z.lazy(
  () => exportSubscriptions200Schema,
)

export const listSubscriptionEntriesQueryParamsSchema = z
  .object({
    streamId: z.string().uuid().optional(),
    subscriptionId: z.string().uuid().optional(),
    hasRead: z.boolean().optional(),
    'tag[]': z.array(z.string().uuid()).optional(),
    cursor: z.string().optional(),
  })
  .optional()

/**
 * @description Paginated list of subscription entries
 */
export const listSubscriptionEntries200Schema = z.lazy(
  () => paginatedSubscriptionEntryDetailsSchema,
)

/**
 * @description User not authenticated
 */
export const listSubscriptionEntries401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const listSubscriptionEntriesErrorSchema = z.lazy(() => apiErrorSchema)

export const listSubscriptionEntriesQueryResponseSchema = z.lazy(
  () => listSubscriptionEntries200Schema,
)

export const listTagsQueryParamsSchema = z
  .object({
    tagType: z.enum(['bookmarks', 'feeds']).optional(),
    withFeedCount: z.boolean().optional(),
    withBookmarkCount: z.boolean().optional(),
  })
  .optional()

/**
 * @description Paginated list of tags
 */
export const listTags200Schema = z.lazy(() => paginatedTagDetailsSchema)

/**
 * @description User not authenticated
 */
export const listTags401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const listTagsErrorSchema = z.lazy(() => apiErrorSchema)

export const listTagsQueryResponseSchema = z.lazy(() => listTags200Schema)

/**
 * @description Created tag
 */
export const createTag201Schema = z.lazy(() => tagSchema)

/**
 * @description User not authenticated
 */
export const createTag401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Tag already exists
 */
export const createTag409Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Invalid input
 */
export const createTag422Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const createTagErrorSchema = z.lazy(() => apiErrorSchema)

export const createTagMutationRequestSchema = z.lazy(() => tagCreateSchema)

export const createTagMutationResponseSchema = z.lazy(() => createTag201Schema)

export const getTagPathParamsSchema = z.object({
  id: z.string().uuid(),
})

export const getTagQueryParamsSchema = z
  .object({
    withFeedCount: z.boolean().optional(),
    withBookmarkCount: z.boolean().optional(),
  })
  .optional()

/**
 * @description Tag by ID
 */
export const getTag200Schema = z.lazy(() => tagDetailsSchema)

/**
 * @description User not authenticated
 */
export const getTag401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const getTag403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Tag not found
 */
export const getTag404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const getTagErrorSchema = z.lazy(() => apiErrorSchema)

export const getTagQueryResponseSchema = z.lazy(() => getTag200Schema)

export const deleteTagPathParamsSchema = z.object({
  id: z.string().uuid(),
})

/**
 * @description Successfully deleted tag
 */
export const deleteTag204Schema = z.any()

/**
 * @description User not authenticated
 */
export const deleteTag401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const deleteTag403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Tag not found
 */
export const deleteTag404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const deleteTagErrorSchema = z.lazy(() => apiErrorSchema)

export const deleteTagMutationResponseSchema = z.lazy(() => deleteTag204Schema)

export const updateTagPathParamsSchema = z.object({
  id: z.string().uuid(),
})

/**
 * @description Updated tag
 */
export const updateTag200Schema = z.lazy(() => tagSchema)

/**
 * @description User not authenticated
 */
export const updateTag401Schema = z.lazy(() => apiErrorSchema)

/**
 * @description User not authorized
 */
export const updateTag403Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Tag not found
 */
export const updateTag404Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Invalid input
 */
export const updateTag422Schema = z.lazy(() => apiErrorSchema)

/**
 * @description Unknown error
 */
export const updateTagErrorSchema = z.lazy(() => apiErrorSchema)

export const updateTagMutationRequestSchema = z.lazy(() => tagUpdateSchema)

export const updateTagMutationResponseSchema = z.lazy(() => updateTag200Schema)
