/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */
import type {
  ApiError,
  ApiErrorCode,
  ApiKey,
  ApiKeyCreate,
  ApiKeyCreated,
  ApiKeyUpdate,
  Bookmark,
  BookmarkCreate,
  BookmarkDateField,
  BookmarkDetails,
  BookmarkFilter,
  BookmarkScrape,
  BookmarkScraped,
  BookmarkTextField,
  BookmarkUpdate,
  BooleanOp,
  CodePayload,
  Collection,
  CollectionCreate,
  CollectionUpdate,
  Config,
  DateOp,
  Feed,
  FeedDetect,
  FeedDetected,
  FeedEntry,
  FeedScrape,
  LinkBookmarkTags,
  LinkSubscriptionTags,
  LoginPayload,
  OidcConfig,
  PaginatedApiKey,
  PaginatedBookmarkDetails,
  PaginatedCollection,
  PaginatedFeedEntry,
  PaginatedStream,
  PaginatedSubscriptionDetails,
  PaginatedSubscriptionEntryDetails,
  PaginatedTagDetails,
  RegisterPayload,
  ServerConfig,
  StorageConfig,
  Stream,
  StreamCreate,
  StreamUpdate,
  Subscription,
  SubscriptionCreate,
  SubscriptionDetails,
  SubscriptionEntry,
  SubscriptionEntryBooleanField,
  SubscriptionEntryDateField,
  SubscriptionEntryDetails,
  SubscriptionEntryFilter,
  SubscriptionEntryTextField,
  SubscriptionUpdate,
  Tag,
  TagCreate,
  TagDetails,
  TagUpdate,
  TextOp,
  TokenData,
  TokenType,
  User,
  ListApiKeysQueryParams,
  ListApiKeys200,
  ListApiKeys401,
  ListApiKeysError,
  ListApiKeysQueryResponse,
  CreateApiKey201,
  CreateApiKey401,
  CreateApiKey422,
  CreateApiKeyError,
  CreateApiKeyMutationRequest,
  CreateApiKeyMutationResponse,
  GetApiKeyPathParams,
  GetApiKey200,
  GetApiKey401,
  GetApiKey403,
  GetApiKey404,
  GetApiKeyError,
  GetApiKeyQueryResponse,
  DeleteApiKeyPathParams,
  DeleteApiKey204,
  DeleteApiKey401,
  DeleteApiKey403,
  DeleteApiKey404,
  DeleteApiKeyError,
  DeleteApiKeyMutationResponse,
  UpdateApiKeyPathParams,
  UpdateApiKey200,
  UpdateApiKey401,
  UpdateApiKey403,
  UpdateApiKey404,
  UpdateApiKey422,
  UpdateApiKeyError,
  UpdateApiKeyMutationRequest,
  UpdateApiKeyMutationResponse,
  RegisterUser200,
  RegisterUser409,
  RegisterUser422,
  RegisterUserError,
  RegisterUserMutationRequest,
  RegisterUserMutationResponse,
  LoginUser200,
  LoginUser401,
  LoginUser422,
  LoginUserError,
  LoginUserMutationRequest,
  LoginUserMutationResponse,
  GetActiveUser200,
  GetActiveUser401,
  GetActiveUserError,
  GetActiveUserQueryResponse,
  RefreshToken200,
  RefreshToken401,
  RefreshToken422,
  RefreshTokenError,
  RefreshTokenMutationResponse,
  LogoutUser204,
  LogoutUser401,
  LogoutUserError,
  LogoutUserMutationResponse,
  RedirectOidc303,
  RedirectOidcError,
  RedirectOidcQueryResponse,
  ExchangeCode200,
  ExchangeCode409,
  ExchangeCode422,
  ExchangeCodeError,
  ExchangeCodeMutationRequest,
  ExchangeCodeMutationResponse,
  ImportBackup204,
  ImportBackup401,
  ImportBackupError,
  ImportBackupMutationRequest,
  ImportBackupMutationResponse,
  ExportBackup200,
  ExportBackup401,
  ExportBackupError,
  ExportBackupMutationResponse,
  ListBookmarksQueryParams,
  ListBookmarks200,
  ListBookmarks401,
  ListBookmarksError,
  ListBookmarksQueryResponse,
  CreateBookmark201,
  CreateBookmark401,
  CreateBookmark409,
  CreateBookmark422,
  CreateBookmarkError,
  CreateBookmarkMutationRequest,
  CreateBookmarkMutationResponse,
  GetBookmarkPathParams,
  GetBookmarkQueryParams,
  GetBookmark200,
  GetBookmark401,
  GetBookmark403,
  GetBookmark404,
  GetBookmarkError,
  GetBookmarkQueryResponse,
  DeleteBookmarkPathParams,
  DeleteBookmark204,
  DeleteBookmark401,
  DeleteBookmark403,
  DeleteBookmark404,
  DeleteBookmarkError,
  DeleteBookmarkMutationResponse,
  UpdateBookmarkPathParams,
  UpdateBookmark200,
  UpdateBookmark401,
  UpdateBookmark403,
  UpdateBookmark404,
  UpdateBookmark422,
  UpdateBookmarkError,
  UpdateBookmarkMutationRequest,
  UpdateBookmarkMutationResponse,
  LinkBookmarkTagsPathParams,
  LinkBookmarkTags204,
  LinkBookmarkTags401,
  LinkBookmarkTags403,
  LinkBookmarkTags404,
  LinkBookmarkTags422,
  LinkBookmarkTagsError,
  LinkBookmarkTagsMutationRequest,
  LinkBookmarkTagsMutationResponse,
  ScrapeBookmark201,
  ScrapeBookmark401,
  ScrapeBookmark422,
  ScrapeBookmark502,
  ScrapeBookmarkError,
  ScrapeBookmarkMutationRequest,
  ScrapeBookmarkMutationResponse,
  ImportBookmarks204,
  ImportBookmarks401,
  ImportBookmarksError,
  ImportBookmarksMutationRequest,
  ImportBookmarksMutationResponse,
  ExportBookmarks200,
  ExportBookmarks401,
  ExportBookmarksError,
  ExportBookmarksMutationResponse,
  ListCollectionsQueryParams,
  ListCollections200,
  ListCollections401,
  ListCollectionsError,
  ListCollectionsQueryResponse,
  CreateCollection201,
  CreateCollection401,
  CreateCollection409,
  CreateCollection422,
  CreateCollectionError,
  CreateCollectionMutationRequest,
  CreateCollectionMutationResponse,
  GetCollectionPathParams,
  GetCollection200,
  GetCollection401,
  GetCollection403,
  GetCollection404,
  GetCollectionError,
  GetCollectionQueryResponse,
  DeleteCollectionPathParams,
  DeleteCollection204,
  DeleteCollection401,
  DeleteCollection403,
  DeleteCollection404,
  DeleteCollectionError,
  DeleteCollectionMutationResponse,
  UpdateCollectionPathParams,
  UpdateCollection200,
  UpdateCollection401,
  UpdateCollection403,
  UpdateCollection404,
  UpdateCollection422,
  UpdateCollectionError,
  UpdateCollectionMutationRequest,
  UpdateCollectionMutationResponse,
  GetConfig200,
  GetConfigQueryResponse,
  ListFeedEntriesQueryParams,
  ListFeedEntries200,
  ListFeedEntries401,
  ListFeedEntriesError,
  ListFeedEntriesQueryResponse,
  GetFeedEntryPathParams,
  GetFeedEntry200,
  GetFeedEntry401,
  GetFeedEntry403,
  GetFeedEntry404,
  GetFeedEntryError,
  GetFeedEntryQueryResponse,
  DetectFeeds201,
  DetectFeeds401,
  DetectFeeds422,
  DetectFeeds502,
  DetectFeedsError,
  DetectFeedsMutationRequest,
  DetectFeedsMutationResponse,
  ScrapeFeed201,
  ScrapeFeed401,
  ScrapeFeed422,
  ScrapeFeed502,
  ScrapeFeedError,
  ScrapeFeedMutationRequest,
  ScrapeFeedMutationResponse,
  ListStreamsQueryParams,
  ListStreams200,
  ListStreams401,
  ListStreamsError,
  ListStreamsQueryResponse,
  CreateStream201,
  CreateStream401,
  CreateStream409,
  CreateStream422,
  CreateStreamError,
  CreateStreamMutationRequest,
  CreateStreamMutationResponse,
  GetStreamPathParams,
  GetStream200,
  GetStream401,
  GetStream403,
  GetStream404,
  GetStreamError,
  GetStreamQueryResponse,
  DeleteStreamPathParams,
  DeleteStream204,
  DeleteStream401,
  DeleteStream403,
  DeleteStream404,
  DeleteStreamError,
  DeleteStreamMutationResponse,
  UpdateStreamPathParams,
  UpdateStream200,
  UpdateStream401,
  UpdateStream403,
  UpdateStream404,
  UpdateStream422,
  UpdateStreamError,
  UpdateStreamMutationRequest,
  UpdateStreamMutationResponse,
  ListSubscriptionsQueryParams,
  ListSubscriptions200,
  ListSubscriptions401,
  ListSubscriptionsError,
  ListSubscriptionsQueryResponse,
  CreateSubscription201,
  CreateSubscription401,
  CreateSubscription409,
  CreateSubscription422,
  CreateSubscriptionError,
  CreateSubscriptionMutationRequest,
  CreateSubscriptionMutationResponse,
  GetSubscriptionPathParams,
  GetSubscriptionQueryParams,
  GetSubscription200,
  GetSubscription401,
  GetSubscription403,
  GetSubscription404,
  GetSubscriptionError,
  GetSubscriptionQueryResponse,
  DeleteSubscriptionPathParams,
  DeleteSubscription204,
  DeleteSubscription401,
  DeleteSubscription403,
  DeleteSubscription404,
  DeleteSubscriptionError,
  DeleteSubscriptionMutationResponse,
  UpdateSubscriptionPathParams,
  UpdateSubscription200,
  UpdateSubscription401,
  UpdateSubscription403,
  UpdateSubscription404,
  UpdateSubscription422,
  UpdateSubscriptionError,
  UpdateSubscriptionMutationRequest,
  UpdateSubscriptionMutationResponse,
  LinkSubscriptionTagsPathParams,
  LinkSubscriptionTags204,
  LinkSubscriptionTags401,
  LinkSubscriptionTags403,
  LinkSubscriptionTags404,
  LinkSubscriptionTags422,
  LinkSubscriptionTagsError,
  LinkSubscriptionTagsMutationRequest,
  LinkSubscriptionTagsMutationResponse,
  MarkSubscriptionEntryAsReadPathParams,
  MarkSubscriptionEntryAsRead200,
  MarkSubscriptionEntryAsRead401,
  MarkSubscriptionEntryAsRead403,
  MarkSubscriptionEntryAsRead404,
  MarkSubscriptionEntryAsRead422,
  MarkSubscriptionEntryAsReadError,
  MarkSubscriptionEntryAsReadMutationResponse,
  MarkSubscriptionEntryAsUnreadPathParams,
  MarkSubscriptionEntryAsUnread200,
  MarkSubscriptionEntryAsUnread401,
  MarkSubscriptionEntryAsUnread403,
  MarkSubscriptionEntryAsUnread404,
  MarkSubscriptionEntryAsUnread422,
  MarkSubscriptionEntryAsUnreadError,
  MarkSubscriptionEntryAsUnreadMutationResponse,
  ImportSubscriptions204,
  ImportSubscriptions401,
  ImportSubscriptionsError,
  ImportSubscriptionsMutationRequest,
  ImportSubscriptionsMutationResponse,
  ExportSubscriptions200,
  ExportSubscriptions401,
  ExportSubscriptionsError,
  ExportSubscriptionsMutationResponse,
  ListSubscriptionEntriesQueryParams,
  ListSubscriptionEntries200,
  ListSubscriptionEntries401,
  ListSubscriptionEntriesError,
  ListSubscriptionEntriesQueryResponse,
  ListTagsQueryParams,
  ListTags200,
  ListTags401,
  ListTagsError,
  ListTagsQueryResponse,
  CreateTag201,
  CreateTag401,
  CreateTag409,
  CreateTag422,
  CreateTagError,
  CreateTagMutationRequest,
  CreateTagMutationResponse,
  GetTagPathParams,
  GetTagQueryParams,
  GetTag200,
  GetTag401,
  GetTag403,
  GetTag404,
  GetTagError,
  GetTagQueryResponse,
  DeleteTagPathParams,
  DeleteTag204,
  DeleteTag401,
  DeleteTag403,
  DeleteTag404,
  DeleteTagError,
  DeleteTagMutationResponse,
  UpdateTagPathParams,
  UpdateTag200,
  UpdateTag401,
  UpdateTag403,
  UpdateTag404,
  UpdateTag422,
  UpdateTagError,
  UpdateTagMutationRequest,
  UpdateTagMutationResponse,
} from './types.ts'
import type { ToZod } from '@kubb/plugin-zod/utils'
import { z } from 'zod'

export const apiErrorSchema = z.object({
  code: z.lazy(() => apiErrorCodeSchema),
  message: z.string(),
}) as unknown as ToZod<ApiError>

export const apiErrorCodeSchema = z.enum([
  'NOT_AUTHENTICATED',
  'NOT_AUTHORIZED',
  'NOT_FOUND',
  'CONFLICT',
  'VALIDATION',
  'BAD_GATEWAY',
  'UNKNOWN',
]) as unknown as ToZod<ApiErrorCode>

/**
 * @description Long-lived token linked to a user\'s account. Useful for third party client apps to access a user\'s data. The full value is returned only once, on creation.
 */
export const apiKeySchema = z
  .object({
    id: z.string().uuid().describe('Unique identifier of the API key'),
    title: z.string().describe('Human-readable name of the API key'),
    preview: z
      .string()
      .describe(
        'Partial view of the API key value for identification purposes',
      ),
    createdAt: z
      .string()
      .datetime()
      .describe('Timestamp at which the API key was created'),
    updatedAt: z
      .string()
      .datetime()
      .describe('Timestamp at which the API key was last modified'),
  })
  .describe(
    "Long-lived token linked to a user's account. Useful for third party client apps to access a user's data. The full value is returned only once, on creation.",
  ) as unknown as ToZod<ApiKey>

/**
 * @description Data to create a new API key
 */
export const apiKeyCreateSchema = z
  .object({
    title: z
      .string()
      .min(1)
      .describe(
        'Human-readable name for the API key to create, cannot be empty',
      ),
  })
  .describe('Data to create a new API key') as unknown as ToZod<ApiKeyCreate>

/**
 * @description Newly created API key, containing the full value. This value must be saved in a safe location, as subsequent GET requests will only show a preview.
 */
export const apiKeyCreatedSchema = z
  .object({
    id: z.string().uuid().describe('Unique identifier of the new API key'),
    value: z.string().describe('Full value of the new API key'),
    title: z.string().describe('Human-readable name of the new API key'),
    createdAt: z
      .string()
      .datetime()
      .describe('Timestamp at which the API key was created'),
  })
  .describe(
    'Newly created API key, containing the full value. This value must be saved in a safe location, as subsequent GET requests will only show a preview.',
  ) as unknown as ToZod<ApiKeyCreated>

/**
 * @description Details regarding the existing API key to update
 */
export const apiKeyUpdateSchema = z
  .object({
    title: z
      .string()
      .min(1)
      .describe(
        'Human-readable name for the API key to update, cannot be empty',
      )
      .optional(),
  })
  .describe(
    'Details regarding the existing API key to update',
  ) as unknown as ToZod<ApiKeyUpdate>

/**
 * @description Bookmark to a webpage
 */
export const bookmarkSchema = z
  .object({
    id: z.string().uuid().describe('Unique identifier of the bookmark'),
    link: z.string().url().describe('URL of the webpage the bookmark links to'),
    title: z.string().describe('Title of the bookmark'),
    thumbnailUrl: z
      .string()
      .url()
      .describe('Thumbnail URL of the bookmark')
      .nullable(),
    publishedAt: z
      .string()
      .datetime()
      .describe('Timestamp at which the bookmark was published')
      .nullable(),
    author: z.string().describe('Author of the bookmark').nullable(),
    archivedPath: z
      .string()
      .describe(
        "Storage path of the archived version of the bookmark's thumbnail",
      )
      .nullable(),
    createdAt: z
      .string()
      .datetime()
      .describe('Timestamp at which the bookmark was created'),
    updatedAt: z
      .string()
      .datetime()
      .describe('Timestamp at which the bookmark was modified'),
  })
  .describe('Bookmark to a webpage') as unknown as ToZod<Bookmark>

/**
 * @description Data to create a new bookmark
 */
export const bookmarkCreateSchema = z
  .object({
    url: z.string().url().describe('URL of the webpage the bookmark links to'),
    title: z
      .string()
      .min(1)
      .describe('Human-readable name for the new bookmark, cannot be empty'),
    thumbnailUrl: z
      .string()
      .url()
      .describe('Thumbnail URL of the new bookmark, will be archived')
      .optional()
      .nullable(),
    publishedAt: z
      .string()
      .datetime()
      .describe('Timestamp at which the bookmark was published')
      .optional()
      .nullable(),
    author: z
      .string()
      .min(1)
      .describe('Author for the new bookmark, cannot be empty')
      .optional()
      .nullable(),
  })
  .describe('Data to create a new bookmark') as unknown as ToZod<BookmarkCreate>

export const bookmarkDateFieldSchema = z.enum([
  'publishedAt',
  'createdAt',
  'updatedAt',
]) as unknown as ToZod<BookmarkDateField>

/**
 * @description Extended details of a bookmark
 */
export const bookmarkDetailsSchema = z
  .object({
    bookmark: z.lazy(() => bookmarkSchema).describe('Bookmark to a webpage'),
    tags: z
      .array(
        z
          .lazy(() => tagSchema)
          .describe('Tag that can be attached to subscriptions and bookmarks'),
      )
      .describe('Linked tags, present if requested')
      .optional(),
  })
  .describe(
    'Extended details of a bookmark',
  ) as unknown as ToZod<BookmarkDetails>

export const bookmarkFilterSchema = z.union([
  z.object({
    text: z.object({
      field: z.lazy(() => bookmarkTextFieldSchema),
      op: z.lazy(() => textOpSchema),
    }),
  }),
  z.object({
    date: z.object({
      field: z.lazy(() => bookmarkDateFieldSchema),
      op: z.lazy(() => dateOpSchema),
    }),
  }),
  z.object({
    and: z.array(z.lazy(() => bookmarkFilterSchema)),
  }),
  z.object({
    or: z.array(z.lazy(() => bookmarkFilterSchema)),
  }),
  z.object({
    not: z.lazy(() => bookmarkFilterSchema),
  }),
]) as unknown as ToZod<BookmarkFilter>

/**
 * @description Data to scrape a bookmark using
 */
export const bookmarkScrapeSchema = z
  .object({
    url: z.string().url().describe('URL of a webpage to scrape'),
  })
  .describe(
    'Data to scrape a bookmark using',
  ) as unknown as ToZod<BookmarkScrape>

/**
 * @description Scraped bookmark
 */
export const bookmarkScrapedSchema = z
  .object({
    link: z
      .string()
      .url()
      .describe('URL of the webpage of the scraped bookmark'),
    title: z.string().describe('Title of the scraped bookmark'),
    thumbnailUrl: z
      .string()
      .url()
      .describe('Thumbnail URL of the scraped bookmark')
      .nullable(),
    publishedAt: z
      .string()
      .datetime()
      .describe('Timestamp at which the scraped bookmark was published')
      .nullable(),
    author: z.string().describe('Author of the scraped bookmark').nullable(),
  })
  .describe('Scraped bookmark') as unknown as ToZod<BookmarkScraped>

export const bookmarkTextFieldSchema = z.enum([
  'link',
  'title',
  'author',
  'tag',
]) as unknown as ToZod<BookmarkTextField>

/**
 * @description Updates to make to an existing bookmark
 */
export const bookmarkUpdateSchema = z
  .object({
    title: z
      .string()
      .min(1)
      .describe(
        'Human-readable name for the bookmark to update, cannot be empty',
      )
      .optional(),
    thumbnailUrl: z
      .string()
      .url()
      .describe('Thumbnail URL of the bookmark to update, will be archived')
      .optional()
      .nullable(),
    publishedAt: z
      .string()
      .datetime()
      .describe('Timestamp at which the bookmark was published')
      .optional()
      .nullable(),
    author: z
      .string()
      .min(1)
      .describe('Author of the bookmark to update, cannot be empty')
      .optional()
      .nullable(),
  })
  .describe(
    'Updates to make to an existing bookmark',
  ) as unknown as ToZod<BookmarkUpdate>

export const booleanOpSchema = z.object({
  equals: z.boolean(),
}) as unknown as ToZod<BooleanOp>

export const codePayloadSchema = z.object({
  code: z.string(),
  state: z.string(),
}) as unknown as ToZod<CodePayload>

export const collectionSchema = z.object({
  id: z.string().uuid(),
  title: z.string(),
  filter: z.lazy(() => bookmarkFilterSchema),
  createdAt: z.string().datetime(),
  updatedAt: z.string().datetime(),
}) as unknown as ToZod<Collection>

export const collectionCreateSchema = z.object({
  title: z.string().min(1),
  filter: z.lazy(() => bookmarkFilterSchema),
}) as unknown as ToZod<CollectionCreate>

export const collectionUpdateSchema = z.object({
  title: z.string().min(1).optional(),
  filter: z.union([z.lazy(() => bookmarkFilterSchema), z.null()]).optional(),
}) as unknown as ToZod<CollectionUpdate>

/**
 * @description API config
 */
export const configSchema = z
  .object({
    server: z.lazy(() => serverConfigSchema).describe('API server config'),
    oidc: z
      .lazy(() => oidcConfigSchema)
      .describe('API OIDC config')
      .optional(),
    storage: z.lazy(() => storageConfigSchema).describe('API storage config'),
  })
  .describe('API config') as unknown as ToZod<Config>

export const dateOpSchema = z.union([
  z.object({
    before: z.string().datetime(),
  }),
  z.object({
    after: z.string().datetime(),
  }),
  z.object({
    between: z.object({
      start: z.string().datetime(),
      end: z.string().datetime(),
    }),
  }),
  z.object({
    inLast: z.number().int(),
  }),
]) as unknown as ToZod<DateOp>

/**
 * @description RSS feed
 */
export const feedSchema = z
  .object({
    id: z.string().uuid().describe('Unique identifier of the feed'),
    sourceUrl: z.string().url().describe('URL to scrape for feed updates'),
    link: z.string().url().describe('URL of the webpage the feed links to'),
    title: z.string().describe('Title of the feed'),
    description: z.string().describe('Description of the feed').nullable(),
    refreshedAt: z
      .string()
      .datetime()
      .describe('Timestamp at which the feed was refreshed')
      .nullable(),
    isCustom: z
      .boolean()
      .describe('Whether the feed was scraped from a custom plugin'),
  })
  .describe('RSS feed') as unknown as ToZod<Feed>

/**
 * @description Data to detect RSS feeds using
 */
export const feedDetectSchema = z
  .object({
    url: z.string().url().describe('URL of a webpage to detect RSS feeds on'),
  })
  .describe('Data to detect RSS feeds using') as unknown as ToZod<FeedDetect>

/**
 * @description Detected RSS feed
 */
export const feedDetectedSchema = z
  .object({
    url: z.string().url().describe('URL of the detected RSS feed'),
    title: z.string().describe('Title of the detected RSS feed'),
  })
  .describe('Detected RSS feed') as unknown as ToZod<FeedDetected>

/**
 * @description RSS feed entry
 */
export const feedEntrySchema = z
  .object({
    id: z.string().uuid().describe('Unique identifier of the feed entry'),
    link: z
      .string()
      .url()
      .describe('URL of the webpage the feed entry links to'),
    title: z.string().describe('Title of the feed entry'),
    publishedAt: z
      .string()
      .datetime()
      .describe('Timestamp at which the feed entry was published'),
    description: z
      .string()
      .describe('Description of the feed entry')
      .nullable(),
    author: z.string().describe('Author of the feed entry').nullable(),
    thumbnailUrl: z
      .string()
      .url()
      .describe('Thumbnail URL of the feed entry')
      .nullable(),
    feedId: z
      .string()
      .uuid()
      .describe('Unique identifier of the associated RSS feed'),
  })
  .describe('RSS feed entry') as unknown as ToZod<FeedEntry>

/**
 * @description Data to scrape an RSS feed using
 */
export const feedScrapeSchema = z
  .object({
    url: z.string().url().describe('URL of an RSS feed to scrape'),
  })
  .describe('Data to scrape an RSS feed using') as unknown as ToZod<FeedScrape>

/**
 * @description Action to link tags to a bookmark
 */
export const linkBookmarkTagsSchema = z
  .object({
    tagIds: z
      .array(z.string().uuid())
      .describe('Unique identifiers of the tags to link to the bookmark'),
  })
  .describe(
    'Action to link tags to a bookmark',
  ) as unknown as ToZod<LinkBookmarkTags>

/**
 * @description Action to link tags to a user subscription
 */
export const linkSubscriptionTagsSchema = z
  .object({
    tagIds: z
      .array(z.string().uuid())
      .describe('Unique identifiers of the tags to link to the subscription'),
  })
  .describe(
    'Action to link tags to a user subscription',
  ) as unknown as ToZod<LinkSubscriptionTags>

export const loginPayloadSchema = z.object({
  email: z.string().email(),
  password: z.string().min(1),
}) as unknown as ToZod<LoginPayload>

/**
 * @description API OIDC config
 */
export const oidcConfigSchema = z
  .object({
    signInText: z.string().describe('OIDC sign in button text'),
  })
  .describe('API OIDC config') as unknown as ToZod<OidcConfig>

/**
 * @description Paginated list of results
 */
export const paginatedApiKeySchema = z
  .object({
    items: z
      .array(
        z
          .object({
            id: z.string().uuid().describe('Unique identifier of the API key'),
            title: z.string().describe('Human-readable name of the API key'),
            preview: z
              .string()
              .describe(
                'Partial view of the API key value for identification purposes',
              ),
            createdAt: z
              .string()
              .datetime()
              .describe('Timestamp at which the API key was created'),
            updatedAt: z
              .string()
              .datetime()
              .describe('Timestamp at which the API key was last modified'),
          })
          .describe(
            "Long-lived token linked to a user's account. Useful for third party client apps to access a user's data. The full value is returned only once, on creation.",
          ),
      )
      .describe('Current set of results'),
    cursor: z
      .string()
      .describe('Pagination cursor, only present if more results are available')
      .optional(),
  })
  .describe('Paginated list of results') as unknown as ToZod<PaginatedApiKey>

/**
 * @description Paginated list of results
 */
export const paginatedBookmarkDetailsSchema = z
  .object({
    items: z
      .array(
        z
          .object({
            bookmark: z
              .lazy(() => bookmarkSchema)
              .describe('Bookmark to a webpage'),
            tags: z
              .array(
                z
                  .lazy(() => tagSchema)
                  .describe(
                    'Tag that can be attached to subscriptions and bookmarks',
                  ),
              )
              .describe('Linked tags, present if requested')
              .optional(),
          })
          .describe('Extended details of a bookmark'),
      )
      .describe('Current set of results'),
    cursor: z
      .string()
      .describe('Pagination cursor, only present if more results are available')
      .optional(),
  })
  .describe(
    'Paginated list of results',
  ) as unknown as ToZod<PaginatedBookmarkDetails>

/**
 * @description Paginated list of results
 */
export const paginatedCollectionSchema = z
  .object({
    items: z
      .array(
        z.object({
          id: z.string().uuid(),
          title: z.string(),
          filter: z.lazy(() => bookmarkFilterSchema),
          createdAt: z.string().datetime(),
          updatedAt: z.string().datetime(),
        }),
      )
      .describe('Current set of results'),
    cursor: z
      .string()
      .describe('Pagination cursor, only present if more results are available')
      .optional(),
  })
  .describe(
    'Paginated list of results',
  ) as unknown as ToZod<PaginatedCollection>

/**
 * @description Paginated list of results
 */
export const paginatedFeedEntrySchema = z
  .object({
    items: z
      .array(
        z
          .object({
            id: z
              .string()
              .uuid()
              .describe('Unique identifier of the feed entry'),
            link: z
              .string()
              .url()
              .describe('URL of the webpage the feed entry links to'),
            title: z.string().describe('Title of the feed entry'),
            publishedAt: z
              .string()
              .datetime()
              .describe('Timestamp at which the feed entry was published'),
            description: z
              .string()
              .describe('Description of the feed entry')
              .nullable(),
            author: z.string().describe('Author of the feed entry').nullable(),
            thumbnailUrl: z
              .string()
              .url()
              .describe('Thumbnail URL of the feed entry')
              .nullable(),
            feedId: z
              .string()
              .uuid()
              .describe('Unique identifier of the associated RSS feed'),
          })
          .describe('RSS feed entry'),
      )
      .describe('Current set of results'),
    cursor: z
      .string()
      .describe('Pagination cursor, only present if more results are available')
      .optional(),
  })
  .describe('Paginated list of results') as unknown as ToZod<PaginatedFeedEntry>

/**
 * @description Paginated list of results
 */
export const paginatedStreamSchema = z
  .object({
    items: z
      .array(
        z.object({
          id: z.string().uuid(),
          title: z.string(),
          filter: z.lazy(() => subscriptionEntryFilterSchema),
          createdAt: z.string().datetime(),
          updatedAt: z.string().datetime(),
        }),
      )
      .describe('Current set of results'),
    cursor: z
      .string()
      .describe('Pagination cursor, only present if more results are available')
      .optional(),
  })
  .describe('Paginated list of results') as unknown as ToZod<PaginatedStream>

/**
 * @description Paginated list of results
 */
export const paginatedSubscriptionDetailsSchema = z
  .object({
    items: z
      .array(
        z
          .object({
            subscription: z
              .lazy(() => subscriptionSchema)
              .describe('User subscription to an RSS feed'),
            feed: z
              .lazy(() => feedSchema)
              .describe('RSS feed')
              .optional(),
            tags: z
              .array(
                z
                  .lazy(() => tagSchema)
                  .describe(
                    'Tag that can be attached to subscriptions and bookmarks',
                  ),
              )
              .describe('Linked tags, present if requested')
              .optional(),
            unreadCount: z
              .number()
              .int()
              .describe(
                'Count of unread subscription entries associated with the subscription, present if requested',
              )
              .optional(),
          })
          .describe('Extended details of a user subscription'),
      )
      .describe('Current set of results'),
    cursor: z
      .string()
      .describe('Pagination cursor, only present if more results are available')
      .optional(),
  })
  .describe(
    'Paginated list of results',
  ) as unknown as ToZod<PaginatedSubscriptionDetails>

/**
 * @description Paginated list of results
 */
export const paginatedSubscriptionEntryDetailsSchema = z
  .object({
    items: z
      .array(
        z
          .object({
            subscriptionEntry: z
              .lazy(() => subscriptionEntrySchema)
              .describe(
                'Association of a RSS feed entry to a user subscription. The pairing of subscription ID and feed entry ID is unique.',
              ),
            feedEntry: z
              .lazy(() => feedEntrySchema)
              .describe('RSS feed entry')
              .optional(),
          })
          .describe('Extended details of a subscription entry'),
      )
      .describe('Current set of results'),
    cursor: z
      .string()
      .describe('Pagination cursor, only present if more results are available')
      .optional(),
  })
  .describe(
    'Paginated list of results',
  ) as unknown as ToZod<PaginatedSubscriptionEntryDetails>

/**
 * @description Paginated list of results
 */
export const paginatedTagDetailsSchema = z
  .object({
    items: z
      .array(
        z
          .object({
            tag: z
              .lazy(() => tagSchema)
              .describe(
                'Tag that can be attached to subscriptions and bookmarks',
              ),
            subscriptionCount: z
              .number()
              .int()
              .describe(
                'Count of subscriptions the tag is linked to, present if requested',
              )
              .optional(),
            bookmarkCount: z
              .number()
              .int()
              .describe(
                'Count of bookmarks the tag is linked to, present if requested',
              )
              .optional(),
          })
          .describe('Extended details of a tag'),
      )
      .describe('Current set of results'),
    cursor: z
      .string()
      .describe('Pagination cursor, only present if more results are available')
      .optional(),
  })
  .describe(
    'Paginated list of results',
  ) as unknown as ToZod<PaginatedTagDetails>

export const registerPayloadSchema = z.object({
  email: z.string().email(),
  password: z.string().min(1),
  displayName: z.string().min(1).optional().nullable(),
  imageUrl: z.string().url().optional().nullable(),
}) as unknown as ToZod<RegisterPayload>

/**
 * @description API server config
 */
export const serverConfigSchema = z
  .object({
    baseUrl: z.string().url().describe('Server base URL'),
  })
  .describe('API server config') as unknown as ToZod<ServerConfig>

/**
 * @description API storage config
 */
export const storageConfigSchema = z
  .object({
    imageBaseUrl: z
      .string()
      .url()
      .describe('Base URL for the image storage server'),
  })
  .describe('API storage config') as unknown as ToZod<StorageConfig>

export const streamSchema = z.object({
  id: z.string().uuid(),
  title: z.string(),
  filter: z.lazy(() => subscriptionEntryFilterSchema),
  createdAt: z.string().datetime(),
  updatedAt: z.string().datetime(),
}) as unknown as ToZod<Stream>

export const streamCreateSchema = z.object({
  title: z.string().min(1),
  filter: z.lazy(() => subscriptionEntryFilterSchema),
}) as unknown as ToZod<StreamCreate>

export const streamUpdateSchema = z.object({
  title: z.string().min(1).optional(),
  filter: z
    .union([z.lazy(() => subscriptionEntryFilterSchema), z.null()])
    .optional(),
}) as unknown as ToZod<StreamUpdate>

/**
 * @description User subscription to an RSS feed
 */
export const subscriptionSchema = z
  .object({
    id: z.string().uuid().describe('Unique identifier of the subscription'),
    title: z.string().describe('Human-readable name of the subscription'),
    description: z
      .string()
      .describe('Description of the subscription')
      .nullable(),
    feedId: z
      .string()
      .uuid()
      .describe('Unique identifier of the associated RSS feed'),
    createdAt: z
      .string()
      .datetime()
      .describe('Timestamp at which the subscription was created'),
    updatedAt: z
      .string()
      .datetime()
      .describe('Timestamp at which the subscription was modified'),
  })
  .describe(
    'User subscription to an RSS feed',
  ) as unknown as ToZod<Subscription>

/**
 * @description Data to create a new user subscription
 */
export const subscriptionCreateSchema = z
  .object({
    title: z
      .string()
      .min(1)
      .describe(
        'Human-readable name for the new subscription, cannot be empty',
      ),
    description: z
      .string()
      .min(1)
      .describe('Description for the new subscription, cannot be empty')
      .optional()
      .nullable(),
    feedId: z
      .string()
      .uuid()
      .describe('Unique identifier of the associated RSS feed'),
  })
  .describe(
    'Data to create a new user subscription',
  ) as unknown as ToZod<SubscriptionCreate>

/**
 * @description Extended details of a user subscription
 */
export const subscriptionDetailsSchema = z
  .object({
    subscription: z
      .lazy(() => subscriptionSchema)
      .describe('User subscription to an RSS feed'),
    feed: z
      .lazy(() => feedSchema)
      .describe('RSS feed')
      .optional(),
    tags: z
      .array(
        z
          .lazy(() => tagSchema)
          .describe('Tag that can be attached to subscriptions and bookmarks'),
      )
      .describe('Linked tags, present if requested')
      .optional(),
    unreadCount: z
      .number()
      .int()
      .describe(
        'Count of unread subscription entries associated with the subscription, present if requested',
      )
      .optional(),
  })
  .describe(
    'Extended details of a user subscription',
  ) as unknown as ToZod<SubscriptionDetails>

/**
 * @description Association of a RSS feed entry to a user subscription. The pairing of subscription ID and feed entry ID is unique.
 */
export const subscriptionEntrySchema = z
  .object({
    subscriptionId: z
      .string()
      .uuid()
      .describe('Unique identifier of the associated subscription'),
    feedEntryId: z
      .string()
      .uuid()
      .describe('Unique identifier of the associated feed entry'),
    hasRead: z
      .boolean()
      .describe('Whether the subscription entry has been marked as read'),
    readAt: z
      .string()
      .datetime()
      .describe(
        'Timestamp at which the subscription entry has been marked as read',
      )
      .optional()
      .nullable(),
  })
  .describe(
    'Association of a RSS feed entry to a user subscription. The pairing of subscription ID and feed entry ID is unique.',
  ) as unknown as ToZod<SubscriptionEntry>

export const subscriptionEntryBooleanFieldSchema = z.enum([
  'hasRead',
]) as unknown as ToZod<SubscriptionEntryBooleanField>

export const subscriptionEntryDateFieldSchema = z.enum([
  'publishedAt',
]) as unknown as ToZod<SubscriptionEntryDateField>

/**
 * @description Extended details of a subscription entry
 */
export const subscriptionEntryDetailsSchema = z
  .object({
    subscriptionEntry: z
      .lazy(() => subscriptionEntrySchema)
      .describe(
        'Association of a RSS feed entry to a user subscription. The pairing of subscription ID and feed entry ID is unique.',
      ),
    feedEntry: z
      .lazy(() => feedEntrySchema)
      .describe('RSS feed entry')
      .optional(),
  })
  .describe(
    'Extended details of a subscription entry',
  ) as unknown as ToZod<SubscriptionEntryDetails>

export const subscriptionEntryFilterSchema = z.union([
  z.object({
    text: z.object({
      field: z.lazy(() => subscriptionEntryTextFieldSchema),
      op: z.lazy(() => textOpSchema),
    }),
  }),
  z.object({
    boolean: z.object({
      field: z.lazy(() => subscriptionEntryBooleanFieldSchema),
      op: z.lazy(() => booleanOpSchema),
    }),
  }),
  z.object({
    date: z.object({
      field: z.lazy(() => subscriptionEntryDateFieldSchema),
      op: z.lazy(() => dateOpSchema),
    }),
  }),
  z.object({
    and: z.array(z.lazy(() => subscriptionEntryFilterSchema)),
  }),
  z.object({
    or: z.array(z.lazy(() => subscriptionEntryFilterSchema)),
  }),
  z.object({
    not: z.lazy(() => subscriptionEntryFilterSchema),
  }),
]) as unknown as ToZod<SubscriptionEntryFilter>

export const subscriptionEntryTextFieldSchema = z.enum([
  'link',
  'title',
  'description',
  'author',
  'tag',
]) as unknown as ToZod<SubscriptionEntryTextField>

/**
 * @description Updates to make to an existing subscription
 */
export const subscriptionUpdateSchema = z
  .object({
    title: z
      .string()
      .min(1)
      .describe(
        'Human-readable name for the subscription to update, cannot be empty',
      )
      .optional()
      .nullable(),
    description: z
      .string()
      .min(1)
      .describe('Description for the subscription to update, cannot be empty')
      .optional()
      .nullable(),
  })
  .describe(
    'Updates to make to an existing subscription',
  ) as unknown as ToZod<SubscriptionUpdate>

/**
 * @description Tag that can be attached to subscriptions and bookmarks
 */
export const tagSchema = z
  .object({
    id: z.string().uuid().describe('Unique identifier of the tag'),
    title: z
      .string()
      .describe('Human-readable name of the tag, unique per user'),
    createdAt: z
      .string()
      .datetime()
      .describe('Timestamp at which the tag was created'),
    updatedAt: z
      .string()
      .datetime()
      .describe('Timestamp at which the tag was last modified'),
  })
  .describe(
    'Tag that can be attached to subscriptions and bookmarks',
  ) as unknown as ToZod<Tag>

/**
 * @description Data to create a new tag
 */
export const tagCreateSchema = z
  .object({
    title: z
      .string()
      .min(1)
      .describe('Human-readable name for the new tag, cannot be empty'),
  })
  .describe('Data to create a new tag') as unknown as ToZod<TagCreate>

/**
 * @description Extended details of a tag
 */
export const tagDetailsSchema = z
  .object({
    tag: z
      .lazy(() => tagSchema)
      .describe('Tag that can be attached to subscriptions and bookmarks'),
    subscriptionCount: z
      .number()
      .int()
      .describe(
        'Count of subscriptions the tag is linked to, present if requested',
      )
      .optional(),
    bookmarkCount: z
      .number()
      .int()
      .describe('Count of bookmarks the tag is linked to, present if requested')
      .optional(),
  })
  .describe('Extended details of a tag') as unknown as ToZod<TagDetails>

/**
 * @description Updates to make to an existing tag
 */
export const tagUpdateSchema = z
  .object({
    title: z
      .string()
      .min(1)
      .describe('Human-readable name for the tag to update, cannot be empty')
      .optional(),
  })
  .describe('Updates to make to an existing tag') as unknown as ToZod<TagUpdate>

export const textOpSchema = z.union([
  z.object({
    equals: z.string(),
  }),
  z.object({
    contains: z.string(),
  }),
  z.object({
    startsWith: z.string(),
  }),
  z.object({
    endsWith: z.string(),
  }),
]) as unknown as ToZod<TextOp>

export const tokenDataSchema = z.object({
  accessToken: z.string(),
  tokenType: z.lazy(() => tokenTypeSchema),
  expiresIn: z.number().int(),
}) as unknown as ToZod<TokenData>

export const tokenTypeSchema = z.enum(['bearer']) as unknown as ToZod<TokenType>

/**
 * @description User account. Supports email/password and OIDC.
 */
export const userSchema = z
  .object({
    id: z.string().uuid().describe('Unique identifier of the user'),
    email: z.string().email().describe('Email address of the user'),
    displayName: z.string().nullable(),
    imageUrl: z.string().url().nullable(),
    createdAt: z
      .string()
      .datetime()
      .describe('Timestamp at which the user was created'),
    updatedAt: z
      .string()
      .datetime()
      .describe('Timestamp at which the user was last modified'),
  })
  .describe(
    'User account. Supports email/password and OIDC.',
  ) as unknown as ToZod<User>

export const listApiKeysQueryParamsSchema = z
  .object({
    cursor: z.string().describe('Pagination cursor').optional(),
  })
  .optional() as unknown as ToZod<ListApiKeysQueryParams>

/**
 * @description Paginated list of API keys
 */
export const listApiKeys200Schema = z
  .lazy(() => paginatedApiKeySchema)
  .describe('Paginated list of results') as unknown as ToZod<ListApiKeys200>

/**
 * @description User not authenticated
 */
export const listApiKeys401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ListApiKeys401>

/**
 * @description Unknown error
 */
export const listApiKeysErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ListApiKeysError>

export const listApiKeysQueryResponseSchema = z.lazy(
  () => listApiKeys200Schema,
) as unknown as ToZod<ListApiKeysQueryResponse>

/**
 * @description Created API key
 */
export const createApiKey201Schema = z
  .lazy(() => apiKeyCreatedSchema)
  .describe(
    'Newly created API key, containing the full value. This value must be saved in a safe location, as subsequent GET requests will only show a preview.',
  ) as unknown as ToZod<CreateApiKey201>

/**
 * @description User not authenticated
 */
export const createApiKey401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateApiKey401>

/**
 * @description Invalid input
 */
export const createApiKey422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateApiKey422>

/**
 * @description Unknown error
 */
export const createApiKeyErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateApiKeyError>

export const createApiKeyMutationRequestSchema = z
  .lazy(() => apiKeyCreateSchema)
  .describe(
    'Data to create a new API key',
  ) as unknown as ToZod<CreateApiKeyMutationRequest>

export const createApiKeyMutationResponseSchema = z.lazy(
  () => createApiKey201Schema,
) as unknown as ToZod<CreateApiKeyMutationResponse>

export const getApiKeyPathParamsSchema = z.object({
  id: z.string().uuid().describe('Unique identifier of the resource'),
}) as unknown as ToZod<GetApiKeyPathParams>

/**
 * @description API key by ID
 */
export const getApiKey200Schema = z
  .lazy(() => apiKeySchema)
  .describe(
    "Long-lived token linked to a user's account. Useful for third party client apps to access a user's data. The full value is returned only once, on creation.",
  ) as unknown as ToZod<GetApiKey200>

/**
 * @description User not authenticated
 */
export const getApiKey401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetApiKey401>

/**
 * @description User not authorized
 */
export const getApiKey403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetApiKey403>

/**
 * @description API key not found
 */
export const getApiKey404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetApiKey404>

/**
 * @description Unknown error
 */
export const getApiKeyErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetApiKeyError>

export const getApiKeyQueryResponseSchema = z.lazy(
  () => getApiKey200Schema,
) as unknown as ToZod<GetApiKeyQueryResponse>

export const deleteApiKeyPathParamsSchema = z.object({
  id: z.string().uuid().describe('Unique identifier of the resource'),
}) as unknown as ToZod<DeleteApiKeyPathParams>

/**
 * @description Successfully deleted API key
 */
export const deleteApiKey204Schema =
  z.any() as unknown as ToZod<DeleteApiKey204>

/**
 * @description User not authenticated
 */
export const deleteApiKey401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteApiKey401>

/**
 * @description User not authorized
 */
export const deleteApiKey403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteApiKey403>

/**
 * @description API key not found
 */
export const deleteApiKey404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteApiKey404>

/**
 * @description Unknown error
 */
export const deleteApiKeyErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteApiKeyError>

export const deleteApiKeyMutationResponseSchema = z.lazy(
  () => deleteApiKey204Schema,
) as unknown as ToZod<DeleteApiKeyMutationResponse>

export const updateApiKeyPathParamsSchema = z.object({
  id: z.string().uuid().describe('Unique identifier of the resource'),
}) as unknown as ToZod<UpdateApiKeyPathParams>

/**
 * @description Updated API key
 */
export const updateApiKey200Schema = z
  .lazy(() => apiKeySchema)
  .describe(
    "Long-lived token linked to a user's account. Useful for third party client apps to access a user's data. The full value is returned only once, on creation.",
  ) as unknown as ToZod<UpdateApiKey200>

/**
 * @description User not authenticated
 */
export const updateApiKey401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateApiKey401>

/**
 * @description User not authorized
 */
export const updateApiKey403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateApiKey403>

/**
 * @description API key not found
 */
export const updateApiKey404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateApiKey404>

/**
 * @description Invalid input
 */
export const updateApiKey422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateApiKey422>

/**
 * @description Unknown error
 */
export const updateApiKeyErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateApiKeyError>

export const updateApiKeyMutationRequestSchema = z
  .lazy(() => apiKeyUpdateSchema)
  .describe(
    'Details regarding the existing API key to update',
  ) as unknown as ToZod<UpdateApiKeyMutationRequest>

export const updateApiKeyMutationResponseSchema = z.lazy(
  () => updateApiKey200Schema,
) as unknown as ToZod<UpdateApiKeyMutationResponse>

/**
 * @description Created user
 */
export const registerUser200Schema = z
  .lazy(() => userSchema)
  .describe(
    'User account. Supports email/password and OIDC.',
  ) as unknown as ToZod<RegisterUser200>

/**
 * @description Email already registered
 */
export const registerUser409Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<RegisterUser409>

/**
 * @description Invalid input
 */
export const registerUser422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<RegisterUser422>

/**
 * @description Unknown error
 */
export const registerUserErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<RegisterUserError>

export const registerUserMutationRequestSchema = z.lazy(
  () => registerPayloadSchema,
) as unknown as ToZod<RegisterUserMutationRequest>

export const registerUserMutationResponseSchema = z.lazy(
  () => registerUser200Schema,
) as unknown as ToZod<RegisterUserMutationResponse>

/**
 * @description Access token for autheticated user
 */
export const loginUser200Schema = z.lazy(
  () => tokenDataSchema,
) as unknown as ToZod<LoginUser200>

/**
 * @description Bad credentials
 */
export const loginUser401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<LoginUser401>

/**
 * @description Invalid input
 */
export const loginUser422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<LoginUser422>

/**
 * @description Unknown error
 */
export const loginUserErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<LoginUserError>

export const loginUserMutationRequestSchema = z.lazy(
  () => loginPayloadSchema,
) as unknown as ToZod<LoginUserMutationRequest>

export const loginUserMutationResponseSchema = z.lazy(
  () => loginUser200Schema,
) as unknown as ToZod<LoginUserMutationResponse>

/**
 * @description Active user
 */
export const getActiveUser200Schema = z
  .lazy(() => userSchema)
  .describe(
    'User account. Supports email/password and OIDC.',
  ) as unknown as ToZod<GetActiveUser200>

/**
 * @description User not authenticated
 */
export const getActiveUser401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetActiveUser401>

/**
 * @description Unknown error
 */
export const getActiveUserErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetActiveUserError>

export const getActiveUserQueryResponseSchema = z.lazy(
  () => getActiveUser200Schema,
) as unknown as ToZod<GetActiveUserQueryResponse>

/**
 * @description Access token for autheticated user
 */
export const refreshToken200Schema = z.lazy(
  () => tokenDataSchema,
) as unknown as ToZod<RefreshToken200>

/**
 * @description User not authenticated
 */
export const refreshToken401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<RefreshToken401>

/**
 * @description Invalid input
 */
export const refreshToken422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<RefreshToken422>

/**
 * @description Unknown error
 */
export const refreshTokenErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<RefreshTokenError>

export const refreshTokenMutationResponseSchema = z.lazy(
  () => refreshToken200Schema,
) as unknown as ToZod<RefreshTokenMutationResponse>

/**
 * @description Successfully logged out
 */
export const logoutUser204Schema = z.any() as unknown as ToZod<LogoutUser204>

/**
 * @description User not authenticated
 */
export const logoutUser401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<LogoutUser401>

/**
 * @description Unknown error
 */
export const logoutUserErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<LogoutUserError>

export const logoutUserMutationResponseSchema = z.lazy(
  () => logoutUser204Schema,
) as unknown as ToZod<LogoutUserMutationResponse>

/**
 * @description Redirect to OIDC authorization endpoint
 */
export const redirectOidc303Schema =
  z.any() as unknown as ToZod<RedirectOidc303>

/**
 * @description Unknown error
 */
export const redirectOidcErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<RedirectOidcError>

export const redirectOidcQueryResponseSchema =
  z.any() as unknown as ToZod<RedirectOidcQueryResponse>

/**
 * @description Access token for autheticated user
 */
export const exchangeCode200Schema = z.lazy(
  () => tokenDataSchema,
) as unknown as ToZod<ExchangeCode200>

/**
 * @description Missing OAuth cookies
 */
export const exchangeCode409Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ExchangeCode409>

/**
 * @description Invalid input
 */
export const exchangeCode422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ExchangeCode422>

/**
 * @description Unknown error
 */
export const exchangeCodeErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ExchangeCodeError>

export const exchangeCodeMutationRequestSchema = z.lazy(
  () => codePayloadSchema,
) as unknown as ToZod<ExchangeCodeMutationRequest>

export const exchangeCodeMutationResponseSchema = z.lazy(
  () => exchangeCode200Schema,
) as unknown as ToZod<ExchangeCodeMutationResponse>

/**
 * @description Successfully started import
 */
export const importBackup204Schema =
  z.any() as unknown as ToZod<ImportBackup204>

/**
 * @description User not authenticated
 */
export const importBackup401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ImportBackup401>

/**
 * @description Unknown error
 */
export const importBackupErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ImportBackupError>

export const importBackupMutationRequestSchema = z.array(
  z.number().int().min(0),
) as unknown as ToZod<ImportBackupMutationRequest>

export const importBackupMutationResponseSchema = z.lazy(
  () => importBackup204Schema,
) as unknown as ToZod<ImportBackupMutationResponse>

/**
 * @description JSON backup file
 */
export const exportBackup200Schema = z.array(
  z.number().int().min(0),
) as unknown as ToZod<ExportBackup200>

/**
 * @description User not authenticated
 */
export const exportBackup401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ExportBackup401>

/**
 * @description Unknown error
 */
export const exportBackupErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ExportBackupError>

export const exportBackupMutationResponseSchema = z.lazy(
  () => exportBackup200Schema,
) as unknown as ToZod<ExportBackupMutationResponse>

export const listBookmarksQueryParamsSchema = z
  .object({
    collectionId: z
      .string()
      .uuid()
      .describe(
        'Filter by the ID of a collection whose filters may apply to the bookmark',
      )
      .optional(),
    filterByTags: z
      .boolean()
      .describe('Whether to filter by tags linked to the bookmark')
      .optional(),
    'tag[]': z
      .array(z.string().uuid())
      .describe('Filter by the IDs of the tags linked to the bookmark')
      .optional(),
    cursor: z.string().describe('Pagination cursor').optional(),
    withTags: z
      .boolean()
      .describe('Whether to include the tags linked to the bookmark')
      .optional(),
  })
  .optional() as unknown as ToZod<ListBookmarksQueryParams>

/**
 * @description Paginated list of bookmarks
 */
export const listBookmarks200Schema = z
  .lazy(() => paginatedBookmarkDetailsSchema)
  .describe('Paginated list of results') as unknown as ToZod<ListBookmarks200>

/**
 * @description User not authenticated
 */
export const listBookmarks401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ListBookmarks401>

/**
 * @description Unknown error
 */
export const listBookmarksErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ListBookmarksError>

export const listBookmarksQueryResponseSchema = z.lazy(
  () => listBookmarks200Schema,
) as unknown as ToZod<ListBookmarksQueryResponse>

/**
 * @description Created bookmark
 */
export const createBookmark201Schema = z
  .lazy(() => bookmarkSchema)
  .describe('Bookmark to a webpage') as unknown as ToZod<CreateBookmark201>

/**
 * @description User not authenticated
 */
export const createBookmark401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateBookmark401>

/**
 * @description Bookmark already exists
 */
export const createBookmark409Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateBookmark409>

/**
 * @description Invalid input
 */
export const createBookmark422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateBookmark422>

/**
 * @description Unknown error
 */
export const createBookmarkErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateBookmarkError>

export const createBookmarkMutationRequestSchema = z
  .lazy(() => bookmarkCreateSchema)
  .describe(
    'Data to create a new bookmark',
  ) as unknown as ToZod<CreateBookmarkMutationRequest>

export const createBookmarkMutationResponseSchema = z.lazy(
  () => createBookmark201Schema,
) as unknown as ToZod<CreateBookmarkMutationResponse>

export const getBookmarkPathParamsSchema = z.object({
  id: z.string().uuid().describe('Unique identifier of the resource'),
}) as unknown as ToZod<GetBookmarkPathParams>

export const getBookmarkQueryParamsSchema = z
  .object({
    withTags: z
      .boolean()
      .describe('Whether to include the tags linked to the bookmark')
      .optional(),
  })
  .optional() as unknown as ToZod<GetBookmarkQueryParams>

/**
 * @description Bookmark by ID
 */
export const getBookmark200Schema = z
  .lazy(() => bookmarkDetailsSchema)
  .describe(
    'Extended details of a bookmark',
  ) as unknown as ToZod<GetBookmark200>

/**
 * @description User not authenticated
 */
export const getBookmark401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetBookmark401>

/**
 * @description User not authorized
 */
export const getBookmark403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetBookmark403>

/**
 * @description Bookmark not found
 */
export const getBookmark404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetBookmark404>

/**
 * @description Unknown error
 */
export const getBookmarkErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetBookmarkError>

export const getBookmarkQueryResponseSchema = z.lazy(
  () => getBookmark200Schema,
) as unknown as ToZod<GetBookmarkQueryResponse>

export const deleteBookmarkPathParamsSchema = z.object({
  id: z.string().uuid().describe('Unique identifier of the resource'),
}) as unknown as ToZod<DeleteBookmarkPathParams>

/**
 * @description Successfully deleted bookmark
 */
export const deleteBookmark204Schema =
  z.any() as unknown as ToZod<DeleteBookmark204>

/**
 * @description User not authenticated
 */
export const deleteBookmark401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteBookmark401>

/**
 * @description User not authorized
 */
export const deleteBookmark403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteBookmark403>

/**
 * @description Bookmark not found
 */
export const deleteBookmark404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteBookmark404>

/**
 * @description Unknown error
 */
export const deleteBookmarkErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteBookmarkError>

export const deleteBookmarkMutationResponseSchema = z.lazy(
  () => deleteBookmark204Schema,
) as unknown as ToZod<DeleteBookmarkMutationResponse>

export const updateBookmarkPathParamsSchema = z.object({
  id: z.string().uuid().describe('Unique identifier of the resource'),
}) as unknown as ToZod<UpdateBookmarkPathParams>

/**
 * @description Updated bookmark
 */
export const updateBookmark200Schema = z
  .lazy(() => bookmarkSchema)
  .describe('Bookmark to a webpage') as unknown as ToZod<UpdateBookmark200>

/**
 * @description User not authenticated
 */
export const updateBookmark401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateBookmark401>

/**
 * @description User not authorized
 */
export const updateBookmark403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateBookmark403>

/**
 * @description Bookmark not found
 */
export const updateBookmark404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateBookmark404>

/**
 * @description Invalid input
 */
export const updateBookmark422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateBookmark422>

/**
 * @description Unknown error
 */
export const updateBookmarkErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateBookmarkError>

export const updateBookmarkMutationRequestSchema = z
  .lazy(() => bookmarkUpdateSchema)
  .describe(
    'Updates to make to an existing bookmark',
  ) as unknown as ToZod<UpdateBookmarkMutationRequest>

export const updateBookmarkMutationResponseSchema = z.lazy(
  () => updateBookmark200Schema,
) as unknown as ToZod<UpdateBookmarkMutationResponse>

export const linkBookmarkTagsPathParamsSchema = z.object({
  id: z.string().uuid().describe('Unique identifier of the resource'),
}) as unknown as ToZod<LinkBookmarkTagsPathParams>

/**
 * @description Successfully linked tags
 */
export const linkBookmarkTags204Schema =
  z.any() as unknown as ToZod<LinkBookmarkTags204>

/**
 * @description User not authenticated
 */
export const linkBookmarkTags401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<LinkBookmarkTags401>

/**
 * @description User not authorized
 */
export const linkBookmarkTags403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<LinkBookmarkTags403>

/**
 * @description Bookmark not found
 */
export const linkBookmarkTags404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<LinkBookmarkTags404>

/**
 * @description Invalid input
 */
export const linkBookmarkTags422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<LinkBookmarkTags422>

/**
 * @description Unknown error
 */
export const linkBookmarkTagsErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<LinkBookmarkTagsError>

export const linkBookmarkTagsMutationRequestSchema = z
  .lazy(() => linkBookmarkTagsSchema)
  .describe(
    'Action to link tags to a bookmark',
  ) as unknown as ToZod<LinkBookmarkTagsMutationRequest>

export const linkBookmarkTagsMutationResponseSchema = z.lazy(
  () => linkBookmarkTags204Schema,
) as unknown as ToZod<LinkBookmarkTagsMutationResponse>

/**
 * @description Scraped bookmark
 */
export const scrapeBookmark201Schema = z
  .lazy(() => bookmarkScrapedSchema)
  .describe('Scraped bookmark') as unknown as ToZod<ScrapeBookmark201>

/**
 * @description User not authenticated
 */
export const scrapeBookmark401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ScrapeBookmark401>

/**
 * @description Invalid input
 */
export const scrapeBookmark422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ScrapeBookmark422>

/**
 * @description Failed to fetch data
 */
export const scrapeBookmark502Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ScrapeBookmark502>

/**
 * @description Unknown error
 */
export const scrapeBookmarkErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ScrapeBookmarkError>

export const scrapeBookmarkMutationRequestSchema = z
  .lazy(() => bookmarkScrapeSchema)
  .describe(
    'Data to scrape a bookmark using',
  ) as unknown as ToZod<ScrapeBookmarkMutationRequest>

export const scrapeBookmarkMutationResponseSchema = z.lazy(
  () => scrapeBookmark201Schema,
) as unknown as ToZod<ScrapeBookmarkMutationResponse>

/**
 * @description Successfully started import
 */
export const importBookmarks204Schema =
  z.any() as unknown as ToZod<ImportBookmarks204>

/**
 * @description User not authenticated
 */
export const importBookmarks401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ImportBookmarks401>

/**
 * @description Unknown error
 */
export const importBookmarksErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ImportBookmarksError>

export const importBookmarksMutationRequestSchema = z.array(
  z.number().int().min(0),
) as unknown as ToZod<ImportBookmarksMutationRequest>

export const importBookmarksMutationResponseSchema = z.lazy(
  () => importBookmarks204Schema,
) as unknown as ToZod<ImportBookmarksMutationResponse>

/**
 * @description Netscape bookmarks file
 */
export const exportBookmarks200Schema = z.array(
  z.number().int().min(0),
) as unknown as ToZod<ExportBookmarks200>

/**
 * @description User not authenticated
 */
export const exportBookmarks401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ExportBookmarks401>

/**
 * @description Unknown error
 */
export const exportBookmarksErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ExportBookmarksError>

export const exportBookmarksMutationResponseSchema = z.lazy(
  () => exportBookmarks200Schema,
) as unknown as ToZod<ExportBookmarksMutationResponse>

export const listCollectionsQueryParamsSchema = z
  .object({
    cursor: z.string().describe('Pagination cursor').optional(),
  })
  .optional() as unknown as ToZod<ListCollectionsQueryParams>

/**
 * @description Paginated list of collections
 */
export const listCollections200Schema = z
  .lazy(() => paginatedCollectionSchema)
  .describe('Paginated list of results') as unknown as ToZod<ListCollections200>

/**
 * @description User not authenticated
 */
export const listCollections401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ListCollections401>

/**
 * @description Unknown error
 */
export const listCollectionsErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ListCollectionsError>

export const listCollectionsQueryResponseSchema = z.lazy(
  () => listCollections200Schema,
) as unknown as ToZod<ListCollectionsQueryResponse>

/**
 * @description Created collection
 */
export const createCollection201Schema = z.lazy(
  () => collectionSchema,
) as unknown as ToZod<CreateCollection201>

/**
 * @description User not authenticated
 */
export const createCollection401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateCollection401>

/**
 * @description Collection already exists
 */
export const createCollection409Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateCollection409>

/**
 * @description Invalid input
 */
export const createCollection422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateCollection422>

/**
 * @description Unknown error
 */
export const createCollectionErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateCollectionError>

export const createCollectionMutationRequestSchema = z.lazy(
  () => collectionCreateSchema,
) as unknown as ToZod<CreateCollectionMutationRequest>

export const createCollectionMutationResponseSchema = z.lazy(
  () => createCollection201Schema,
) as unknown as ToZod<CreateCollectionMutationResponse>

export const getCollectionPathParamsSchema = z.object({
  id: z.string().uuid().describe('Unique identifier of the resource'),
}) as unknown as ToZod<GetCollectionPathParams>

/**
 * @description Collection by ID
 */
export const getCollection200Schema = z.lazy(
  () => collectionSchema,
) as unknown as ToZod<GetCollection200>

/**
 * @description User not authenticated
 */
export const getCollection401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetCollection401>

/**
 * @description User not authorized
 */
export const getCollection403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetCollection403>

/**
 * @description Collection not found
 */
export const getCollection404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetCollection404>

/**
 * @description Unknown error
 */
export const getCollectionErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetCollectionError>

export const getCollectionQueryResponseSchema = z.lazy(
  () => getCollection200Schema,
) as unknown as ToZod<GetCollectionQueryResponse>

export const deleteCollectionPathParamsSchema = z.object({
  id: z.string().uuid().describe('Unique identifier of the resource'),
}) as unknown as ToZod<DeleteCollectionPathParams>

/**
 * @description Successfully deleted collection
 */
export const deleteCollection204Schema =
  z.any() as unknown as ToZod<DeleteCollection204>

/**
 * @description User not authenticated
 */
export const deleteCollection401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteCollection401>

/**
 * @description User not authorized
 */
export const deleteCollection403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteCollection403>

/**
 * @description Collection not found
 */
export const deleteCollection404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteCollection404>

/**
 * @description Unknown error
 */
export const deleteCollectionErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteCollectionError>

export const deleteCollectionMutationResponseSchema = z.lazy(
  () => deleteCollection204Schema,
) as unknown as ToZod<DeleteCollectionMutationResponse>

export const updateCollectionPathParamsSchema = z.object({
  id: z.string().uuid().describe('Unique identifier of the resource'),
}) as unknown as ToZod<UpdateCollectionPathParams>

/**
 * @description Updated collection
 */
export const updateCollection200Schema = z.lazy(
  () => collectionSchema,
) as unknown as ToZod<UpdateCollection200>

/**
 * @description User not authenticated
 */
export const updateCollection401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateCollection401>

/**
 * @description User not authorized
 */
export const updateCollection403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateCollection403>

/**
 * @description Collection not found
 */
export const updateCollection404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateCollection404>

/**
 * @description Invalid input
 */
export const updateCollection422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateCollection422>

/**
 * @description Unknown error
 */
export const updateCollectionErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateCollectionError>

export const updateCollectionMutationRequestSchema = z.lazy(
  () => collectionUpdateSchema,
) as unknown as ToZod<UpdateCollectionMutationRequest>

export const updateCollectionMutationResponseSchema = z.lazy(
  () => updateCollection200Schema,
) as unknown as ToZod<UpdateCollectionMutationResponse>

/**
 * @description API config
 */
export const getConfig200Schema = z
  .lazy(() => configSchema)
  .describe('API config') as unknown as ToZod<GetConfig200>

export const getConfigQueryResponseSchema = z.lazy(
  () => getConfig200Schema,
) as unknown as ToZod<GetConfigQueryResponse>

export const listFeedEntriesQueryParamsSchema = z
  .object({
    feedId: z
      .string()
      .uuid()
      .describe('Filter by the ID of the associated RSS feed')
      .optional(),
    cursor: z.string().describe('Pagination cursor').optional(),
  })
  .optional() as unknown as ToZod<ListFeedEntriesQueryParams>

/**
 * @description Paginated list of feed entries
 */
export const listFeedEntries200Schema = z
  .lazy(() => paginatedFeedEntrySchema)
  .describe('Paginated list of results') as unknown as ToZod<ListFeedEntries200>

/**
 * @description User not authenticated
 */
export const listFeedEntries401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ListFeedEntries401>

/**
 * @description Unknown error
 */
export const listFeedEntriesErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ListFeedEntriesError>

export const listFeedEntriesQueryResponseSchema = z.lazy(
  () => listFeedEntries200Schema,
) as unknown as ToZod<ListFeedEntriesQueryResponse>

export const getFeedEntryPathParamsSchema = z.object({
  id: z.string().uuid().describe('Unique identifier of the resource'),
}) as unknown as ToZod<GetFeedEntryPathParams>

/**
 * @description Feed entry by ID
 */
export const getFeedEntry200Schema = z
  .lazy(() => feedEntrySchema)
  .describe('RSS feed entry') as unknown as ToZod<GetFeedEntry200>

/**
 * @description User not authenticated
 */
export const getFeedEntry401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetFeedEntry401>

/**
 * @description User not authorized
 */
export const getFeedEntry403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetFeedEntry403>

/**
 * @description Feed entry not found
 */
export const getFeedEntry404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetFeedEntry404>

/**
 * @description Unknown error
 */
export const getFeedEntryErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetFeedEntryError>

export const getFeedEntryQueryResponseSchema = z.lazy(
  () => getFeedEntry200Schema,
) as unknown as ToZod<GetFeedEntryQueryResponse>

/**
 * @description List of detected feeds
 */
export const detectFeeds201Schema = z.array(
  z.lazy(() => feedDetectedSchema).describe('Detected RSS feed'),
) as unknown as ToZod<DetectFeeds201>

/**
 * @description User not authenticated
 */
export const detectFeeds401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DetectFeeds401>

/**
 * @description Invalid input
 */
export const detectFeeds422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DetectFeeds422>

/**
 * @description Failed to fetch data
 */
export const detectFeeds502Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DetectFeeds502>

/**
 * @description Unknown error
 */
export const detectFeedsErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DetectFeedsError>

export const detectFeedsMutationRequestSchema = z
  .lazy(() => feedDetectSchema)
  .describe(
    'Data to detect RSS feeds using',
  ) as unknown as ToZod<DetectFeedsMutationRequest>

export const detectFeedsMutationResponseSchema = z.lazy(
  () => detectFeeds201Schema,
) as unknown as ToZod<DetectFeedsMutationResponse>

/**
 * @description Scraped feed
 */
export const scrapeFeed201Schema = z
  .lazy(() => feedSchema)
  .describe('RSS feed') as unknown as ToZod<ScrapeFeed201>

/**
 * @description User not authenticated
 */
export const scrapeFeed401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ScrapeFeed401>

/**
 * @description Invalid input
 */
export const scrapeFeed422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ScrapeFeed422>

/**
 * @description Failed to fetch data
 */
export const scrapeFeed502Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ScrapeFeed502>

/**
 * @description Unknown error
 */
export const scrapeFeedErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ScrapeFeedError>

export const scrapeFeedMutationRequestSchema = z
  .lazy(() => feedScrapeSchema)
  .describe(
    'Data to scrape an RSS feed using',
  ) as unknown as ToZod<ScrapeFeedMutationRequest>

export const scrapeFeedMutationResponseSchema = z.lazy(
  () => scrapeFeed201Schema,
) as unknown as ToZod<ScrapeFeedMutationResponse>

export const listStreamsQueryParamsSchema = z
  .object({
    cursor: z.string().describe('Pagination cursor').optional(),
  })
  .optional() as unknown as ToZod<ListStreamsQueryParams>

/**
 * @description Paginated list of streams
 */
export const listStreams200Schema = z
  .lazy(() => paginatedStreamSchema)
  .describe('Paginated list of results') as unknown as ToZod<ListStreams200>

/**
 * @description User not authenticated
 */
export const listStreams401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ListStreams401>

/**
 * @description Unknown error
 */
export const listStreamsErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ListStreamsError>

export const listStreamsQueryResponseSchema = z.lazy(
  () => listStreams200Schema,
) as unknown as ToZod<ListStreamsQueryResponse>

/**
 * @description Created stream
 */
export const createStream201Schema = z.lazy(
  () => streamSchema,
) as unknown as ToZod<CreateStream201>

/**
 * @description User not authenticated
 */
export const createStream401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateStream401>

/**
 * @description Stream already exists
 */
export const createStream409Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateStream409>

/**
 * @description Invalid input
 */
export const createStream422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateStream422>

/**
 * @description Unknown error
 */
export const createStreamErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateStreamError>

export const createStreamMutationRequestSchema = z.lazy(
  () => streamCreateSchema,
) as unknown as ToZod<CreateStreamMutationRequest>

export const createStreamMutationResponseSchema = z.lazy(
  () => createStream201Schema,
) as unknown as ToZod<CreateStreamMutationResponse>

export const getStreamPathParamsSchema = z.object({
  id: z.string().uuid().describe('Unique identifier of the resource'),
}) as unknown as ToZod<GetStreamPathParams>

/**
 * @description Stream by ID
 */
export const getStream200Schema = z.lazy(
  () => streamSchema,
) as unknown as ToZod<GetStream200>

/**
 * @description User not authenticated
 */
export const getStream401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetStream401>

/**
 * @description User not authorized
 */
export const getStream403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetStream403>

/**
 * @description Stream not found
 */
export const getStream404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetStream404>

/**
 * @description Unknown error
 */
export const getStreamErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetStreamError>

export const getStreamQueryResponseSchema = z.lazy(
  () => getStream200Schema,
) as unknown as ToZod<GetStreamQueryResponse>

export const deleteStreamPathParamsSchema = z.object({
  id: z.string().uuid().describe('Unique identifier of the resource'),
}) as unknown as ToZod<DeleteStreamPathParams>

/**
 * @description Successfully deleted stream
 */
export const deleteStream204Schema =
  z.any() as unknown as ToZod<DeleteStream204>

/**
 * @description User not authenticated
 */
export const deleteStream401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteStream401>

/**
 * @description User not authorized
 */
export const deleteStream403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteStream403>

/**
 * @description Stream not found
 */
export const deleteStream404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteStream404>

/**
 * @description Unknown error
 */
export const deleteStreamErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteStreamError>

export const deleteStreamMutationResponseSchema = z.lazy(
  () => deleteStream204Schema,
) as unknown as ToZod<DeleteStreamMutationResponse>

export const updateStreamPathParamsSchema = z.object({
  id: z.string().uuid().describe('Unique identifier of the resource'),
}) as unknown as ToZod<UpdateStreamPathParams>

/**
 * @description Updated stream
 */
export const updateStream200Schema = z.lazy(
  () => streamSchema,
) as unknown as ToZod<UpdateStream200>

/**
 * @description User not authenticated
 */
export const updateStream401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateStream401>

/**
 * @description User not authorized
 */
export const updateStream403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateStream403>

/**
 * @description Stream not found
 */
export const updateStream404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateStream404>

/**
 * @description Invalid input
 */
export const updateStream422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateStream422>

/**
 * @description Unknown error
 */
export const updateStreamErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateStreamError>

export const updateStreamMutationRequestSchema = z.lazy(
  () => streamUpdateSchema,
) as unknown as ToZod<UpdateStreamMutationRequest>

export const updateStreamMutationResponseSchema = z.lazy(
  () => updateStream200Schema,
) as unknown as ToZod<UpdateStreamMutationResponse>

export const listSubscriptionsQueryParamsSchema = z
  .object({
    filterByTags: z
      .boolean()
      .describe('Whether to filter by tags linked to the subscription')
      .optional(),
    'tag[]': z
      .array(z.string().uuid())
      .describe('Filter by the IDs of the tags linked to the subscription')
      .optional(),
    cursor: z.string().describe('Pagination cursor').optional(),
    withFeed: z
      .boolean()
      .describe('Whether to include the feed associated with the subscription')
      .optional(),
    withUnreadCount: z
      .boolean()
      .describe(
        'Whether to include the count of the unread subscription entries associated with the subscription',
      )
      .optional(),
    withTags: z
      .boolean()
      .describe('Whether to include the tags linked to the subscription')
      .optional(),
  })
  .optional() as unknown as ToZod<ListSubscriptionsQueryParams>

/**
 * @description Paginated list of subscriptions
 */
export const listSubscriptions200Schema = z
  .lazy(() => paginatedSubscriptionDetailsSchema)
  .describe(
    'Paginated list of results',
  ) as unknown as ToZod<ListSubscriptions200>

/**
 * @description User not authenticated
 */
export const listSubscriptions401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ListSubscriptions401>

/**
 * @description Unknown error
 */
export const listSubscriptionsErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ListSubscriptionsError>

export const listSubscriptionsQueryResponseSchema = z.lazy(
  () => listSubscriptions200Schema,
) as unknown as ToZod<ListSubscriptionsQueryResponse>

/**
 * @description Created subscription
 */
export const createSubscription201Schema = z
  .lazy(() => subscriptionSchema)
  .describe(
    'User subscription to an RSS feed',
  ) as unknown as ToZod<CreateSubscription201>

/**
 * @description User not authenticated
 */
export const createSubscription401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateSubscription401>

/**
 * @description Subscription already exists
 */
export const createSubscription409Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateSubscription409>

/**
 * @description Invalid input
 */
export const createSubscription422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateSubscription422>

/**
 * @description Unknown error
 */
export const createSubscriptionErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateSubscriptionError>

export const createSubscriptionMutationRequestSchema = z
  .lazy(() => subscriptionCreateSchema)
  .describe(
    'Data to create a new user subscription',
  ) as unknown as ToZod<CreateSubscriptionMutationRequest>

export const createSubscriptionMutationResponseSchema = z.lazy(
  () => createSubscription201Schema,
) as unknown as ToZod<CreateSubscriptionMutationResponse>

export const getSubscriptionPathParamsSchema = z.object({
  id: z.string().uuid().describe('Unique identifier of the resource'),
}) as unknown as ToZod<GetSubscriptionPathParams>

export const getSubscriptionQueryParamsSchema = z
  .object({
    withFeed: z
      .boolean()
      .describe('Whether to include the feed associated with the subscription')
      .optional(),
    withUnreadCount: z
      .boolean()
      .describe(
        'Whether to include the count of the unread subscription entries associated with the subscription',
      )
      .optional(),
    withTags: z
      .boolean()
      .describe('Whether to include the tags linked to the subscription')
      .optional(),
  })
  .optional() as unknown as ToZod<GetSubscriptionQueryParams>

/**
 * @description Subscription by ID
 */
export const getSubscription200Schema = z
  .lazy(() => subscriptionDetailsSchema)
  .describe(
    'Extended details of a user subscription',
  ) as unknown as ToZod<GetSubscription200>

/**
 * @description User not authenticated
 */
export const getSubscription401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetSubscription401>

/**
 * @description User not authorized
 */
export const getSubscription403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetSubscription403>

/**
 * @description Subscription not found
 */
export const getSubscription404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetSubscription404>

/**
 * @description Unknown error
 */
export const getSubscriptionErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetSubscriptionError>

export const getSubscriptionQueryResponseSchema = z.lazy(
  () => getSubscription200Schema,
) as unknown as ToZod<GetSubscriptionQueryResponse>

export const deleteSubscriptionPathParamsSchema = z.object({
  id: z.string().uuid().describe('Unique identifier of the resource'),
}) as unknown as ToZod<DeleteSubscriptionPathParams>

/**
 * @description Successfully deleted subscription
 */
export const deleteSubscription204Schema =
  z.any() as unknown as ToZod<DeleteSubscription204>

/**
 * @description User not authenticated
 */
export const deleteSubscription401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteSubscription401>

/**
 * @description User not authorized
 */
export const deleteSubscription403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteSubscription403>

/**
 * @description Subscription not found
 */
export const deleteSubscription404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteSubscription404>

/**
 * @description Unknown error
 */
export const deleteSubscriptionErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteSubscriptionError>

export const deleteSubscriptionMutationResponseSchema = z.lazy(
  () => deleteSubscription204Schema,
) as unknown as ToZod<DeleteSubscriptionMutationResponse>

export const updateSubscriptionPathParamsSchema = z.object({
  id: z.string().uuid().describe('Unique identifier of the resource'),
}) as unknown as ToZod<UpdateSubscriptionPathParams>

/**
 * @description Updated subscription
 */
export const updateSubscription200Schema = z
  .lazy(() => subscriptionSchema)
  .describe(
    'User subscription to an RSS feed',
  ) as unknown as ToZod<UpdateSubscription200>

/**
 * @description User not authenticated
 */
export const updateSubscription401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateSubscription401>

/**
 * @description User not authorized
 */
export const updateSubscription403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateSubscription403>

/**
 * @description Subscription not found
 */
export const updateSubscription404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateSubscription404>

/**
 * @description Invalid input
 */
export const updateSubscription422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateSubscription422>

/**
 * @description Unknown error
 */
export const updateSubscriptionErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateSubscriptionError>

export const updateSubscriptionMutationRequestSchema = z
  .lazy(() => subscriptionUpdateSchema)
  .describe(
    'Updates to make to an existing subscription',
  ) as unknown as ToZod<UpdateSubscriptionMutationRequest>

export const updateSubscriptionMutationResponseSchema = z.lazy(
  () => updateSubscription200Schema,
) as unknown as ToZod<UpdateSubscriptionMutationResponse>

export const linkSubscriptionTagsPathParamsSchema = z.object({
  id: z.string().uuid().describe('Unique identifier of the resource'),
}) as unknown as ToZod<LinkSubscriptionTagsPathParams>

/**
 * @description Successfully linked tags
 */
export const linkSubscriptionTags204Schema =
  z.any() as unknown as ToZod<LinkSubscriptionTags204>

/**
 * @description User not authenticated
 */
export const linkSubscriptionTags401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<LinkSubscriptionTags401>

/**
 * @description User not authorized
 */
export const linkSubscriptionTags403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<LinkSubscriptionTags403>

/**
 * @description Subscription not found
 */
export const linkSubscriptionTags404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<LinkSubscriptionTags404>

/**
 * @description Invalid input
 */
export const linkSubscriptionTags422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<LinkSubscriptionTags422>

/**
 * @description Unknown error
 */
export const linkSubscriptionTagsErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<LinkSubscriptionTagsError>

export const linkSubscriptionTagsMutationRequestSchema = z
  .lazy(() => linkSubscriptionTagsSchema)
  .describe(
    'Action to link tags to a user subscription',
  ) as unknown as ToZod<LinkSubscriptionTagsMutationRequest>

export const linkSubscriptionTagsMutationResponseSchema = z.lazy(
  () => linkSubscriptionTags204Schema,
) as unknown as ToZod<LinkSubscriptionTagsMutationResponse>

export const markSubscriptionEntryAsReadPathParamsSchema = z.object({
  sid: z
    .string()
    .uuid()
    .describe('Unique identifier of the associated subscription'),
  eid: z
    .string()
    .uuid()
    .describe('Unique identifier of the associated feed entry'),
}) as unknown as ToZod<MarkSubscriptionEntryAsReadPathParams>

/**
 * @description Updated subscription entry
 */
export const markSubscriptionEntryAsRead200Schema = z
  .lazy(() => subscriptionEntrySchema)
  .describe(
    'Association of a RSS feed entry to a user subscription. The pairing of subscription ID and feed entry ID is unique.',
  ) as unknown as ToZod<MarkSubscriptionEntryAsRead200>

/**
 * @description User not authenticated
 */
export const markSubscriptionEntryAsRead401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<MarkSubscriptionEntryAsRead401>

/**
 * @description User not authorized
 */
export const markSubscriptionEntryAsRead403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<MarkSubscriptionEntryAsRead403>

/**
 * @description Subscription entry not found
 */
export const markSubscriptionEntryAsRead404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<MarkSubscriptionEntryAsRead404>

/**
 * @description Invalid input
 */
export const markSubscriptionEntryAsRead422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<MarkSubscriptionEntryAsRead422>

/**
 * @description Unknown error
 */
export const markSubscriptionEntryAsReadErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<MarkSubscriptionEntryAsReadError>

export const markSubscriptionEntryAsReadMutationResponseSchema = z.lazy(
  () => markSubscriptionEntryAsRead200Schema,
) as unknown as ToZod<MarkSubscriptionEntryAsReadMutationResponse>

export const markSubscriptionEntryAsUnreadPathParamsSchema = z.object({
  sid: z
    .string()
    .uuid()
    .describe('Unique identifier of the associated subscription'),
  eid: z
    .string()
    .uuid()
    .describe('Unique identifier of the associated feed entry'),
}) as unknown as ToZod<MarkSubscriptionEntryAsUnreadPathParams>

/**
 * @description Updated subscription entry
 */
export const markSubscriptionEntryAsUnread200Schema = z
  .lazy(() => subscriptionEntrySchema)
  .describe(
    'Association of a RSS feed entry to a user subscription. The pairing of subscription ID and feed entry ID is unique.',
  ) as unknown as ToZod<MarkSubscriptionEntryAsUnread200>

/**
 * @description User not authenticated
 */
export const markSubscriptionEntryAsUnread401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<MarkSubscriptionEntryAsUnread401>

/**
 * @description User not authorized
 */
export const markSubscriptionEntryAsUnread403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<MarkSubscriptionEntryAsUnread403>

/**
 * @description Subscription entry not found
 */
export const markSubscriptionEntryAsUnread404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<MarkSubscriptionEntryAsUnread404>

/**
 * @description Invalid input
 */
export const markSubscriptionEntryAsUnread422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<MarkSubscriptionEntryAsUnread422>

/**
 * @description Unknown error
 */
export const markSubscriptionEntryAsUnreadErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<MarkSubscriptionEntryAsUnreadError>

export const markSubscriptionEntryAsUnreadMutationResponseSchema = z.lazy(
  () => markSubscriptionEntryAsUnread200Schema,
) as unknown as ToZod<MarkSubscriptionEntryAsUnreadMutationResponse>

/**
 * @description Successfully started import
 */
export const importSubscriptions204Schema =
  z.any() as unknown as ToZod<ImportSubscriptions204>

/**
 * @description User not authenticated
 */
export const importSubscriptions401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ImportSubscriptions401>

/**
 * @description Unknown error
 */
export const importSubscriptionsErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ImportSubscriptionsError>

export const importSubscriptionsMutationRequestSchema = z.array(
  z.number().int().min(0),
) as unknown as ToZod<ImportSubscriptionsMutationRequest>

export const importSubscriptionsMutationResponseSchema = z.lazy(
  () => importSubscriptions204Schema,
) as unknown as ToZod<ImportSubscriptionsMutationResponse>

/**
 * @description OPML subscriptions file
 */
export const exportSubscriptions200Schema = z.array(
  z.number().int().min(0),
) as unknown as ToZod<ExportSubscriptions200>

/**
 * @description User not authenticated
 */
export const exportSubscriptions401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ExportSubscriptions401>

/**
 * @description Unknown error
 */
export const exportSubscriptionsErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ExportSubscriptionsError>

export const exportSubscriptionsMutationResponseSchema = z.lazy(
  () => exportSubscriptions200Schema,
) as unknown as ToZod<ExportSubscriptionsMutationResponse>

export const listSubscriptionEntriesQueryParamsSchema = z
  .object({
    streamId: z
      .string()
      .uuid()
      .describe(
        'Filter by the ID of a stream whose filters may apply to the subscription entry',
      )
      .optional(),
    subscriptionId: z
      .string()
      .uuid()
      .describe('Filter by the ID of the associated subscription')
      .optional(),
    hasRead: z
      .boolean()
      .describe(
        'Filter by whether the subscription entry has been marked as read',
      )
      .optional(),
    'tag[]': z
      .array(z.string().uuid())
      .describe(
        'Filter by the IDs of the tags linked to the associated subscription',
      )
      .optional(),
    cursor: z.string().describe('Pagination cursor').optional(),
  })
  .optional() as unknown as ToZod<ListSubscriptionEntriesQueryParams>

/**
 * @description Paginated list of subscription entries
 */
export const listSubscriptionEntries200Schema = z
  .lazy(() => paginatedSubscriptionEntryDetailsSchema)
  .describe(
    'Paginated list of results',
  ) as unknown as ToZod<ListSubscriptionEntries200>

/**
 * @description User not authenticated
 */
export const listSubscriptionEntries401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ListSubscriptionEntries401>

/**
 * @description Unknown error
 */
export const listSubscriptionEntriesErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ListSubscriptionEntriesError>

export const listSubscriptionEntriesQueryResponseSchema = z.lazy(
  () => listSubscriptionEntries200Schema,
) as unknown as ToZod<ListSubscriptionEntriesQueryResponse>

export const listTagsQueryParamsSchema = z
  .object({
    tagType: z
      .enum(['bookmarks', 'feeds'])
      .describe('Filter by the type of tag')
      .optional(),
    cursor: z.string().describe('Pagination cursor').optional(),
    withSubscriptionCount: z
      .boolean()
      .describe(
        'Whether to include the count of subscriptions the tag is linked to',
      )
      .optional(),
    withBookmarkCount: z
      .boolean()
      .describe(
        'Whether to include the count of bookmarks the tag is linked to',
      )
      .optional(),
  })
  .optional() as unknown as ToZod<ListTagsQueryParams>

/**
 * @description Paginated list of tags
 */
export const listTags200Schema = z
  .lazy(() => paginatedTagDetailsSchema)
  .describe('Paginated list of results') as unknown as ToZod<ListTags200>

/**
 * @description User not authenticated
 */
export const listTags401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ListTags401>

/**
 * @description Unknown error
 */
export const listTagsErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<ListTagsError>

export const listTagsQueryResponseSchema = z.lazy(
  () => listTags200Schema,
) as unknown as ToZod<ListTagsQueryResponse>

/**
 * @description Created tag
 */
export const createTag201Schema = z
  .lazy(() => tagSchema)
  .describe(
    'Tag that can be attached to subscriptions and bookmarks',
  ) as unknown as ToZod<CreateTag201>

/**
 * @description User not authenticated
 */
export const createTag401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateTag401>

/**
 * @description Tag already exists
 */
export const createTag409Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateTag409>

/**
 * @description Invalid input
 */
export const createTag422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateTag422>

/**
 * @description Unknown error
 */
export const createTagErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<CreateTagError>

export const createTagMutationRequestSchema = z
  .lazy(() => tagCreateSchema)
  .describe(
    'Data to create a new tag',
  ) as unknown as ToZod<CreateTagMutationRequest>

export const createTagMutationResponseSchema = z.lazy(
  () => createTag201Schema,
) as unknown as ToZod<CreateTagMutationResponse>

export const getTagPathParamsSchema = z.object({
  id: z.string().uuid().describe('Unique identifier of the resource'),
}) as unknown as ToZod<GetTagPathParams>

export const getTagQueryParamsSchema = z
  .object({
    withSubscriptionCount: z
      .boolean()
      .describe(
        'Whether to include the count of subscriptions the tag is linked to',
      )
      .optional(),
    withBookmarkCount: z
      .boolean()
      .describe(
        'Whether to include the count of bookmarks the tag is linked to',
      )
      .optional(),
  })
  .optional() as unknown as ToZod<GetTagQueryParams>

/**
 * @description Tag by ID
 */
export const getTag200Schema = z
  .lazy(() => tagDetailsSchema)
  .describe('Extended details of a tag') as unknown as ToZod<GetTag200>

/**
 * @description User not authenticated
 */
export const getTag401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetTag401>

/**
 * @description User not authorized
 */
export const getTag403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetTag403>

/**
 * @description Tag not found
 */
export const getTag404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetTag404>

/**
 * @description Unknown error
 */
export const getTagErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<GetTagError>

export const getTagQueryResponseSchema = z.lazy(
  () => getTag200Schema,
) as unknown as ToZod<GetTagQueryResponse>

export const deleteTagPathParamsSchema = z.object({
  id: z.string().uuid().describe('Unique identifier of the resource'),
}) as unknown as ToZod<DeleteTagPathParams>

/**
 * @description Successfully deleted tag
 */
export const deleteTag204Schema = z.any() as unknown as ToZod<DeleteTag204>

/**
 * @description User not authenticated
 */
export const deleteTag401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteTag401>

/**
 * @description User not authorized
 */
export const deleteTag403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteTag403>

/**
 * @description Tag not found
 */
export const deleteTag404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteTag404>

/**
 * @description Unknown error
 */
export const deleteTagErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<DeleteTagError>

export const deleteTagMutationResponseSchema = z.lazy(
  () => deleteTag204Schema,
) as unknown as ToZod<DeleteTagMutationResponse>

export const updateTagPathParamsSchema = z.object({
  id: z.string().uuid().describe('Unique identifier of the resource'),
}) as unknown as ToZod<UpdateTagPathParams>

/**
 * @description Updated tag
 */
export const updateTag200Schema = z
  .lazy(() => tagSchema)
  .describe(
    'Tag that can be attached to subscriptions and bookmarks',
  ) as unknown as ToZod<UpdateTag200>

/**
 * @description User not authenticated
 */
export const updateTag401Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateTag401>

/**
 * @description User not authorized
 */
export const updateTag403Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateTag403>

/**
 * @description Tag not found
 */
export const updateTag404Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateTag404>

/**
 * @description Invalid input
 */
export const updateTag422Schema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateTag422>

/**
 * @description Unknown error
 */
export const updateTagErrorSchema = z.lazy(
  () => apiErrorSchema,
) as unknown as ToZod<UpdateTagError>

export const updateTagMutationRequestSchema = z
  .lazy(() => tagUpdateSchema)
  .describe(
    'Updates to make to an existing tag',
  ) as unknown as ToZod<UpdateTagMutationRequest>

export const updateTagMutationResponseSchema = z.lazy(
  () => updateTag200Schema,
) as unknown as ToZod<UpdateTagMutationResponse>
