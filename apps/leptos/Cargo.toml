[package]
name = "colette-leptos"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
axum = { workspace = true, features = ["tokio"], optional = true }
colette-api.workspace = true
colette-backup = { workspace = true, optional = true }
colette-config = { workspace = true, optional = true }
colette-core = { workspace = true, optional = true }
colette-plugins = { workspace = true, optional = true }
colette-queue = { workspace = true, features = ["in-memory"], optional = true }
colette-repository = { workspace = true, features = [
  "postgres",
], optional = true }
colette-scraper = { workspace = true, optional = true }
colette-session = { workspace = true, features = ["postgres"], optional = true }
colette-task = { workspace = true, optional = true }
colette-util = { workspace = true, optional = true }
colette-worker = { workspace = true, optional = true }
console_error_panic_hook = "0.1"
deadpool-postgres = { workspace = true, optional = true }
http.workspace = true
leptos = { version = "0.7" }
leptos_axum = { version = "0.7", optional = true }
leptos_meta = { version = "0.7" }
leptos_router = { version = "0.7" }
reqwest = { workspace = true, optional = true }
serde.workspace = true
tailwind_fuse = { version = "0.3", default-features = false, features = [
  "variant",
] }
thiserror.workspace = true
tokio = { workspace = true, features = ["rt-multi-thread"], optional = true }
tower = { workspace = true, optional = true }
tower-http = { version = "0.6", features = [
  "cors",
  "fs",
  "trace",
], optional = true }
tower-sessions = { workspace = true, optional = true }
tower-sessions-core = { workspace = true, optional = true }
tracing = { workspace = true, optional = true }
tracing-subscriber = { workspace = true, optional = true }
wasm-bindgen = "=0.2.96"

[features]
ssr = [
  "dep:axum",
  "dep:colette-backup",
  "dep:colette-config",
  "dep:colette-core",
  "dep:colette-plugins",
  "dep:colette-queue",
  "dep:colette-repository",
  "dep:colette-scraper",
  "dep:colette-session",
  "dep:colette-task",
  "dep:colette-util",
  "dep:colette-worker",
  "dep:deadpool-postgres",
  "leptos/ssr",
  "dep:leptos_axum",
  "leptos_meta/ssr",
  "leptos_router/ssr",
  "dep:reqwest",
  "dep:tokio",
  "dep:tower",
  "dep:tower-http",
  "dep:tower-sessions",
  "dep:tower-sessions-core",
  "dep:tracing",
  "dep:tracing-subscriber",
]
hydrate = ["leptos/hydrate"]

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "colette"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# The tailwind input file.
#
# Optional, Activates the tailwind build
tailwind-input-file = "style/tailwind.css"

# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false
